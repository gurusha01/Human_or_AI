{
    "version": "2025-01-09-base",
    "scanId": "b2204b7f-960d-497f-861e-02174cd9c447",
    "documents": [
        {
            "sentences": [
                {
                    "generated_prob": 0.0029591515194624662,
                    "sentence": "I find this paper not very compelling.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": false
                },
                {
                    "generated_prob": 0.0036736237816512585,
                    "sentence": "The basic idea seems to be that we can put a fast neighbor searcher into a memory augmented net to make the memory lookups scalable.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": false
                },
                {
                    "generated_prob": 0.003844817169010639,
                    "sentence": "However, this was precisely the point of Rae et al.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": false
                },
                {
                    "generated_prob": 0.0030206236988306046,
                    "sentence": "There are a number of standardized neighbor searchers; I don't understand why the authors choose to use their own (which they do not benchmark against the standards).",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": false
                },
                {
                    "generated_prob": 0.002864366164430976,
                    "sentence": "Moreover, they test on a problem where there is no clear need for (vector based) fast-nn, because one can use hashing on the text.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": false
                },
                {
                    "generated_prob": 0.0037157635670155287,
                    "sentence": "I also find the repeated distinction between \"mips\" and \"nns\" distracting; most libraries that can do one can do the other, or inputs can be modified to switch between the problems; indeed the authors do this when they convert to the \"mcss\" problem.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": false
                }
            ],
            "paragraphs": [
                {
                    "start_sentence_index": 0,
                    "num_sentences": 6,
                    "completely_generated_prob": 1.474742012248794e-05
                }
            ],
            "completely_generated_prob": 0.01728879156693996,
            "class_probabilities": {
                "human": 0.98271120843306,
                "ai": 0.01728879156693996,
                "mixed": 0
            },
            "average_generated_prob": 0,
            "predicted_class": "human",
            "confidence_score": 0.98271120843306,
            "confidence_category": "high",
            "confidence_scores_raw": {
                "identity": {
                    "ai": 0.01728879156693996,
                    "human": 0.98271120843306,
                    "mixed": 0
                }
            },
            "confidence_thresholds_raw": {
                "identity": {
                    "ai": {
                        "reject": 0.65,
                        "low": 0.75,
                        "medium": 0.92
                    },
                    "human": {
                        "reject": 0.7,
                        "low": 0.82,
                        "medium": 0.92
                    },
                    "mixed": {
                        "reject": 0.7,
                        "low": 0.8,
                        "medium": 0.88
                    }
                }
            },
            "overall_burstiness": 0,
            "writing_stats": {},
            "subclass": {
                "ai": {},
                "human": {},
                "mixed": {}
            },
            "result_message": "Our detector is highly confident that the text is written entirely by a human.",
            "document_classification": "HUMAN_ONLY",
            "version": "2025-01-09-base",
            "language": "en",
            "inputText": "I find this paper not very compelling. The basic idea seems to be that we can put a fast neighbor searcher into a memory augmented net to make the memory lookups scalable. However, this was precisely the point of Rae et al. There are a number of standardized neighbor searchers; I don't understand why the authors choose to use their own (which they do not benchmark against the standards). Moreover, they test on a problem where there is no clear need for (vector based) fast-nn, because one can use hashing on the text. I also find the repeated distinction between \"mips\" and \"nns\" distracting; most libraries that can do one can do the other, or inputs can be modified to switch between the problems; indeed the authors do this when they convert to the \"mcss\" problem."
        }
    ]
}