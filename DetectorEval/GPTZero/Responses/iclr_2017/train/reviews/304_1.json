{
    "version": "2025-01-09-base",
    "scanId": "0fcb5c73-1318-40c8-965a-f95d1924a204",
    "documents": [
        {
            "sentences": [
                {
                    "generated_prob": 0.01078689843416214,
                    "sentence": "This paper argues that being able to handle recursion is very important for neural programming architectures \"\" that handling recursion allows for strong generalization to out of domain test cases and learning from smaller amounts of training data.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": false
                },
                {
                    "generated_prob": 0.009188473224639893,
                    "sentence": "Most of the paper is a riff on the Reed & de Freitas paper on Neural Programmer Interpreters from ICLR 2016 which learns from program traces \"\" this paper trains NPI models on traces that have recursive calls.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": false
                },
                {
                    "generated_prob": 0.019274527207016945,
                    "sentence": "The authors show how to verify correctness by evaluating the learned program on only a small set of base cases and reduction rules and impressively, show that the NPI architecture is able to perfectly infer Bubblesort and the Tower of Hanoi problems.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": false
                },
                {
                    "generated_prob": 0.009750031866133213,
                    "sentence": "What I like is that the idea is super simple and as the authors even mention, the only change is to the execution traces that the training pipeline gets to see.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": false
                },
                {
                    "generated_prob": 0.011015988886356354,
                    "sentence": "I'm actually not sure what the right take-away is \"\" does this mean that we have effectively solved the neural programming problem when the execution traces are available?",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": false
                },
                {
                    "generated_prob": 0.014831975102424622,
                    "sentence": "(and was the problem too easy to begin with?).",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": false
                },
                {
                    "generated_prob": 0.019473543390631676,
                    "sentence": "For example, a larger input domain (as one of the reviewers also mentions) is MNIST digits and we can imagine a problem where the NPI must infer how to sort MNIST digits from highest to lowest.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": false
                },
                {
                    "generated_prob": 0.014718788675963879,
                    "sentence": "In this setting, having execution traces would effectively decouple the problem of recognizing the digits from that of inferring the program logic \"\" and so the problem would be no harder than learning to recognize MNIST digits and learning to bubble sort from symbols.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": false
                },
                {
                    "generated_prob": 0.061438705772161484,
                    "sentence": "What is a problem where we have access to execution traces but cannot infer it using the proposed method?",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": false
                }
            ],
            "paragraphs": [
                {
                    "start_sentence_index": 0,
                    "num_sentences": 3,
                    "completely_generated_prob": 0.00408719312638748
                },
                {
                    "start_sentence_index": 3,
                    "num_sentences": 6,
                    "completely_generated_prob": 1.474742012248794e-05
                }
            ],
            "completely_generated_prob": 0.03751552122182913,
            "class_probabilities": {
                "human": 0.9622006644706045,
                "ai": 0.03751552122182913,
                "mixed": 0.00028381430756647936
            },
            "average_generated_prob": 0,
            "predicted_class": "human",
            "confidence_score": 0.9622006644706045,
            "confidence_category": "high",
            "confidence_scores_raw": {
                "identity": {
                    "ai": 0.03751552122182913,
                    "human": 0.9622006644706045,
                    "mixed": 0.00028381430756647936
                }
            },
            "confidence_thresholds_raw": {
                "identity": {
                    "ai": {
                        "reject": 0.65,
                        "low": 0.75,
                        "medium": 0.92
                    },
                    "human": {
                        "reject": 0.7,
                        "low": 0.82,
                        "medium": 0.92
                    },
                    "mixed": {
                        "reject": 0.7,
                        "low": 0.8,
                        "medium": 0.88
                    }
                }
            },
            "overall_burstiness": 0,
            "writing_stats": {},
            "subclass": {
                "ai": {},
                "human": {},
                "mixed": {}
            },
            "result_message": "Our detector is highly confident that the text is written entirely by a human.",
            "document_classification": "HUMAN_ONLY",
            "version": "2025-01-09-base",
            "language": "en",
            "inputText": "This paper argues that being able to handle recursion is very important for neural programming architectures \"\" that handling recursion allows for strong generalization to out of domain test cases and learning from smaller amounts of training data. Most of the paper is a riff on the Reed & de Freitas paper on Neural Programmer Interpreters from ICLR 2016 which learns from program traces \"\" this paper trains NPI models on traces that have recursive calls. The authors show how to verify correctness by evaluating the learned program on only a small set of base cases and reduction rules and impressively, show that the NPI architecture is able to perfectly infer Bubblesort and the Tower of Hanoi problems. \nWhat I like is that the idea is super simple and as the authors even mention, the only change is to the execution traces that the training pipeline gets to see. I'm actually not sure what the right take-away is \"\" does this mean that we have effectively solved the neural programming problem when the execution traces are available? (and was the problem too easy to begin with?). For example, a larger input domain (as one of the reviewers also mentions) is MNIST digits and we can imagine a problem where the NPI must infer how to sort MNIST digits from highest to lowest. In this setting, having execution traces would effectively decouple the problem of recognizing the digits from that of inferring the program logic \"\" and so the problem would be no harder than learning to recognize MNIST digits and learning to bubble sort from symbols. What is a problem where we have access to execution traces but cannot infer it using the proposed method?"
        }
    ]
}