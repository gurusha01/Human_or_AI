{
    "version": "2025-01-09-base",
    "scanId": "6a0a4eee-df9f-4fe0-b941-fab8114aa4c7",
    "documents": [
        {
            "sentences": [
                {
                    "generated_prob": 0.9817845225334167,
                    "sentence": "This paper extends STOKE (Schkufza et al., 2013), a superoptimization engine for program binaries.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": true
                },
                {
                    "generated_prob": 0.9705486297607422,
                    "sentence": "STOKE operates by starting with an existing program and proposing modifications based on a fixed proposal distribution.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": true
                },
                {
                    "generated_prob": 0.9728812575340271,
                    "sentence": "Proposals are accepted or rejected using the Metropolis-Hastings criteria, which considers both program correctness and performance.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": true
                },
                {
                    "generated_prob": 0.9640306234359741,
                    "sentence": "This ensures that the MCMC process converges to correct, high-performance programs.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": true
                },
                {
                    "generated_prob": 0.95142662525177,
                    "sentence": "The key contribution of this work is the introduction of a learned proposal distribution that conditions on program features (represented as a bag of words of all opcodes).",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": true
                },
                {
                    "generated_prob": 0.9565423727035522,
                    "sentence": "The authors compare their method against two baselines: a uniform proposal distribution and a baseline where the proposal distribution is learned without conditioning on program features.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": true
                },
                {
                    "generated_prob": 0.9334419369697571,
                    "sentence": "Experimental results show that the proposed method achieves slightly better performance than the baselines.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": true
                },
                {
                    "generated_prob": 0.7631466388702393,
                    "sentence": "However, the significance of this work for ICLR appears to be limited.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": true
                },
                {
                    "generated_prob": 0.7029229402542114,
                    "sentence": "The paper does not advance the field of representation learning but rather applies neural networks and REINFORCE to a task with non-differentiable components.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": true
                },
                {
                    "generated_prob": 0.74129718542099,
                    "sentence": "Furthermore, the task of superoptimization may not align well with the interests of ICLR's audience.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": true
                },
                {
                    "generated_prob": 0.7769609093666077,
                    "sentence": "Conferences such as AAAI or UAI may be more appropriate venues for this work.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": true
                },
                {
                    "generated_prob": 0.7379000782966614,
                    "sentence": "The proposed method does appear to be novel, as traditional MCMC-based synthesis methods lack learning components.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": true
                },
                {
                    "generated_prob": 0.7124615907669067,
                    "sentence": "Nevertheless, to make the contribution more compelling, the authors should demonstrate the applicability of their approach to other synthesis tasks or broader domains where MH-MCMC is used, and where a learned proposal distribution could provide significant benefits.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": true
                },
                {
                    "generated_prob": 0.6804527640342712,
                    "sentence": "Focusing solely on superoptimization, especially with marginal improvements over baselines, does not make the work sufficiently impactful.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": true
                },
                {
                    "generated_prob": 0.8257308602333069,
                    "sentence": "Additionally, it is unclear whether any meaningful representation learning is taking place.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": true
                },
                {
                    "generated_prob": 0.8153850436210632,
                    "sentence": "The use of bag-of-words features to represent programs limits the neural network to learning simple correlations between opcode occurrences and beneficial modifications.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": true
                },
                {
                    "generated_prob": 0.8073980212211609,
                    "sentence": "This approach does not capture program semantics.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": true
                },
                {
                    "generated_prob": 0.8561112880706787,
                    "sentence": "A more interesting contribution would involve using a model like Tree-LSTM, which is designed to learn semantic representations of programs.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": true
                },
                {
                    "generated_prob": 0.8169254064559937,
                    "sentence": "The simplicity of the proposed learning method diminishes the paper's potential as a strong candidate for acceptance.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": true
                },
                {
                    "generated_prob": 0.7443244457244873,
                    "sentence": "Clarifications in response to reviewer questions could improve the quality of this review.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": true
                },
                {
                    "generated_prob": 0.9134123921394348,
                    "sentence": "Thank you.",
                    "perplexity": 0,
                    "highlight_sentence_for_ai": true
                }
            ],
            "paragraphs": [
                {
                    "start_sentence_index": 0,
                    "num_sentences": 7,
                    "completely_generated_prob": 0.9103421900070616
                },
                {
                    "start_sentence_index": 7,
                    "num_sentences": 4,
                    "completely_generated_prob": 0.0006564766595293492
                },
                {
                    "start_sentence_index": 11,
                    "num_sentences": 3,
                    "completely_generated_prob": 0.00408719312638748
                },
                {
                    "start_sentence_index": 14,
                    "num_sentences": 5,
                    "completely_generated_prob": 0.8871651474786718
                },
                {
                    "start_sentence_index": 19,
                    "num_sentences": 2,
                    "completely_generated_prob": 0.3063829682933457
                }
            ],
            "completely_generated_prob": 0.8119739381064363,
            "class_probabilities": {
                "human": 0.18679001347792185,
                "ai": 0.8119739381064363,
                "mixed": 0.0012360484156418805
            },
            "average_generated_prob": 1,
            "predicted_class": "ai",
            "confidence_score": 0.8119739381064363,
            "confidence_category": "medium",
            "confidence_scores_raw": {
                "identity": {
                    "ai": 0.8119739381064363,
                    "human": 0.18679001347792185,
                    "mixed": 0.0012360484156418805
                }
            },
            "confidence_thresholds_raw": {
                "identity": {
                    "ai": {
                        "reject": 0.65,
                        "low": 0.75,
                        "medium": 0.92
                    },
                    "human": {
                        "reject": 0.7,
                        "low": 0.82,
                        "medium": 0.92
                    },
                    "mixed": {
                        "reject": 0.7,
                        "low": 0.8,
                        "medium": 0.88
                    }
                }
            },
            "overall_burstiness": 0,
            "writing_stats": {},
            "subclass": {
                "ai": {
                    "predicted_class": "pure_ai",
                    "result_message": "",
                    "confidence_score": 0.9999999998,
                    "confidence_category": "high",
                    "class_probabilities": {
                        "pure_ai": 0.9999999999,
                        "ai_paraphrased": 9.999999997e-11
                    },
                    "confidence_scores_raw": {
                        "identity": {
                            "pure_ai": 0.9999999998,
                            "ai_paraphrased": 9.999999997e-11
                        }
                    },
                    "confidence_thresholds_raw": {
                        "identity": {
                            "pure_ai": {
                                "reject": 0.65,
                                "low": 0.75,
                                "medium": 0.92
                            },
                            "ai_paraphrased": {
                                "reject": 0.85,
                                "low": 0.9,
                                "medium": 0.95
                            }
                        }
                    }
                },
                "human": {},
                "mixed": {}
            },
            "result_message": "Our detector is moderately confident that the text is written by AI.",
            "document_classification": "AI_ONLY",
            "version": "2025-01-09-base",
            "language": "en",
            "inputText": "This paper extends STOKE (Schkufza et al., 2013), a superoptimization engine for program binaries. STOKE operates by starting with an existing program and proposing modifications based on a fixed proposal distribution. Proposals are accepted or rejected using the Metropolis-Hastings criteria, which considers both program correctness and performance. This ensures that the MCMC process converges to correct, high-performance programs. The key contribution of this work is the introduction of a learned proposal distribution that conditions on program features (represented as a bag of words of all opcodes). The authors compare their method against two baselines: a uniform proposal distribution and a baseline where the proposal distribution is learned without conditioning on program features. Experimental results show that the proposed method achieves slightly better performance than the baselines.\nHowever, the significance of this work for ICLR appears to be limited. The paper does not advance the field of representation learning but rather applies neural networks and REINFORCE to a task with non-differentiable components. Furthermore, the task of superoptimization may not align well with the interests of ICLR's audience. Conferences such as AAAI or UAI may be more appropriate venues for this work.\nThe proposed method does appear to be novel, as traditional MCMC-based synthesis methods lack learning components. Nevertheless, to make the contribution more compelling, the authors should demonstrate the applicability of their approach to other synthesis tasks or broader domains where MH-MCMC is used, and where a learned proposal distribution could provide significant benefits. Focusing solely on superoptimization, especially with marginal improvements over baselines, does not make the work sufficiently impactful.\nAdditionally, it is unclear whether any meaningful representation learning is taking place. The use of bag-of-words features to represent programs limits the neural network to learning simple correlations between opcode occurrences and beneficial modifications. This approach does not capture program semantics. A more interesting contribution would involve using a model like Tree-LSTM, which is designed to learn semantic representations of programs. The simplicity of the proposed learning method diminishes the paper's potential as a strong candidate for acceptance.\nClarifications in response to reviewer questions could improve the quality of this review. Thank you."
        }
    ]
}