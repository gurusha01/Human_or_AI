Review of "MetaQNN: Reinforcement Learning for Automated Neural Network Design"
Summary
The paper introduces MetaQNN, a reinforcement learning-based framework for automating the design of convolutional neural network (CNN) architectures. The authors frame the architecture search as a Markov Decision Process and employ Q-learning with an ε-greedy exploration strategy and experience replay to iteratively discover high-performing CNN designs. The proposed method eliminates the need for human intervention in CNN design and demonstrates competitive performance on standard image classification benchmarks (CIFAR-10, SVHN, and MNIST). MetaQNN outperforms prior automated network design methods and achieves results comparable to state-of-the-art handcrafted architectures. The paper also highlights the transferability of the discovered architectures to other tasks and discusses potential extensions, such as incorporating constraints or hyperparameter optimization.
Decision: Accept
The paper makes a significant contribution to the field of automated machine learning (AutoML) by proposing a novel reinforcement learning-based approach for CNN design. The method is well-motivated, rigorously evaluated, and demonstrates competitive performance. The key reasons for acceptance are:
1. Novelty and Impact: The use of Q-learning for architecture search is innovative and addresses the labor-intensive process of manual CNN design.
2. Empirical Validation: The results convincingly show that MetaQNN outperforms existing automated methods and matches or exceeds handcrafted architectures on multiple benchmarks.
Supporting Arguments
1. Problem Definition and Motivation: The paper clearly articulates the challenge of manual CNN design and positions MetaQNN as a scalable solution. The reinforcement learning framework is well-justified, leveraging Q-learning's ability to handle large, discrete action spaces.
2. Methodological Rigor: The authors provide a detailed description of the Q-learning process, including state and action space design, exploration-exploitation trade-offs, and experience replay. The constraints imposed on the state-action space are reasonable and ensure tractable learning.
3. Experimental Results: The experiments are comprehensive, covering three datasets with comparisons against both handcrafted and automated methods. The results demonstrate the efficacy of MetaQNN in discovering high-performing architectures, with additional insights into transfer learning and ensemble performance.
4. Reproducibility: The inclusion of algorithmic details, training procedures, and a project website with code and models enhances the reproducibility of the work.
Suggestions for Improvement
1. Scalability and Efficiency: While the method is effective, the computational cost (8-10 days on 10 GPUs per dataset) is significant. The authors could discuss strategies to reduce this cost, such as leveraging parallelism or more efficient exploration techniques.
2. Comparison with Neural Architecture Search (NAS): The paper could provide a more direct comparison with recent NAS methods, particularly those using reinforcement learning or evolutionary algorithms, to contextualize its contributions further.
3. Hyperparameter Sensitivity: The paper mentions that the same hyperparameters were used during the exploration phase for all architectures. An analysis of how sensitive the results are to these hyperparameters would strengthen the claims.
4. State-Action Space Design: The discretization of the state-action space is a key design choice. While the authors justify their approach, a discussion on the trade-offs of this discretization (e.g., granularity vs. convergence speed) would be valuable.
Questions for the Authors
1. Exploration-Exploitation Balance: How sensitive is the performance of MetaQNN to the annealing schedule of ε? Would alternative exploration strategies (e.g., softmax action selection) improve convergence?
2. Transfer Learning: While the paper shows that architectures discovered on CIFAR-10 transfer well to other tasks, how does the performance compare to architectures specifically optimized for those tasks?
3. State-Action Space Constraints: Some constraints (e.g., limiting fully connected layers to two) are imposed to accelerate convergence. Could these constraints inadvertently exclude potentially high-performing architectures?
In conclusion, the paper presents a well-executed and impactful contribution to automated neural network design. Addressing the suggestions above would further enhance its clarity and applicability.