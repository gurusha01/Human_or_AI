This paper proposes a novel approach to learning geometric invariants of planar curves using a convolutional neural network (CNN) framework. The authors leverage the representational power of CNNs to compute invariant geometric quantities, such as curvature, and demonstrate that their approach outperforms traditional axiomatic constructions in terms of numerical robustness and stability.
I decide to accept this paper, with two key reasons for this choice: (1) the paper tackles a well-motivated and important problem in numerical differential geometry, and (2) the approach is well-supported by experiments and theoretical analysis.
The paper provides a clear and concise introduction to the problem of invariant curve representations and motivates the use of CNNs for this task. The authors provide a thorough review of the relevant literature and demonstrate a good understanding of the underlying geometry and numerical analysis. The proposed approach is well-explained, and the experiments demonstrate the effectiveness of the method in handling noise, sampling, and occlusion.
One potential limitation of the paper is the lack of comparison with other deep learning-based approaches to geometric invariant learning. Additionally, the authors could provide more insight into the interpretability of the learned invariants and their relationship to traditional geometric quantities.
To improve the paper, I suggest that the authors consider the following:
* Provide more details on the architecture of the CNN and the training procedure, including the choice of hyperparameters and the optimization algorithm used.
* Include more experiments to demonstrate the robustness of the approach to different types of transformations and noise levels.
* Discuss the potential applications of the proposed approach to other fields, such as computer vision and robotics.
Some questions I would like the authors to answer to clarify my understanding of the paper include:
* How do the learned invariants relate to traditional geometric quantities, such as curvature and torsion?
* Can the proposed approach be extended to learn invariants for more general types of transformations, such as affine or projective transformations?
* How does the choice of loss function and optimization algorithm affect the performance of the approach?