This paper presents a novel technique called Neuro-Symbolic Program Synthesis (NSPS) that learns to generate programs incrementally based on given input-output examples. The approach is based on two novel neural modules: the cross correlation I/O network and the Recursive-Reverse-Recursive Neural Network (R3NN). The R3NN model encodes partial program trees and expands them into full program trees, conditioned on the input-output examples. The paper demonstrates the effectiveness of NSPS on the domain of regular expression-based string transformations.
I decide to accept this paper with two key reasons: (1) the paper tackles a specific and important problem in program induction, and (2) the approach is well-motivated and supported by experimental results.
The paper supports its claims through a series of experiments that demonstrate the effectiveness of NSPS on various tasks, including input/output generalization and program generalization. The results show that NSPS is able to construct programs for known tasks from new input-output examples and also construct completely new programs that it had not observed during training. The paper also provides a detailed analysis of the performance of different input/output encoders and the effect of sampling multiple programs.
To improve the paper, I suggest that the authors provide more intuition and explanation of the R3NN model and its components, as well as more detailed analysis of the experimental results. Additionally, it would be helpful to see more comparisons with other state-of-the-art methods in program induction and synthesis.
Some questions I would like the authors to answer to clarify my understanding of the paper include: (1) How does the R3NN model handle programs with multiple possible solutions? (2) Can the authors provide more details on the training process and the hyperparameters used? (3) How does the NSPS approach compare to other program synthesis techniques, such as those based on symbolic search or reinforcement learning? 
Overall, the paper presents a significant contribution to the field of program induction and synthesis, and with some revisions to address the above questions and suggestions, it has the potential to be a strong publication.