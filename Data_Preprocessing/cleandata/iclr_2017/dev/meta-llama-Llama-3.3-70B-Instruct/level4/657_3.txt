This manuscript presents a method to significantly reduce the memory requirements of the FastText approach, a linear classifier built on top of bag-of-words embeddings, while maintaining its classification accuracy. The original FastText method, although extremely efficient in terms of training and testing speed, often results in large model sizes. 
The authors' approach involves applying lossy compression techniques to approximate the original method. Specifically, they utilize Product Quantization (PQ) to compress the embeddings and classifier matrices A and B, and implement an aggressive dictionary pruning strategy. Through experiments conducted on diverse datasets, the authors demonstrate the effectiveness of their approach in achieving substantial reductions in model size, with minimal loss in classification accuracy, resulting in model size reductions of up to 100-1000 times compared to the original size.
The paper is generally well-written, with clear objectives and well-executed experiments. The evaluation of different model compression options, such as PQ versus Locality-Sensitive Hashing (LSH), is also noteworthy. However, the manuscript does not introduce novel concepts for text classification, instead focusing on adapting existing lossy compression techniques. The contributions include a straightforward variant of PQ for unnormalized vectors, formulating dictionary pruning as a set covering problem (which is NP-hard) and demonstrating the effectiveness of a greedy approach, as well as the application of hashing tricks and bloom filters borrowed from previous works. These techniques are quite generic and could be applied to other studies.
Some minor issues with the paper include the lack of clarity regarding the computation of the full model size. It would be beneficial to provide a detailed breakdown of the model components, including the proportions of the A and B matrices, dictionary, and other elements, to better understand the size bottleneck. A formula to calculate the total model size as a function of parameters such as k, b for PQ, and K for dictionary, as well as the number of classes, would be helpful.
Additionally, certain sections lack clarity, such as the greedy approach to dictionary pruning, which is described briefly, and the explanation for the overhead introduced by the binary search used in the hashing trick. 
Overall, this study appears to be a solid piece of work, although its research impact may be limited due to its focus on adapting existing techniques rather than introducing new concepts.