Summary
The paper introduces a neural language model with a sparse pointer network to improve code suggestion for dynamic programming languages, specifically Python. The authors release a large-scale code suggestion corpus of 41M lines of Python code crawled from GitHub and demonstrate that their model outperforms standard neural language models and n-gram models in capturing long-range dependencies and predicting identifiers.
Decision
I decide to Accept this paper with two key reasons: (1) the paper tackles a significant problem in code suggestion for dynamic programming languages, and (2) the authors propose a novel and effective approach to capturing long-range dependencies using a sparse pointer network.
Supporting Arguments
The paper is well-motivated, and the authors provide a clear overview of the limitations of current code suggestion systems for dynamic programming languages. The proposed sparse pointer network is a significant contribution, as it efficiently captures long-range dependencies by operating on a filtered view of a memory of previous identifier representations. The experimental results demonstrate the effectiveness of the approach, with a significant improvement in perplexity and accuracy compared to baseline models.
Additional Feedback
To further improve the paper, I suggest that the authors provide more details on the implementation of the sparse pointer network, such as the choice of hyperparameters and the training process. Additionally, it would be interesting to see more qualitative analysis of the model's performance, such as examples of code suggestions and errors. The authors may also consider discussing the potential applications of their approach beyond code suggestion, such as code completion and code generation.
Questions for the Authors
To clarify my understanding of the paper, I would like the authors to answer the following questions:
1. Can you provide more details on the heuristic used to crawl high-quality code repositories from GitHub?
2. How did you choose the hyperparameters for the sparse pointer network, such as the size of the memory and the number of identifier representations?
3. Can you provide more examples of code suggestions and errors to illustrate the model's performance and limitations?