Summary of the Paper's Contributions
The paper proposes a novel neural network architecture, called Shift Aggregate Extract Networks (SAEN), for learning representations of input graphs. SAEN decomposes input graphs into hierarchies of objects and learns vector representations of each object by applying shift, aggregate, and extract operations on the vector representations of its parts. The paper also introduces a domain compression algorithm that exploits symmetries in hierarchical decompositions to reduce memory usage and obtain significant speedups. The authors evaluate SAEN on real-world social network datasets and demonstrate its effectiveness in outperforming the current state of the art.
Decision and Key Reasons
I decide to Accept this paper, with two key reasons: (1) the paper tackles a specific and important problem in graph representation learning, and (2) the proposed approach is well-motivated and supported by empirical evaluations on real-world datasets.
Supporting Arguments
The paper provides a clear and concise introduction to the problem of graph representation learning and motivates the need for a new approach. The proposed SAEN architecture is well-designed and takes into account the hierarchical structure of graphs. The domain compression algorithm is also a significant contribution, as it enables the efficient processing of large graphs. The empirical evaluations demonstrate the effectiveness of SAEN in outperforming the current state of the art on several social network datasets.
Additional Feedback and Questions
To further improve the paper, I suggest that the authors provide more details on the implementation of the SAEN architecture and the domain compression algorithm. Specifically, I would like to know more about the choice of hyperparameters, such as the number of hidden layers and units, and how they were tuned. I also have some questions regarding the scalability of the approach: (1) How does the computational cost of SAEN scale with the size of the input graph? (2) Can the domain compression algorithm be applied to other types of graphs, such as molecular or protein graphs? (3) How does SAEN compare to other graph representation learning methods, such as graph convolutional networks or graph attention networks? Answering these questions would provide more insight into the strengths and limitations of the proposed approach.