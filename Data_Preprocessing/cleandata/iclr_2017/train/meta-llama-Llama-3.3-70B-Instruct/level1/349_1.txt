Summary
This paper introduces QRAQ, a new synthetic domain for training interactive agents to reason and answer questions in a conversational setting. The agent is presented with a short story, a challenge question, and must ask relevant questions to clarify ambiguities and answer the question correctly. The authors propose two reinforcement learning-based memory network architectures, baseRL and impRL, to solve QRAQ problems and evaluate their performance on four datasets with varying complexity.
Decision
I decide to Accept this paper with two key reasons: (1) the paper tackles a specific and well-motivated problem in conversational systems, and (2) the approach is well-placed in the literature, building on existing work on reasoning and dialog systems.
Supporting Arguments
The paper clearly defines the QRAQ domain and its challenges, providing a thorough analysis of the problem and its requirements. The authors also provide a comprehensive review of related work, highlighting the differences between their approach and existing methods. The proposed architectures, baseRL and impRL, are well-described, and the experimental results demonstrate their effectiveness in solving QRAQ problems. The use of reinforcement learning and memory networks is a suitable choice for this problem, and the authors provide a clear explanation of their design decisions.
Additional Feedback
To further improve the paper, I suggest the authors provide more details on the QRAQ simulator and the algorithm used to generate the problems. Additionally, it would be helpful to include more analysis on the performance of the agents on different types of problems, such as those with varying depths or numbers of variables. The authors may also consider providing more insights into the limitations of their approach and potential future directions for research.
Questions for the Authors
To clarify my understanding of the paper, I would like the authors to answer the following questions:
1. Can you provide more details on the QRAQ simulator and the algorithm used to generate the problems?
2. How do the authors plan to address the issue of scalability, as the number of possible problems and variables increases?
3. Can you provide more analysis on the performance of the agents on different types of problems, such as those with varying depths or numbers of variables?