Summary
The paper proposes a novel convolutional neural network (CNN) framework for graph-structured data, which can be applied to standard regression or classification problems by learning the graph structure of the data. The authors introduce a new way to define a convolution over a graph, using a random walk to select relevant nodes, and demonstrate its effectiveness on benchmark datasets such as Merck molecular activity and MNIST.
Decision
I decide to Accept this paper, with the main reason being that the approach is well-motivated and well-placed in the literature. The authors provide a clear and concise overview of the limitations of existing CNN architectures and propose a novel solution that addresses these limitations.
Supporting Arguments
The paper tackles a specific and important problem in the field of machine learning, namely, how to apply CNNs to graph-structured data. The authors provide a thorough review of the literature and clearly motivate their approach. The proposed convolution framework is novel and well-explained, and the authors demonstrate its effectiveness on benchmark datasets. The results are promising, and the authors provide a clear and concise discussion of the implications of their work.
Additional Feedback
To further improve the paper, I suggest that the authors provide more details on the computational complexity of their approach and compare it to existing methods. Additionally, it would be interesting to see more experiments on different types of graph-structured data, such as social networks or traffic networks. The authors may also want to consider discussing the potential applications of their work in more detail, such as in computer vision, natural language processing, or recommender systems.
Questions for the Authors
To clarify my understanding of the paper, I would like the authors to answer the following questions:
1. Can you provide more details on how the random walk is used to select relevant nodes in the graph?
2. How do you handle graphs with varying node degrees and edge weights?
3. Can you provide more insights into the choice of hyperparameters, such as the number of nearest neighbors (p) and the power of Q (k)?
4. How do you plan to extend your work to more complex graph structures, such as graphs with multiple types of nodes and edges?