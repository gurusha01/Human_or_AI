This paper presents a series of design recommendations for differentiable programming languages, derived from the factors that contributed to the success of gradient descent in experimental settings.
Although I am not an expert in program induction, I acknowledge the value of investigating the topic of facilitating program learning, which the paper aims to address. However, I found the paper to be less engaging than expected. The work is heavily based on Terpret, a framework that is not yet publicly available, which may limit its accessibility. Furthermore, the discussion is predominantly focused on the programming language aspects, with less emphasis on the learning aspects. As a result, it may be more suitable for a programming language conference. In my opinion, a comparison with alternative approaches that do not involve code generation would be beneficial in justifying the overall framework.
The strengths of the paper include:
A well-executed and novel study that provides useful insights.
The weaknesses are:
Limited contributions to the learning community, with a stronger focus on domain-specific constraints. I question whether this paper is the best fit for ICLR.