This manuscript presents a novel approach to creating a differentiable interpreter for the Forth programming language, enabling the development of program "sketches" with learnable components based on input-output examples. The core technical contribution lies in transforming an abstract machine for Forth into a differentiable model, leveraging techniques akin to those used in Neural Turing Machines and Stack RNNs. A specialized syntax is introduced for defining holes in program sketches, which specifies data reading and writing patterns, as well as the structural properties of the model filling the hole. The motivation behind this work is to facilitate the composition of program sketches with other differentiable models, such as standard neural networks, although the experiments focus on relatively simple tasks like sorting and addition with limited degrees of freedom for hole filling.
The experimental results demonstrate the feasibility of learning sorting and addition tasks given strong program sketches. The paper's objective is highly ambitious, aiming to render a full programming language differentiable, which is commendable and likely to inspire the ICLR community with its provocative idea.
However, a significant weakness of the paper is the simplicity and lack of baselines in the experiments. It is conceivable that brute-force enumeration of possible hole fillings could yield comparable or better results, which raises questions about the practical benefits of this formulation. The authors' argument that the approach enables composition with neural networks is not entirely convincing, as separate training of the underlying neural network could potentially achieve similar outcomes.
Furthermore, the paper would benefit from a more nuanced discussion of the potential scalability and limitations of the proposed approach. Given the small scale of the experiments and the challenges observed in related work, it is likely that scaling up differentiable Forth to real-world problems will be difficult. An experiment demonstrating a failure case or a more complex problem where the approach does not work would provide valuable insights. The authors should elaborate on the challenges that need to be addressed to make this work practically viable, including failure modes and potential solutions.
In conclusion, while this paper deserves consideration for its provocative ideas, the weakness of the experiments tempers my enthusiasm, and I am hesitant to strongly recommend acceptance.