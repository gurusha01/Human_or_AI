This paper introduces a novel approach to code suggestion for dynamic programming languages, specifically Python, using a neural language model with a sparse pointer network. The authors claim to have made three key contributions: (i) releasing a large-scale code suggestion corpus of 41M lines of Python code, (ii) introducing a sparse attention mechanism that captures long-range dependencies, and (iii) providing a qualitative analysis demonstrating the model's ability to learn such dependencies.
Based on the provided information, I decide to accept this paper. The key reasons for this choice are the paper's well-motivated approach, its thorough evaluation, and the significant improvement in code suggestion accuracy achieved by the proposed sparse pointer network.
The paper is well-motivated, as it addresses a significant problem in code suggestion for dynamic programming languages. The authors provide a clear overview of the limitations of current approaches and demonstrate how their proposed method can capture long-range dependencies more effectively. The evaluation is thorough, with a comprehensive comparison to baseline models and a qualitative analysis that showcases the model's capabilities.
The results presented in the paper are impressive, with a significant improvement in perplexity and accuracy compared to baseline models. The sparse pointer network's ability to capture long-range dependencies is particularly noteworthy, as it achieves a 13 times more accurate prediction of identifiers.
To further improve the paper, I suggest that the authors provide more details on the corpus collection process and the normalization of identifiers. Additionally, it would be helpful to include more examples of the model's output and to discuss potential applications of the proposed approach in integrated development environments (IDEs).
Some questions I would like the authors to answer to clarify my understanding of the paper are: (1) How do the authors plan to scale the approach to entire code projects and collections thereof? (2) What are the potential limitations of the proposed approach, and how do the authors plan to address them? (3) How does the sparse pointer network's performance compare to other state-of-the-art models for code suggestion? 
Overall, the paper presents a significant contribution to the field of code suggestion and has the potential to improve developer productivity. With some additional clarification and discussion of the results, the paper can be even more effective in conveying its key findings and implications.