The paper "End-to-End Differentiable Programming" presents a novel approach to inductive program synthesis, which involves learning programs from input/output examples. The authors propose a range of modeling choices for constructing an end-to-end differentiable programming language, including memory allocation schemes, immutable data, type systems, and built-in control-flow structures. They evaluate these choices through a series of experiments, demonstrating that their proposed language allows for learning more programs than existing baselines.
I decide to accept this paper, with two key reasons for this choice: (1) the paper presents a well-motivated and well-placed approach to inductive program synthesis, and (2) the empirical evaluation provides strong evidence for the effectiveness of the proposed modeling choices.
The paper is well-written, and the authors provide a clear and concise overview of their approach. The background section provides a thorough review of related work in inductive program synthesis and neural networks learning algorithms. The experimental evaluation is comprehensive, covering a range of program induction tasks and comparing the proposed approach to existing baselines.
To further improve the paper, I suggest that the authors provide more details on the implementation of their approach, including the specific architectures and hyperparameters used in the experiments. Additionally, it would be helpful to include more examples of the learned programs, to illustrate the effectiveness of the approach in producing correct and efficient code.
Some questions I would like the authors to answer to clarify my understanding of the paper include: (1) How do the authors plan to extend their approach to support more complex data structures, such as arrays and associative maps? (2) Can the authors provide more details on the computational resources required to train and evaluate their models? (3) How do the authors envision their approach being used in practice, and what are the potential applications of end-to-end differentiable programming languages?
Overall, the paper presents a significant contribution to the field of inductive program synthesis, and I believe that it has the potential to inspire further research in this area. With some minor revisions to address the suggested improvements, I am confident that the paper will be a valuable addition to the conference proceedings.