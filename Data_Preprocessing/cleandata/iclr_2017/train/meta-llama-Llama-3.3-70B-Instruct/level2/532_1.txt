The paper "Neural Data Filter: A Reinforcement Learning Approach to Data Filtration for Stochastic Gradient Descent" proposes a novel framework for automatically and adaptively selecting training data for Stochastic Gradient Descent (SGD) using deep reinforcement learning. The authors introduce Neural Data Filter (NDF), which monitors and supervises the training process of a neural network using a deep reinforcement network, controlling whether to filter some data in sequentially arrived mini-batches to maximize future accumulative reward.
I decide to accept this paper with the following key reasons:
1. The paper tackles a specific and important question in the field of deep learning, namely, how to optimally and dynamically allocate training data at different stages of SGD training.
2. The approach is well-motivated and placed in the literature, drawing on concepts from curriculum learning, self-paced learning, and reinforcement learning.
The paper provides a clear and well-structured presentation of the NDF framework, including the mathematical details of the Markov Decision Process (MDP) formulation and the policy gradient algorithms used to learn the NDF policy. The experiments on IMDB sentiment classification and MNIST image classification demonstrate the effectiveness of NDF in boosting the convergence of SGD training.
To further improve the paper, I suggest the authors provide more insights into the behavior of NDF, such as what data is dropped at different phases of training, and whether the proposed critic function is good enough. Additionally, the authors may consider applying the NDF framework to more tasks and models, such as Convolutional Neural Networks (CNNs) for image classification.
Some questions I would like the authors to answer to clarify my understanding of the paper include:
* How does the NDF framework handle cases where the training data is highly imbalanced or has outliers?
* Can the authors provide more details on the hyperparameter tuning process for the NDF policy network and the reinforcement learning algorithms used?
* How does the NDF framework compare to other data filtration strategies, such as active learning or transfer learning, in terms of performance and computational efficiency?