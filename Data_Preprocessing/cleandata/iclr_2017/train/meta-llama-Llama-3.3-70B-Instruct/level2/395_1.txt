This paper proposes Edward, a Turing-complete probabilistic programming language that defines two compositional representations: random variables and inference. The authors claim that Edward can be as flexible and computationally efficient as traditional deep learning by treating inference as a first-class citizen. The paper demonstrates the flexibility and efficiency of Edward through various examples, including variational auto-encoders, Bayesian neural networks, and stochastic variational inference.
I decide to accept this paper for several reasons. Firstly, the paper tackles a specific question/problem in the field of probabilistic programming, which is to design a language that can balance expressiveness and computational efficiency. Secondly, the approach is well-motivated and well-placed in the literature, building on existing work in probabilistic programming languages and computational graphs. Thirdly, the paper provides a clear and concise explanation of the compositional representations for probabilistic models and inference, and demonstrates the flexibility and efficiency of Edward through various examples.
The supporting arguments for my decision include the fact that the paper provides a comprehensive overview of the related work in probabilistic programming languages, and clearly explains the advantages of Edward over existing languages. The paper also provides a detailed explanation of the compositional representations for probabilistic models and inference, and demonstrates the flexibility and efficiency of Edward through various examples. Additionally, the paper highlights the potential applications of Edward in various fields, including computer vision, natural language processing, and robotics.
However, I do have some additional feedback to help improve the paper. Firstly, it would be helpful to provide more details on the implementation of Edward, including the API and the computational graph framework. Secondly, it would be useful to provide more examples of the applications of Edward in various fields, including computer vision, natural language processing, and robotics. Thirdly, it would be helpful to provide a more detailed comparison of Edward with existing probabilistic programming languages, including Stan, PyMC3, and WebPPL.
Some questions I would like the authors to answer include: How does Edward handle complex control flow and recursion in probabilistic programs? How does Edward scale to large datasets and complex models? How does Edward compare to existing probabilistic programming languages in terms of expressiveness and computational efficiency? What are the potential applications of Edward in various fields, including computer vision, natural language processing, and robotics?