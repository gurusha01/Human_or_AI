This paper explores the use of neural network techniques to automatically learn code completion from a large corpus of dynamically typed JavaScript code. The authors propose several LSTM-based models that leverage both token-level and structural information to predict the next node in a partial abstract syntax tree (AST). The main claims of the paper are that their models can outperform the state-of-the-art approach based on decision tree techniques on both next non-terminal and next terminal prediction tasks.
I decide to accept this paper with the following key reasons: 
1. The paper tackles a specific and well-motivated problem in the field of code completion, which is an essential feature in modern integrated development environments (IDEs).
2. The approach is well-placed in the literature, building upon existing work on probabilistic models for code and leveraging the strengths of deep learning techniques to capture complex patterns in code.
The paper provides a clear and well-structured presentation of the problem, related work, and the proposed approach. The authors evaluate their models on a challenging JavaScript code completion benchmark and demonstrate significant improvements over the state-of-the-art approach. The results show that their models can achieve better prediction accuracy, especially for longer programs, and can allow users to choose from a list of candidates instead of inputting the token manually over 96% of the time.
To further improve the paper, I suggest the authors provide more details on the training process, such as the hyperparameter tuning and the effect of different initialization methods on the model's performance. Additionally, it would be interesting to see a more in-depth analysis of the errors made by the models and how they can be improved.
Some questions I would like the authors to answer to clarify my understanding of the paper are:
* How do the authors plan to handle the issue of rare terminals, which can significantly impact the model's performance?
* Can the authors provide more insights into the trade-off between the overall accuracy and the accuracy on non-UNK terminals when using the adaptive loss function?
* How do the authors envision the integration of their approach with existing code completion engines, and what are the potential challenges and benefits of such integration?