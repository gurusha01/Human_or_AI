Summary
The paper proposes a novel approach to generating image-like containers for steganography applications using Deep Convolutional Generative Adversarial Networks (DCGAN). The authors introduce a Steganographic Generative Adversarial Networks (SGAN) model, which consists of a generator network, a discriminator network, and a steganalyzer network. The SGAN model is trained to produce realistic images that can serve as containers for secure message embedding, while deceiving the steganalyzer. The experimental results demonstrate that the SGAN model can decrease the detection accuracy of a steganalysis method almost to that of a random classifier.
Decision
I decide to reject this paper, with two key reasons for this choice. Firstly, the paper lacks clarity in explaining how the SGAN model is "tuned" to deceive a specific steganalysis algorithm, and the universality of SGAN for generating steganography containers is questionable. Secondly, the paper does not provide a clear workflow for using a trained SGAN, making it difficult to understand how to apply the proposed approach in practice.
Supporting Arguments
The introduction of a non-differentiable black-box function Stego(...) in equation 4 is interesting, but it is unclear whether the authors backpropagate through this function. The use of the same train/test splits for SGAN as for steganalysis purposes may introduce potential biases and sensitivity to random seeds. The experiment in Section 5.3 is unclear, and it is not evident how the SGAN model is tuned to deceive a specific steganalysis algorithm. Additionally, the discriminator D is rarely fooled in contemporary GANs, and creating an additional steganalyzer that combines S* and D may make it more difficult to fool.
Additional Feedback
To improve the paper, the authors should provide a clear explanation of how the SGAN model is tuned to deceive a specific steganalysis algorithm and demonstrate the universality of SGAN for generating steganography containers. The authors should also provide a detailed workflow for using a trained SGAN, including how to embed secret messages and how to use the generated containers. Furthermore, the authors should consider using the same train/test splits for SGAN as for steganalysis purposes to avoid potential biases and sensitivity to random seeds.
Questions for the Authors
1. Can you provide a clear explanation of how the SGAN model is tuned to deceive a specific steganalysis algorithm?
2. How do you ensure the universality of SGAN for generating steganography containers?
3. Can you provide a detailed workflow for using a trained SGAN, including how to embed secret messages and how to use the generated containers?
4. How do you backpropagate through the non-differentiable black-box function Stego(...) in equation 4?
5. Have you considered using the same train/test splits for SGAN as for steganalysis purposes to avoid potential biases and sensitivity to random seeds?