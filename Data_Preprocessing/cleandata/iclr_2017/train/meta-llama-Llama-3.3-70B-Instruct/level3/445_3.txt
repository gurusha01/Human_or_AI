This paper presents a novel approach to incorporating prior procedural knowledge into a neural network by introducing a differentiable interpreter for the Forth programming language. The authors propose a neural implementation of the dual stack machine underlying Forth, allowing programmers to write program sketches with slots that can be filled with behavior trained from program input-output data. The paper demonstrates the effectiveness of this approach on two neural programming tasks, sorting and addition, and shows that the model can learn to generalize to unseen data.
However, I decide to reject this paper for two main reasons. Firstly, the paper lacks new machine learning content and is essentially an extension of earlier work, with no significant changes or contributions to the field. The distinction between "training with an adaptive sampling procedure" and "training in interactive environments" is not clearly made, and comparisons to earlier experiments are not presented. Secondly, the paper attempts to make a hard distinction between reinforcement learning and non-RL conditions, but this distinction is not sharp and can be accommodated in the RL framework.
To improve the paper, I suggest that the authors provide more direct comparisons to the training conditions in the earlier work and evaluate everything in the "online" setting to provide a more informative picture. Additionally, the authors should clarify the relationship between batch size and on-policy algorithms, as the claim that "batch size is related to off-policy learning" is unclear. The experiments on fine-tuning to human workers are the most exciting part of the work and deserve more detailed discussion and exploration.
Some questions I would like the authors to answer to clarify my understanding of the paper include: How do the authors plan to address the issue of the model's inability to generalize to longer sequences than those observed during training? Can the authors provide more details on the implementation of the Forth sketches and the neural Forth words? How do the authors plan to extend this work to more complex tasks and larger programs? 
Overall, while the paper presents an interesting approach to incorporating prior procedural knowledge into a neural network, it lacks significant new contributions to the field and requires more clarification and comparison to earlier work. With additional improvements and clarifications, this work has the potential to make a more significant impact in the field of neural programming.