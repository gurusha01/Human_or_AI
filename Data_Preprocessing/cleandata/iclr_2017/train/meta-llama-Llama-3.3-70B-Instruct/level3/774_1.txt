Summary of the Paper
The paper proposes a novel deep pedestrian detection method based on the Fast R-CNN framework, which utilizes batch normalization to reduce training time and improve generalization performance. The EdgeBoxes algorithm is used to generate high-quality region proposals, improving detection speed and accuracy. The method is evaluated on two benchmark datasets, INRIA and ETH, and achieves satisfactory performance comparable to state-of-the-art methods.
Decision
I decide to reject this paper, with the main reason being that it lacks theoretical insights and quantitative evaluations. While the paper proposes a practical technique for pedestrian detection, it does not provide a thorough analysis of the approach or compare it to other methods in a rigorous manner.
Supporting Arguments
The paper's focus on practical techniques rather than theoretical contributions or comparative evaluations makes it less suitable for an ICLR conference track. Additionally, the paper's evaluation is limited to two datasets, and the results are not thoroughly analyzed or compared to other state-of-the-art methods. The paper could benefit from a more detailed analysis of the approach, including an examination of the effects of batch normalization and EdgeBoxes on detection performance.
Additional Feedback
To improve the paper, the authors could provide a more thorough analysis of the approach, including an examination of the effects of batch normalization and EdgeBoxes on detection performance. Additionally, the authors could compare their method to other state-of-the-art methods in a more rigorous manner, using multiple datasets and evaluation metrics. The authors could also consider providing more details on the implementation of the method, including the specific architecture and hyperparameters used.
Questions for the Authors
To clarify my understanding of the paper, I would like the authors to answer the following questions:
1. Can you provide more details on the implementation of the batch normalization layer and how it affects the detection performance?
2. How do you select the hyperparameters for the EdgeBoxes algorithm, and what is the effect of different hyperparameters on detection performance?
3. Can you provide a more thorough comparison of your method to other state-of-the-art methods, including an analysis of the strengths and weaknesses of each approach?