Summary of the Paper's Contributions
The paper proposes a novel approach to learning programs from input-output examples by adapting features of modern high-level programming languages to the differentiable setting. The authors develop an end-to-end differentiable programming language operating on integers and lists, taking cues from functional programming. They evaluate the effect of four modeling recommendations on learning performance, including automatic memory management, structured control flow, immutable data, and a simple type system. The empirical results show that each of these features improves program learning over existing baselines.
Decision and Reasons
I decide to reject this paper, with two key reasons for this choice. Firstly, while the idea of preserving neighborhood relationships across views for retrieval tasks is interesting, the empirical validation is considered preliminary and needs more work. The experiments are criticized for using very small datasets and not being applied to real tasks, making it hard to draw conclusions about the method's applicability to realistic settings. Secondly, the presentation is criticized for being sloppy, with vague points, confusing wordings, and technical inaccuracies that need to be addressed for clarity and precision.
Supporting Arguments
The paper's contributions are significant, but the empirical evaluation is limited. The authors only evaluate their approach on a selection of program induction tasks, and the results are not comprehensive. Additionally, the comparison to other approaches is limited, and the authors claim that no other information retrieval-based approaches exist, which is disputed. The presentation of the paper is also unclear, with technical inaccuracies and confusing wordings that make it difficult to understand the proposed approach.
Additional Feedback
To improve the paper, the authors should provide more comprehensive empirical evaluations, including larger datasets and more realistic tasks. They should also compare their approach to other existing approaches, including information retrieval-based methods. Additionally, the authors should address the technical inaccuracies and confusing wordings in the presentation, and provide more clarity and precision in their explanations.
Questions for the Authors
1. Can you provide more comprehensive empirical evaluations, including larger datasets and more realistic tasks?
2. How does your approach compare to other existing approaches, including information retrieval-based methods?
3. Can you address the technical inaccuracies and confusing wordings in the presentation, and provide more clarity and precision in your explanations?
4. How do you plan to extend your approach to support more data structures, such as arrays and associative maps?
5. Can you provide more details on how you plan to implement recursion in your end-to-end differentiable language?