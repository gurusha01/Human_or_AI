Summary
The paper proposes a novel deep pedestrian detection method based on the Fast R-CNN framework, incorporating batch normalization and EdgeBoxes algorithm for efficient and effective pedestrian detection. The authors claim that their approach achieves satisfactory performance on two benchmark datasets, INRIA and ETH, and outperforms several state-of-the-art methods.
Decision
I decide to Accept this paper, with the main reason being that the approach is well-motivated and the results are promising. However, I have some concerns regarding the simplicity of the baseline model and the lack of comparison with other region proposal methods.
Supporting Arguments
The paper tackles a specific question of pedestrian detection, which is a challenging task in computer vision. The approach is well-placed in the literature, building upon the Fast R-CNN framework and incorporating batch normalization to improve training efficiency and generalization performance. The use of EdgeBoxes algorithm for region proposal generation is also a good choice, given its speed and accuracy. The experimental results on INRIA and ETH datasets demonstrate the effectiveness of the proposed method, with a significant improvement over some state-of-the-art methods.
Additional Feedback
To further improve the paper, I suggest that the authors consider the following points:
* Compare the performance of the proposed method with other region proposal methods, such as Selective Search, to demonstrate the effectiveness of EdgeBoxes.
* Investigate the impact of using a more complex baseline model, such as a deeper convolutional neural network, on the performance of the proposed method.
* Provide more analysis on the failure cases, such as the performance on low-resolution images, to identify potential areas for improvement.
Questions for the Authors
I would like the authors to clarify the following points:
* How does the proposed method handle occlusions and cluttered scenes, which are common challenges in pedestrian detection?
* Can the authors provide more details on the hyperparameter tuning process, such as the choice of learning rate and batch size?
* How does the proposed method compare to other state-of-the-art methods in terms of computational efficiency and real-time performance?