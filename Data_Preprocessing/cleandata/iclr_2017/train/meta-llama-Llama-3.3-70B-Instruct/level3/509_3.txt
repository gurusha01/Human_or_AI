This paper proposes a differentiable interpreter for the Forth programming language, enabling the creation of program "sketches" that can be filled in based on input-output examples. The technique involves making all operations in the Forth language differentiable, analogous to models like Neural Turing Machine and Stack RNN, and developing special syntax for specifying holes in the program. The paper's ambition to convert a full programming language to be differentiable is admirable, and the idea is provocative and inspiring, with potential applications in composing program sketches with other differentiable models.
The experiments demonstrate that sorting and addition tasks can be learned given strong sketches, but are somewhat trivial and lack baselines, making it unclear what is practically gained from this formulation. A major weakness of the paper is the lack of a nuanced outlook on the limitations and challenges of scaling up differentiable Forth to large real-world problems, with no discussion of failure cases or experiments that demonstrate the approach's limitations.
Based on the conference guidelines, I will answer the three key questions: 
1. The specific question/problem tackled by the paper is how to incorporate prior procedural knowledge into a neural network, and the paper proposes a differentiable interpreter for the Forth programming language as a solution.
2. The approach is well-motivated, as it builds on existing work on differentiable abstract machines and program synthesis, and is well-placed in the literature, with connections to probabilistic programming languages and neural approaches to program synthesis.
3. The paper supports its claims with experiments on sorting and addition tasks, but the results are limited and lack baselines, making it difficult to fully evaluate the effectiveness of the approach.
My decision is to reject the paper, with the main reason being the lack of a nuanced outlook on the limitations and challenges of scaling up differentiable Forth to large real-world problems. The paper's results are also limited and lack baselines, making it difficult to fully evaluate the effectiveness of the approach.
To improve the paper, I would suggest adding more experiments with baselines, discussing the limitations and challenges of scaling up differentiable Forth, and providing more details on the implementation of the differentiable Forth interpreter. I would also like to see more analysis on the learned program sketches and how they relate to the prior procedural knowledge provided.
Some questions I would like the authors to answer are: 
* How do the learned program sketches compare to hand-written Forth programs for the same tasks?
* What are the limitations of the current implementation of the differentiable Forth interpreter, and how do you plan to address them?
* How do you plan to scale up the approach to larger real-world problems, and what are the potential challenges and limitations?
* Can you provide more details on the neural network architecture used to implement the differentiable Forth interpreter, and how it is trained?