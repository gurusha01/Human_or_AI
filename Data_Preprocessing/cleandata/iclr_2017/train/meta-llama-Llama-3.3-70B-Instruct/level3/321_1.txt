Summary
The paper proposes a novel deep neural network architecture, ENet, designed for real-time semantic segmentation on mobile devices. ENet achieves state-of-the-art performance on several benchmarks, including Cityscapes, CamVid, and SUN RGB-D, while requiring significantly fewer parameters and floating-point operations compared to existing models. The authors attribute this efficiency to several design choices, including a compact encoder-decoder architecture, dilated convolutions, and factorized filters.
Decision
I decide to Accept this paper, with two key reasons: (1) the paper tackles a specific and important problem in the field of computer vision, and (2) the approach is well-motivated and supported by experimental results.
Supporting Arguments
The paper clearly addresses the need for efficient semantic segmentation models that can operate in real-time on mobile devices. The authors provide a thorough analysis of the design choices and their impact on performance, including the use of dilated convolutions, factorized filters, and Spatial Dropout. The experimental results demonstrate the effectiveness of ENet on several benchmarks, including Cityscapes, CamVid, and SUN RGB-D.
Additional Feedback
To further improve the paper, I suggest that the authors provide more details on the factorization between Sagent and Srest, particularly the specification of S_rest. Additionally, a more in-depth analysis of the agent's switching behavior, policies, and failure modes would provide a deeper understanding of the results. The authors may also consider providing more context on the current state of semantic segmentation models and their limitations, to better motivate the need for ENet.
Questions for the Authors
To clarify my understanding of the paper, I would like the authors to answer the following questions:
1. Can you provide more details on the design process of ENet, including the intuition behind the compact encoder-decoder architecture and the choice of hyperparameters?
2. How do you plan to address the potential limitations of ENet, such as the increased number of kernel calls and memory operations, in future work?
3. Can you provide more insights into the performance of ENet on other datasets and applications, such as autonomous driving or robotics?