Summary
The paper proposes a novel approach to generating image-like containers for steganography applications using Deep Convolutional Generative Adversarial Networks (DCGAN). The authors introduce a Steganographic Generative Adversarial Networks (SGAN) model, which consists of a generator network, a discriminator network, and a steganalyzer network. The SGAN model is trained to produce realistic images that can serve as containers for secure message embedding, while deceiving the steganalyzer. The experimental results demonstrate that the SGAN model can decrease the detection accuracy of a steganalysis method almost to that of a random classifier.
Decision
I decide to reject this paper, with two key reasons for this choice. Firstly, the experimental comparison is limited, using outdated models and omitting relevant comparisons, such as to the Kim & Bengio 2016 model. Secondly, the analysis on convergence may be flawed due to the use of biased samples from SGLD with a fixed step size.
Supporting Arguments
The paper proposes an interesting approach to generating image-like containers for steganography applications. However, the experimental evaluation is limited, and the comparison to other models is not comprehensive. The use of outdated models and the omission of relevant comparisons make it difficult to assess the effectiveness of the proposed approach. Additionally, the analysis on convergence may be flawed due to the use of biased samples, which could lead to incorrect conclusions.
Additional Feedback
To improve the paper, I suggest that the authors conduct a more comprehensive experimental evaluation, including comparisons to state-of-the-art models. Additionally, the authors should provide more details on the implementation of the SGAN model, including the architecture of the generator and discriminator networks. The authors should also consider using more advanced steganographic algorithms, such as WOW, HUGO, and S-UNIWARD, to test the effectiveness of the proposed approach.
Questions for the Authors
I would like to ask the authors to clarify the following points:
1. How did you select the hyperparameters for the SGAN model, and what is the sensitivity of the results to these hyperparameters?
2. Can you provide more details on the implementation of the steganalyzer network, including the architecture and the training procedure?
3. How do you plan to extend the proposed approach to more advanced steganographic algorithms, and what are the potential challenges and limitations of this extension?