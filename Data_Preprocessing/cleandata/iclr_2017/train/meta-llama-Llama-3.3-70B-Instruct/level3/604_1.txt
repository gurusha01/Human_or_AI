Summary
The paper proposes a novel approach to few-shot learning called prototypical networks, which learns a metric space where classification can be performed by computing Euclidean distances to prototype representations of each class. The authors demonstrate the effectiveness of their approach on the Omniglot and miniImageNet datasets, achieving state-of-the-art results on the former and competitive results on the latter. They also show that their approach can be adapted to zero-shot learning, achieving state-of-the-art results on the Caltech UCSD birds dataset.
Decision
I decide to accept this paper, with the main reason being the simplicity and effectiveness of the proposed approach. The authors provide a clear and well-motivated explanation of their method, and the experimental results demonstrate its competitiveness with state-of-the-art approaches.
Supporting Arguments
The paper is well-structured and easy to follow, with a clear introduction to the problem of few-shot learning and a thorough review of related work. The authors provide a detailed explanation of their approach, including the episodic training procedure and the use of prototype normalization. The experimental results are thorough and well-presented, with a clear comparison to other state-of-the-art approaches.
Additional Feedback
One potential area for improvement is the exploration of more complex prototype representations, such as using multiple prototypes per class or learning a more sophisticated embedding function. Additionally, it would be interesting to see the application of prototypical networks to other domains, such as natural language processing or reinforcement learning.
Questions for the Authors
To clarify my understanding of the paper, I would like to ask the authors the following questions:
* Can you provide more insight into the choice of embedding architecture and the effect of different architectures on the performance of prototypical networks?
* How do you think prototypical networks could be extended to handle more complex tasks, such as few-shot learning with multiple classes or zero-shot learning with multiple attributes?
* Have you considered applying prototypical networks to other domains, and if so, what challenges do you think would need to be addressed?