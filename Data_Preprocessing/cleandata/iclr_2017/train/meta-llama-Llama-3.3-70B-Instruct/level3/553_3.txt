Summary
The paper proposes a multi-view approach to learning acoustic word embeddings, where both acoustic sequences and their corresponding character sequences are jointly embedded into a common space. The authors use deep bidirectional LSTM embedding models and multi-view contrastive losses to learn the embeddings. The approach is evaluated on three tasks: acoustic word discrimination, cross-view word discrimination, and word similarity. The results show that the proposed approach improves over previous methods on acoustic word discrimination and achieves encouraging results on cross-view discrimination and word similarity.
Decision
I decide to reject this paper, with two key reasons for this choice. Firstly, the paper presents simulation results rather than actual hardware implementation, which may not be novel or relevant. Secondly, the paper's comparison of algorithm train/test performance is deemed unnecessary, and I am concerned about the system's ability to handle large numbers of parameters in terms of storage and bandwidth.
Supporting Arguments
The paper's focus on simulation results rather than actual hardware implementation may limit its practicality and relevance to the field. Additionally, the comparison of algorithm train/test performance may not provide significant insights, and the system's ability to handle large numbers of parameters is a crucial aspect that needs to be addressed. The use of a simple neural network may not be sufficient to scale to larger, more complex networks.
Additional Feedback
To improve the paper, the authors could consider implementing their approach on actual hardware and evaluating its performance in a more realistic setting. They could also provide more detailed analysis of the system's ability to handle large numbers of parameters and explore more complex neural network architectures. Furthermore, the authors could consider providing more insights into the comparison of algorithm train/test performance and its significance to the field.
Questions for the Authors
I would like to ask the authors to clarify the following points:
1. How do the authors plan to implement their approach on actual hardware, and what are the potential challenges they anticipate?
2. Can the authors provide more detailed analysis of the system's ability to handle large numbers of parameters, and how do they plan to address this issue?
3. How do the authors think their approach can be scaled to larger, more complex networks, and what are the potential limitations of their current implementation?