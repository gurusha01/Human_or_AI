Review of "Edward: A Turing-Complete Probabilistic Programming Language"
Summary of Contributions
The paper introduces Edward, a Turing-complete probabilistic programming language (PPL) that integrates compositional representations for both probabilistic modeling and inference. The authors argue that Edward bridges the gap between flexibility and computational efficiency in probabilistic programming by treating inference as a first-class citizen, on par with modeling. Edward is built on TensorFlow, enabling significant computational speedups, GPU acceleration, and scalability to large datasets. The paper demonstrates Edward's flexibility by supporting a variety of inference methods (e.g., variational inference, Monte Carlo, and GANs) and its efficiency through benchmarks, showing up to a 35x speedup over Stan and a 6x speedup over PyMC3. The authors also provide examples of Edward's application to tasks like Bayesian neural networks, variational autoencoders, and hierarchical models, showcasing its versatility as a research platform.
Decision: Accept
The paper makes a strong case for acceptance due to its significant contributions to probabilistic programming, particularly in terms of flexibility and computational efficiency. The integration of inference and modeling within a unified framework, along with the demonstrated speedups and scalability, represents a meaningful advance in the field.
Supporting Arguments
1. Well-Defined Problem and Motivation: The paper tackles a clear and important problem in probabilistic programming: the trade-off between expressiveness and computational efficiency. By treating inference as a compositional element, Edward addresses limitations in existing PPLs, such as their reliance on black-box inference engines.
   
2. Placement in Literature: The paper situates Edward well within the context of prior work, including comparisons to existing PPLs like Stan, PyMC3, and WebPPL. The authors highlight how Edward builds on and extends ideas from these systems, such as leveraging computational graphs for efficiency and supporting modern inference techniques like variational autoencoders and GANs.
3. Scientific Rigor: The claims are supported by rigorous experiments, including benchmarks that demonstrate Edward's computational advantages and examples that showcase its flexibility. The integration with TensorFlow is a compelling design choice that aligns with the current trend of leveraging deep learning frameworks for probabilistic modeling.
Suggestions for Improvement
1. Clarity on Limitations: While the paper acknowledges challenges with complex control flow and recursion, it would benefit from a more detailed discussion of these limitations and potential strategies to address them in future work.
   
2. Broader Comparisons: The benchmarks focus on Stan and PyMC3, but additional comparisons to other modern PPLs like WebPPL or Venture would strengthen the evaluation. For instance, how does Edward's flexibility compare to WebPPL's support for amortized inference?
3. Usability and Accessibility: While the paper emphasizes Edward's flexibility, it would be helpful to include a discussion of its learning curve and usability for practitioners who may not have expertise in TensorFlow or probabilistic programming.
4. Reproducibility: The authors mention a companion webpage with runnable code, but providing more explicit details on how to reproduce the experiments (e.g., hardware configurations, dataset preprocessing) would enhance reproducibility.
Questions for the Authors
1. How does Edward handle dynamic computational graphs, particularly in scenarios where the model structure changes during execution?
2. Can you elaborate on the trade-offs between Edward's reliance on TensorFlow and the potential benefits of integrating with other frameworks like PyTorch, which also support dynamic graphs?
3. What are the practical limitations of Edward's scalability? For instance, are there specific types of models or datasets where Edward's performance degrades significantly?
Overall, the paper presents a compelling case for Edward as a flexible and efficient probabilistic programming language. With minor improvements in clarity and additional comparisons, it has the potential to make a significant impact on the field.