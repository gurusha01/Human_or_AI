Review of the Paper
Summary of Contributions
The paper introduces a differentiable physics engine capable of computing analytical gradients for control parameter optimization in robotic systems. The authors claim that this engine, implemented for both CPU and GPU, significantly accelerates optimization processes compared to traditional derivative-free methods. The paper demonstrates the engine's utility in various robotic tasks, including optimizing neural network controllers for robot arms, quadrupedal robots, and inverted pendulums. The authors argue that this approach opens new avenues for applying deep learning in robotics, particularly by enabling gradient-based optimization for complex systems.
Decision: Reject  
While the proposed tool is innovative and potentially valuable for robotics research, the paper falls short in several critical areas. The lack of sufficient implementation details and the absence of open-source code hinder replicability, a cornerstone of scientific research. Additionally, the paper's focus on robotics applications makes it more suitable for specialized robotics conferences like IROS or ICRA rather than ICLR, which emphasizes machine learning contributions.
Supporting Arguments for Decision
1. Replicability Issues: The paper does not provide enough technical details about the implementation of the differentiable physics engine. For example, the authors mention design choices like using rotation matrices over quaternions and limiting branching operations but do not provide sufficient mathematical or algorithmic depth to enable reimplementation. The absence of open-source code further exacerbates this issue, making it difficult for other researchers to validate or build upon the work.
2. Conference Fit: While the paper employs machine learning techniques like backpropagation through time (BPTT) and neural network optimization, its primary contribution lies in advancing robotics simulation and control. This focus aligns more closely with robotics conferences, where the audience would better appreciate the nuances of the proposed engine and its applications.
3. Scientific Rigor: The results presented, though promising, lack comprehensive evaluation. For instance, the authors compare their approach to CMA-ES but do not benchmark against other state-of-the-art gradient-based methods. Additionally, the paper does not address how well the simulated results transfer to real-world robotic systems, a critical aspect of robotics research.
Suggestions for Improvement
1. Provide Implementation Details: Include a detailed description of the engine's architecture, algorithms, and design choices. Supplement this with pseudocode or diagrams to aid understanding.
2. Release Open-Source Code: Sharing the code would enhance the paper's impact and allow the community to replicate and extend the work.
3. Expand Evaluation: Benchmark the engine against other optimization methods beyond CMA-ES. Include experiments that test the transferability of learned controllers to physical robots.
4. Engage with the Robotics Community: Submit the paper to a robotics-focused conference like IROS or ICRA, where the audience would better appreciate the contributions and provide more relevant feedback.
5. Clarify Novelty: The paper acknowledges prior work on differentiable physics engines but does not clearly delineate its unique contributions. A more explicit discussion of how this work advances the state of the art would strengthen the paper.
Questions for the Authors
1. How does the performance of the proposed engine compare to other gradient-based optimization methods, such as those using finite difference approximations?
2. Have you tested the transferability of the optimized controllers to real-world robotic systems? If not, what are the anticipated challenges?
3. Can the engine handle more complex geometries and constraints beyond spheres and ground planes? If so, how would this affect computational efficiency?
4. What are the limitations of using Theano for this implementation, and how might transitioning to a more modern framework (e.g., PyTorch or TensorFlow) improve performance?
In conclusion, while the paper presents an exciting tool for robotics research, its lack of replicability, insufficient evaluation, and misalignment with ICLR's focus necessitate rejection. Addressing these issues and engaging with the robotics community would significantly enhance the work's impact.