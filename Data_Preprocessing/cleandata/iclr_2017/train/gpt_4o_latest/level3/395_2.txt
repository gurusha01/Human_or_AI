The paper introduces Edward, a Turing-complete probabilistic programming language (PPL) designed to bridge the gap between flexibility and computational efficiency in probabilistic modeling and inference. Edward's main contribution lies in its compositional representations for both random variables and inference, enabling users to easily experiment with a variety of inference methods, such as variational inference, Monte Carlo, and generative adversarial networks. By leveraging TensorFlow's computational graph framework, Edward achieves significant speedups compared to existing PPLs like Stan and PyMC3, while maintaining runtime efficiency equivalent to handwritten TensorFlow code. The paper demonstrates Edward's flexibility and efficiency through experiments on tasks like variational autoencoders and Hamiltonian Monte Carlo, showcasing its potential to advance Bayesian machine learning and deep learning research.
Decision: Accept with minor revisions
Key Reasons for Acceptance:
1. Significance and Impact: Edward is poised to significantly influence the fields of Bayesian machine learning and probabilistic programming by offering a flexible and efficient platform for experimentation and development.
2. Technical Contributions: The compositional approach to inference and integration with TensorFlow represents a meaningful advancement over existing PPLs, enabling both scalability and extensibility.
Supporting Arguments:
- Quality: The paper provides a compelling overview of Edward's design and demonstrates its practical benefits through experiments. However, the experimental comparisons with Stan and PyMC3 could be improved by including reproducible code and ensuring fair benchmarking conditions.
- Clarity: The paper is well-written and provides sufficient technical detail to understand Edward's architecture and capabilities. However, the inclusion of a machine-readable companion with runnable code would greatly enhance usability and reproducibility.
- Originality: While Edward introduces novel compositional representations for inference, some of its contributions overlap with prior work by the same group. The authors should clarify these distinctions to better highlight Edward's unique contributions.
Additional Feedback:
1. Reproducibility: The authors should provide runnable code for the experiments, either as part of the supplementary material or through the companion webpage. This would strengthen the paper's scientific rigor and encourage adoption by the community.
2. Claims of Turing-Completeness: The paper's claim of Edward being Turing-complete requires further elaboration and evidence. Specifically, how does this property distinguish Edward from other PPLs like Stan or PyMC3 in practical applications?
3. Comparison with Stan: While Edward's speedup over Stan is impressive, the comparison would benefit from more details about the experimental setup, such as hardware configurations and the use of single vs. double precision. This would ensure the results are interpreted fairly.
4. Distinctions from Prior Work: The authors should explicitly address how Edward builds on and differs from their previous publications, as this would clarify its novelty.
Questions for the Authors:
1. Can you provide more evidence or examples to support the claim of Turing-completeness? How does this property enhance Edward's practical utility compared to other PPLs?
2. How does Edward handle complex control flow and recursion in probabilistic programs, given that these are noted as open challenges in the discussion section?
3. Are there plans to extend Edward to dynamic computational graph frameworks, and if so, how would this impact its performance and usability?
In summary, Edward is a significant contribution to the field of probabilistic programming, offering a flexible and efficient platform for inference and modeling. Addressing the minor issues outlined above would further strengthen the paper and its impact.