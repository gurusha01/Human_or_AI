[Summary]  
This paper introduces a novel approach for knowledge base completion, emphasizing two key contributions: 1) the use of an implicit shared memory that imposes no structural assumptions and is entirely learned during training; and 2) the modeling of a multi-step search process capable of determining its own termination point.  
The experimental results on WN18 and FB15k are promising. Additionally, the authors conduct an analysis on a synthetic shortest path task, demonstrating that their model outperforms standard seq2seq approaches.  
The paper is well-written and easy to understand.  
[Major comments]  
I find the proposed idea compelling and am impressed by the model's strong performance. However, my primary concern is the lack of sufficient analysis regarding how the model functions and its sensitivity to hyper-parameters. The paper primarily focuses on reporting final results for WN18 and FB15k without delving deeper into these aspects.  
One critical hyper-parameter is the size of the shared memory (set to 64 in the experiments). I doubt this fixed size is optimal across all tasks, as it likely depends on the scale of the knowledge base. Could you investigate this in your experiments? Additionally, would it be feasible to design a memory structure with a dynamic size?  
The reinforcement learning (RL) framework, which involves a stochastic search process, is another notable aspect of the paper. However, could you provide evidence of how much this component contributes to the model's performance? I suggest comparing the proposed approach to a variant where the termination gate is removed, and the number of inference steps is fixed. How does the model perform in such a setting? Furthermore, could you analyze how performance varies with the number of inference steps?  
While the shortest path synthetic task is an interesting addition, I believe it would be more impactful if demonstrated in a real knowledge base setting. For example, you could perform the shortest path analysis using entities and relations from a real KB, such as Freebase.  
[Minor comments]  
The output gate depicted in Figure 1 appears somewhat unclear. There should ideally be only one output, contingent on when the search process terminates.