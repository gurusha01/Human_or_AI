- Summary  
This paper introduces a differentiable Neural Physics Engine (NPE), which is composed of an encoder and a decoder function. The NPE processes the states of object pairs (within the neighborhood of a focus object) from two previous time steps in a scene. The encoder captures the interactions between each pair of objects, while the decoder predicts the change in velocity of the focus object at the next time step. The proposed NPE is tested in environments featuring bouncing balls.  
- Novelty  
The concept of a differentiable NPE is innovative. However, a concurrent work by Battaglia et al. (NIPS 2016) presents a closely related model. Similar to this paper, Battaglia et al. propose a model with an encoder (relation-centric) that captures interactions between a focus object and other objects in the scene, and a decoder (relation-centric) that aggregates these interactions to predict their effect on the focus object. A distinguishing aspect of this work is its use of neighborhood-based interactions (based on Euclidean distance) instead of considering the full object interaction graph, as in Battaglia et al. While this is novel, the advantages of this approach over Battaglia et al.'s model are not clearly demonstrated. Additionally, it is unclear how the proposed neighborhood thresholding would perform in scenarios like n-body systems, where long-range forces (e.g., gravitational) are significant.  
- Citations  
The paper includes all relevant citations.  
- Clarity  
The paper is well-written and easy to follow.  
- Experiments  
Compared to this work, Battaglia et al. evaluate their model on a broader range of scenarios (e.g., n-body systems under gravity, falling strings), which better showcase the generalization capabilities of their approach. However, this paper provides more detailed experiments in the context of bouncing balls, such as mass estimation and varying world configurations with obstacles.  
That said, the paper lacks a thorough comparison with Fragkiadaki et al. (2015) in the bouncing balls scenario. While the authors note comparable results between the two works (as mentioned in response to question 4), the experimental setups differ. A direct comparison in a billiard table scenario, similar to Fragkiadaki et al. (2015), where an initial force is applied to a ball, would have been insightful.  
Additionally, the authors only evaluate velocity prediction errors in the bouncing balls scenario. While it is acknowledged that the model predicts only velocity (as clarified in response to question 2), analyzing errors in terms of ground-truth ball positions would provide more meaningful insights. Small velocity errors can compound over time, leading to significant deviations in scene configurations.  
- Conclusion / Recommendation  
The primary concern with this work is the unclear novelty compared to Battaglia et al. (NIPS 2016). A more comprehensive quantitative and qualitative comparison with Battaglia et al. is needed. The authors claim that their work was developed independently, but this does not sufficiently address the overlap.  
Differentiable physics engines like NPE or Battaglia et al.'s model require the generation of large amounts of synthetic data to learn the physics of a given scenario. Furthermore, significant retraining is necessary to adapt to new scenarios (e.g., transitioning from bouncing balls to n-body systems). It is unclear whether such an approach offers practical advantages over writing new code for traditional physics engines.  
In contrast, "bottom-up" approaches like Fragkiadaki et al. (2015) integrate vision with dynamics learning and require fewer input parameters (e.g., position, mass, velocity, world configuration), as these can be estimated approximately from visual data. Such approaches may be more practical for robots performing "common-sense" tasks (e.g., object manipulation). Consequently, the potential applications of differentiable physics engines like NPE remain unclear.