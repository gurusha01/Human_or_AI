This paper introduces a Variational Autoencoder (VAE) model designed to discard irrelevant information, enabling it to learn meaningful global representations of the data. The approach can be interpreted as a lossy compression algorithm, hence the name Variational Lossy Autoencoder. To construct this model, the authors integrate VAEs with neural autoregressive models, resulting in a framework that combines a latent variable structure with a robust recurrence structure.
The authors begin by presenting an insightful Bits-Back interpretation of VAE, which elucidates when and why the latent code is ignored. As noted in prior literature, they observe that the autoregressive component of the model tends to capture all the structure in the data, leaving the latent variables underutilized. To address this, the authors propose two complementary strategies to encourage the decoder to leverage the latent variables. The first strategy involves constraining the autoregressive decoder to use only a small local receptive field, thereby necessitating the use of the latent code to capture long-range dependencies. The second strategy involves parameterizing the prior distribution over the latent code with an autoregressive model.
The paper also reports new state-of-the-art results on binarized MNIST (both dynamic and static binarization), OMNIGLOT, and Caltech-101 Silhouettes datasets.
Review:  
The Bits-Back interpretation of VAE is a valuable contribution to the research community. Providing novel interpretations of a model not only enhances understanding but, as demonstrated in this paper, can also reveal avenues for improvement.
The ability to exercise fine-grained control over the type of information included in the learned representation has significant potential for various applications. For example, in image retrieval tasks, such representations could enable the retrieval of objects with similar shapes, irrespective of their textures.
That said, the authors claim to propose two complementary improvements to VAE: lossy code through explicit information placement (Section 3.1) and learning the prior with autoregressive flow (Section 3.2). However, they do not provide an analysis of how a VAE with a PixelCNN decoder but without an autoregressive flow (AF) prior would perform. What would be the impact on the latent code if the AF prior were omitted?
Additionally, it remains unclear whether WindowAround(i) represents only a subset of x_{...}.