This paper introduces a differentiable interpreter for the Forth programming language. The proposed approach allows for the creation of program "sketches"—programs with incomplete components—where the missing parts can be learned from input-output examples. The core technical contribution involves starting with an abstract machine for the Forth language and transforming all its operations into differentiable counterparts. The method used to achieve differentiability is conceptually similar to techniques employed in models like Neural Turing Machines and Stack RNNs. Additionally, the authors introduce specialized syntax for defining holes in the program, specifying the data access patterns for reading and writing, as well as the general structure of the model that will fill in the holes. The motivation for this work lies in enabling the integration of program sketches with other differentiable models, such as neural networks. However, the experiments primarily focus on relatively simple tasks, such as sorting and addition, with limited flexibility in how the holes are filled.
The experimental results demonstrate that sorting and addition tasks can be successfully learned when provided with strong program sketches.
The paper's ambition is noteworthy: making an entire programming language differentiable is a bold and exciting goal, and I commend the authors for their vision. The idea is thought-provoking and has the potential to inspire further research within the ICLR community.
However, the primary weakness of the paper lies in the simplicity of the experiments and the absence of baseline comparisons. It seems plausible that enumerating possible values to fill in the holes could outperform the proposed approach. If brute-force enumeration is feasible, it raises questions about the practical advantages of this formulation. The authors argue that the differentiable Forth sketches can be composed with neural networks, but if the holes can be filled via brute force, then it might be possible to train the underlying neural network separately to maximize the likelihood of correct input-output behavior for any valid hole filling.
Additionally, the paper lacks a detailed discussion of the broader implications and limitations of the proposed approach. Given the small scale of the experiments and insights from related work, it appears challenging to scale differentiable Forth to more complex, real-world problems. It would be valuable for the authors to provide a more nuanced perspective on the future direction of this research. For instance, including an experiment that highlights a failure case or discussing scenarios where the approach struggles would strengthen the paper. What are the challenges that need to be addressed to scale this method? What failure modes have been observed, and what steps have been taken to overcome them?
In summary, this paper is provocative and deserves consideration for its ambitious vision. However, due to the limited scope of the experiments and the lack of baselines, I am hesitant to strongly recommend acceptance.