The paper asserts that synchronized-SGD, when supported by a number of backup workers, outperforms async-SGD. It begins by analyzing the issue of stale updates in async-SGDs and subsequently proposes sync-SGD with backup workers. The experimental results demonstrate the effectiveness of the proposed approach when applied to Inception Net and PixelCNN.
While the idea is quite simple, it has practical utility in industrial scenarios where the cost of adding backup workers is not a significant concern. However, I find the proposed solution to be relatively straightforward, especially under the assumption that each worker has access to the full dataset and there is sufficient budget to add more workers. In this context, achieving better performance with additional backup workers that mitigate the staggering worker issue seems fairly intuitive. Given this assumption, I question whether the proposed solution addresses a sufficiently challenging problem or introduces a novel enough concept.
Regarding the experiments, I believe a fair comparison requires Async-SGD to incorporate a mechanism to limit updates with excessive staleness, similar to how the proposed method disregards remaining updates after receiving N updates. For instance, one could measure the average time required to obtain N updates in the sync-SGD setting and use that duration as a cutoff threshold for Async-SGD. This adjustment would prevent Async-SGD from performing disproportionately poorly.