The paper "Rectified Factor Networks for Biclustering" proposes a novel approach to biclustering using Rectified Factor Networks (RFNs), which overcomes the limitations of existing methods, particularly FABIA. The authors claim that RFNs can efficiently construct sparse, non-linear, high-dimensional representations of the input data, allowing for the identification of biclusters with thousands of code units. The paper presents extensive experiments on both synthetic and real-world data sets, demonstrating the superiority of RFNs over 13 other biclustering methods, including FABIA.
I decide to accept this paper, with the main reasons being the novelty and significance of the proposed approach, as well as the thorough evaluation and comparison with existing methods. The paper provides a clear and well-motivated introduction to the problem of biclustering, and the authors demonstrate a good understanding of the relevant literature. The experimental results are convincing, showing that RFNs outperform other methods in various scenarios.
The supporting arguments for this decision include the fact that the paper addresses a significant problem in the field of biclustering, and the proposed approach has the potential to become a new state-of-the-art method. The authors provide a detailed description of the RFN model and its advantages over FABIA, including the ability to handle thousands of code units and the introduction of rectified units to the posterior distribution. The experimental evaluation is thorough, covering both synthetic and real-world data sets, and the results are presented in a clear and concise manner.
To further improve the paper, I suggest that the authors provide more details on the computational complexity of the RFN model and its scalability to very large data sets. Additionally, it would be interesting to see more analysis on the interpretability of the biclusters identified by RFNs, and how they can be used in practice. Some questions I would like the authors to answer include: How do the authors plan to extend the RFN model to handle more complex data types, such as images or text? Can the RFN model be used for other tasks, such as clustering or dimensionality reduction? How do the authors plan to make the RFN model more accessible to practitioners, for example, by providing software implementations or tutorials?