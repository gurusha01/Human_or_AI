Summary
The paper introduces Rectified Factor Networks (RFNs) for biclustering, a technique used to analyze large datasets by identifying subsets of samples and features that are similar to each other. RFNs are an extension of the Factor Analysis for Bicluster Acquisition (FABIA) method, which is limited to a small number of code units due to high computational complexity. RFNs overcome this limitation by introducing rectified units to the posterior distribution, allowing for fast computations on GPUs. The authors demonstrate the effectiveness of RFNs on various synthetic and real-world datasets, including gene expression data and the 1000 Genomes Project data.
Decision
I decide to Accept this paper with two key reasons: (1) the paper tackles a specific and important problem in biclustering, and (2) the approach is well-motivated and supported by thorough experiments.
Supporting Arguments
The paper clearly identifies the limitations of existing biclustering methods, particularly FABIA, and proposes a novel solution using RFNs. The authors provide a detailed explanation of the RFN model, its advantages, and its application to biclustering. The experimental results demonstrate the superiority of RFNs over other biclustering methods on various datasets. The paper also provides a thorough comparison with other methods, including FABIA, and discusses the potential of RFNs to become the new state-of-the-art biclustering algorithm.
Additional Feedback
To further improve the paper, I suggest that the authors provide more clarification on the language used, particularly regarding "one shot generation" and the generation of data point dependent vectors z. Additionally, quantifying the performance of "one shot generation" by reporting log p(x | c) or log p(x) for held-out datasets would provide a more comprehensive evaluation of the method. The authors may also consider providing more details on the computational complexity of RFNs and its scalability to larger datasets.
Questions for the Authors
To clarify my understanding of the paper, I would like the authors to answer the following questions:
1. Can you provide more details on the rectification process in RFNs and how it differs from other rectification methods?
2. How do you determine the optimal number of code units in RFNs, and what is the effect of varying this number on the performance of the method?
3. Can you provide more insights into the application of RFNs to the 1000 Genomes Project data and the implications of the results on our understanding of human evolution?