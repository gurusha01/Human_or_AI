This paper presents a parallelized stochastic gradient descent (SGD) method for scenarios where gradients can be computed through linear operations, such as least squares linear regression and polynomial regression problems. The authors' goal is to replicate the effects of sequential SGD using a proposed combiner, which is optimized by employing a randomized projection matrix for dimension reduction. Experimental results indicate that the proposed method achieves better speedups compared to existing methods like Hogwild! and Allreduce.
However, there appears to be a fundamental misconception regarding SGD. The generation of the combiner matrix M can be costly and large. In contrast to sequential SGD, which requires O(f) space and time to update the weight vector w, where f is the number of features, the parallel SGD approach has a space and time complexity of O(f^2) due to M being an f x f matrix. This implies that O(f) processors would be necessary to achieve constant speedups, which is impractical, especially for datasets with thousands or millions of features.
It is noteworthy that updating Mi * v, where v is an f-dimensional vector, does not necessarily require O(f^2) space and complexity. Since Mi is a low-rank matrix of the form (I - ai ai'), the complexity can be reduced to O(f) by computing it as O(v - ai (ai' v)). If M_i is defined as the product of n rank-1 matrices, the complexity and space complexity would be O(fn), with n being significantly smaller than f in the context of this paper. This raises concerns about the validity of the authors' assumptions, experiments, and strategies, which seem to be based on an incorrect assumption about the space and complexity of SGD.
The source of potential speedup in this approach is unclear, as it is uncertain what computations are being parallelized and why the sequential algorithm would yield speedup if M_i*v is computed efficiently. To enhance the clarity and theoretical solidity of this paper, the authors are advised to:
- Provide the computational complexity per step of the proposed algorithm
- Conduct a convergence rate analysis: it is essential to understand how dimension reduction affects complexity, as mere convergence analysis is insufficient.