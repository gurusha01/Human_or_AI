This manuscript presents an algorithm designed to optimize polynomial feature expansion on Compressed Sparse Row (CSR) matrices, achieving a time complexity reduction by a factor of \(d^k\), where \(d\) represents the density of the sparse matrix, compared to the standard approach. However, the significance of this contribution is somewhat diminished. The experimental section lacks comprehensiveness and fails to convincingly support the claims made.
The introduction to the problem's background is inadequate, with the references provided being outdated and limited in number. Only two references are cited in the introduction, and the entire paper references just three works, all of which are from several decades ago. A more thorough review of recent literature, including relevant and contemporary papers, is necessary to contextualize the research properly.
The experimental section is notably weak. The paper asserts that its algorithm achieves a time complexity of \(O(d^k D^k)\), purportedly improving upon the standard method's \(O(D^k)\) by a factor of \(d^k\). Nonetheless, experimental results show a substantial gap (~14s vs. ~90s) between the proposed and standard methods when \(d=1\), which the authors attribute to potential language implementation differences. This explanation is unconvincing, as a fair comparison would necessitate implementing both methods in the same programming language and conducting experiments under identical conditions. Furthermore, for higher-degree feature expansions, the paper lacks empirical evidence to demonstrate the proposed method's advantages.
Several minor issues are also observed:
1. Section 2 lacks a clear definition for the notation "\(pi:pi+1\)".
2. A typo is found in Section 3.1, where "efter" should be corrected to "after".
3. The algorithms presented are not titled, and their inputs and outputs are not clearly specified.
4. Figure 1 does not provide an explanation for the colored areas, leaving unclear whether they represent standard deviations or quantiles of the running time. Additionally, details such as the number of runs for each algorithm used to generate the ribbons and other experimental settings are omitted.