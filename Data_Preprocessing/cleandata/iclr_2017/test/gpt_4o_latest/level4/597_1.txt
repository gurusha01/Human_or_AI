This paper employs the pointer network architecture, wherein an attention mechanism is designed to point to elements within an input sequence, enabling a decoder to output those elements, to address simple combinatorial optimization problems such as the well-known traveling salesman problem (TSP). The network is trained using reinforcement learning via an actor-critic framework, with the actor utilizing the REINFORCE method and the critic estimating the reward baseline within the REINFORCE objective.
The manuscript is well-written and comprehensible. Its integration of reinforcement learning and attention-based models to capture the structure of solution spaces for combinatorial problems of varying sizes appears innovative. Notably, it opens up an intriguing research direction for revisiting classical neural-based approaches to combinatorial optimization problems through modern sequence-to-sequence methodologies. For these reasons, I believe the paper warrants consideration for the conference.
However, I have several comments and significant concerns about the paper:
1) I disagree with the conclusion that the pointer network approach is broadly applicable to general combinatorial optimization problems. The essence of practical combinatorial problems lies in the intricate constraints that define feasible solutions (e.g., extensions of the TSP involving time windows or multiple salesmen). For such problems, it is no longer straightforward to exclude infeasible solutions by merely "striking off" previously visited elements; indeed, even identifying a single feasible solution can be highly challenging. It would be valuable to include a discussion on whether the Neural Combinatorial Optimization approach can scale to these more complex problem classes and, if so, how this might be achieved. My impression is that the proposed approach, in its current form, is primarily suited for assignment problems with relatively simple constraint structures.
2) The operations research community has developed an extensive repository of benchmark problems that are widely used to evaluate solver performance. For example, TSPLIB offers a comprehensive collection of TSP instances.