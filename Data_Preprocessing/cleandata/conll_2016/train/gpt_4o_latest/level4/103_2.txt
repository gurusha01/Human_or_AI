This paper introduces a novel approach for evaluating topic models by clustering the top n words of each topic into groups or "buckets" based on the cosine similarity of their corresponding word embeddings. In its simplest form, the method processes words sequentially, assigning each word to an existing "bucket" if its cosine similarity with the other words in that bucket exceeds a predefined threshold, or creating a new bucket otherwise. Additionally, the authors propose two more advanced variations of the method, incorporating eigenvectors and reorganization techniques. The approach is tested on three standard datasets as well as in a weakly supervised text classification scenario, where it either matches or outperforms the current state-of-the-art method (Röder et al., 2015).
While the core idea of the paper is straightforward, it has an ad hoc quality to it. The authors do not provide a theoretical justification for why topic quality should be assessed based on word–word similarity. This is not immediately intuitive, given that topics and word embeddings are derived from two distinct notions of context (document-level versus sequential context). Nonetheless, the proposed method appears to perform effectively in practice. (I would, however, recommend including significance tests for the results presented in Table 1.)
On the whole, the paper is well-written, though there are some minor language issues. I found the explanation of the techniques in Section 3 somewhat difficult to follow, likely because the authors frequently use the passive voice (e.g., "the threshold is computed as") when describing what are essentially design decisions. I suggest the authors clarify the descriptions of the different methods, perhaps by dedicating a separate subsection to each. There seems to be sufficient space for this, as the authors have not fully utilized the 8-page limit, and the relatively uninformative "trace" of the method on page 3 could be condensed or removed.
One question I had concerns the sensitivity of the proposed method to different word embeddings. For instance, how would the results change if the authors used word2vec instead of GloVe?