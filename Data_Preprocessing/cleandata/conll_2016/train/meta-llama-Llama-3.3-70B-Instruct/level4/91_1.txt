This manuscript explores the application of three straightforward weight-pruning techniques to Neural Machine Translation (NMT), demonstrating that magnitude-based pruning yields the best results and that retraining after pruning can restore the original performance, even with significant pruning.
The primary advantage of this paper lies in its simplicity and the quality of its results, making it easily understandable. The authors have also done an excellent job of covering prior research and presenting their work in a clear manner.
However, a notable limitation of this study is its lack of novelty, as it essentially applies an established technique to a new type of neural network and application, resulting in somewhat predictable outcomes.
The practical implications of these findings are unclear, as exploiting them would require sparse matrix representations, which can be challenging to implement efficiently on GPUs. Given that speed, rather than space, is the primary concern with NMT, it is essential to provide a more compelling explanation for the significance of pruning in this context.
To address this weakness, the authors could utilize the pruning results to inform architectural modifications. For instance, Figure 3 suggests that reducing the number of hidden layers to two and potentially decreasing the dimension of source and target embeddings could be explored.
Another potential approach would be to establish a connection between pruning and retraining with dropout, drawing inspiration from existing research, such as "A Theoretically Grounded Application of Dropout in Recurrent Neural Networks" by Gal (arXiv 2016).
Detailed comments include:
* Line 111: Consider using "output embeddings" instead of "softmax weights" for clarity.
* Section 3.2: The term "dimension" is misleading, and specifying parameter sizes as integer multiples of this number is unnecessary.
* Line 319: Cite Bahdanau et al. for the attention idea, rather than Luong.
* Section 3.3: Class-uniform and class-distribution methods yield similar results; consider removing one to avoid redundancy.
* Figure 3: A hybrid pruning approach, using class-blind for most classes and class-uniform for embeddings, could be explored.
* Figure 4: Include perplexity results for a more comprehensive evaluation.
* Section 4.2 and Figure 6: Specify the pruning method used.
* Figure 7: Clarify whether the loss refers to the training or test corpora.
* Figure 8: The diagram is missing softmax weights and is difficult to interpret; consider providing relevant statistics instead.
* Line 762: Cite Le et al.'s "A Simple Way to Initialize Recurrent Networks of Rectified Linear Units" (arXiv 2015) for additional context.