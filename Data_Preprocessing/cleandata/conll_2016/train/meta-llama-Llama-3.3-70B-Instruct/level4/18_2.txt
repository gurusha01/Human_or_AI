This paper introduces the first comprehensive semantic parsers for UCCA, a specific approach to graph-based semantic representations. Notably, UCCA graphs can include "nonterminal" nodes that do not correspond to words in the input string, distinguishing them from CoNLL semantic dependency graphs. Additionally, UCCA graphs are "grounded," meaning that the text tokens are represented as nodes in the semantic representation, unlike AMRs. The authors propose several parsing methods, including a transition-based parser that directly constructs UCCA parses, and evaluate their performance.
Given the existence of UCCA and UCCA-annotated data, developing a semantic parser for UCCA seems justified. However, the introduction and background section may be perceived as overly advocating for UCCA as the sole graph-based semantic representation formalism worth studying. This stance may not be necessary, as a competent UCCA parser could be a valuable contribution in its own right.
The three criteria for semantic representation formalisms outlined in the introduction are not entirely convincing. For instance, the benefits of "nonterminal nodes" in terms of expressive capacity are unclear. While they may offer a solution to the issue of assigning a head to coordinated structures, it is uncertain what information can only be represented using nonterminal nodes and not, for example, through more informative edge labels. Furthermore, the question of discontinuity is irrelevant in non-"grounded" semantic representations. The advantages of "grounded" representations over AMR-style ones are also not apparent. The term "grounded" has been used to describe various concepts in semantics over the past decade, and it may be beneficial for the authors to adopt a different term, such as "anchored" or "lexicalized." Therefore, the introductory section of the paper could be improved with more careful phrasing and argumentation.
The parser itself appears to be satisfactory, although the details were not thoroughly examined. Nevertheless, the evaluation results are not particularly impressive. On "primary" edges, a basic MaltParser outperforms the BSP parser presented in this work. Moreover, the f-scores on "remote" edges, which a dependency-tree parser like Malt cannot compute directly, are not exceptionally high. The conversion of dependency graphs to dependency trees has been extensively studied under the name "tree approximations" in the context of the CoNLL 2014 and 2015 shared tasks on semantic dependency parsing. Several authors have proposed methods for reconstructing the edges deleted during the graph-to-tree conversion, such as Agic et al. (2015). By incorporating these methods, it is likely that the f-score of the MaltParser (and the LSTM-based MaltParser) could be further improved, which would make the strength of the BSP parser even less clear.