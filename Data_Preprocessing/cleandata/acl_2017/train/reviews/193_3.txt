(the authors response answer most of the clarification questions of my review)
=========================
- Summary:
=========================
The paper describes a transition-based system for UCCA graphs, featuring
non-terminal nodes,  reentrancy and discontinuities. The transition set is a
mix of already proposed transitions
(The key aspects are the swap transition to cope with discontinuities, and
transitions not popping the stack to allow multiple parents for a node.).
The best performance is obtained using as transition classifier a MLP with
features based on bidirectional LSTMs.
The authors compare the obtained performance with other state-of-the art
parsers, using conversion schemes (to bilexical graphs, and to tree
approximations): the parsers are trained on converted data, used to predict
graphs (or trees), and the predicted structures are converted ack to UCCA and
confronted with gold UCCA representations.
=========================
- Strengths:
=========================
The paper presents quite solid work, with state-of-the art transition-based
techniques, and machine learning for parsing techniques.
It is very well written, formal and experimental aspects are described in a
very precise way, and the authors demonstrate a very good knowledge of the
related work, both for parsing techniques and for shallow semantic
representations.
=========================
- Weaknesses:
=========================
Maybe the weakness of the paper is that the originality lies mainly in the
targeted representations (UCCA), not really in the proposed parser.
=========================
- More detailed comments and clarification questions:
=========================
Introduction
Lines 46-49: Note that "discontinuous nodes" could be linked to
non-projectivity in the dependency framework. So maybe rather state that the
difference is with phrase-structure syntax not dependency syntax.
Section 2:
In the UCCA scheme's description, the alternative "a node (or unit) corresponds
to a terminal or to several sub-units" is not very clear. Do you mean something
else than a node is either a terminal or a non terminal? Can't a non terminal
node have one child only (and thus neither be a terminal nor have several
sub-units) ?
Note that "movement, action or state" is not totally appropriate, since there
are processes which are neither movements nor actions (e.g. agentless
transformations).
(the UCCA guidelines use these three terms, but later state the state/process
dichotomy, with processes being an "action, movement or some other relation
that evolves in time").
lines 178-181: Note that the contrast between "John and Mary's trip" and "John
and Mary's children" is not very felicitous. The relational noun "children"
evokes an underlying relation between two participants (the children and
John+Mary), that has to be accounted for in UCCA too.
Section 4:
Concerning the conversion procedures:
- While it is very complete to provide the precise description of the
conversion procedure in the supplementary material, it would ease reading to
describe it informally in the paper (as a variant of the
constituent-to-dependency conversion procedure Ã  la Manning, 95). Also, it
would be interesting to motivate the priority order used to define the head of
an edge.
- How l(u) is chosen in case of several children with same label should be made
explicit (leftmost ?).
- In the converted graphs in figure 4, some edges seem inverted (e.g. the
direction between "John" and "moved" and between "John" and "gave" should be
the same).
- Further, I am confused as to why the upper bound for remote edges in
bilexical approximations is so low. The current description of the conversions
do not allow to get an quick idea of which kind of remote edges cannot be
handled.
Concerning the comparison to other parsers:
It does not seem completely fair to tune the proposed parser, but to use
default settings for the other parsers.
Section 5
Line 595: please better motivate the claim "using better input encoding"
Section 6
I am not convinced by the alledged superiority of representations with
non-terminal nodes. Although it can be considered more elegant not to choose a
head for some constructions, it can be noted that formally co-head labels can
be used in bilexical dependencies to recover the same information.