- Strengths: This paper reports on an interesting project to enable people to
design their own language for interacting with a computer program, in place of
using a programming language. The specific construction that the authors focus
on is the ability for people to make definitions. Very nicely, they can make
recursive definitions to arrive at a very general way of giving a command. The
example showing how the user could generate definitions to create a palm tree
was motivating. The approach using learning of grammars to capture new cases
seems like a good one. 
- Weaknesses: This seems to be an extension of the ACL 2016 paper on a similar
topic. It would be helpful to be more explicit about what is new in this paper
over the old one. 
There was not much comparison with previous work: no related work section. 
The features for learning are interesting but it's not always clear how they
would come into play. For example, it would be good to see an example of how
the social features influenced the outcome. I did not otherwise see how people
work together to create a language. 
- General Discussion: