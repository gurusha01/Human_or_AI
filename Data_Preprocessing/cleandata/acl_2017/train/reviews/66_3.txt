- Strengths:
Tackles a not very explored task, with obvious practical application
Well written and motivated
- Weaknesses:
The only method of validation is a user study, which has several weaknesses.
- Discussion:
The paper investigates various methods to generate memorable mnemonic encodings
of numbers based on the "Major" system. As opposed to other methods that
rely on this system to encode sequences, the methods proposed in this work
return a single sequence (instead of a set of candidates) which is selected to
improve memorability. Since "memorability" is an ambiguous criterion to
optimize for, the authors explore various syntactic approaches that aim for
short and likely sentences.  Their final model uses a POS template sampled form
a set of "nice" structures, and a tri-gram language model to fill in the
slots of the template. 
The proposed approach is well motivated: the section on existing tools places
this approach in the context of previous work on security and memorability. The
authors point to results showing that passwords based on mnemonic phrases offer
the best of both worlds in terms of security (vs random passwords) and
memorability (vs naive passwords). This solid motivation will appease those
readers initially skeptical about the importance/feasibility of such
techniques. 
In terms of the proposed methods, the baselines and n-gram models
(unsurprisingly) generate bad encodings. The results in table 2 show that
indeed Chunk and Sentence produce shorter sentences, but for short digits such
as this one, how relevant are the additional characteristics of these methods
(eg. POS replacements, templates etc)? It seems that a simple n-gram model with
the number-of-digits-per-trigram reweighing could perform well here. 
The evaluation is weaker than the rest of the paper. My main concern is that a
one-time memorization setting seems inadequate to test this framework. Mnemonic
techniques are meant to aid recall after repeated memorization exercises, not
just a single "priming" event. Thus, a more informative setting would have
had the users be reminded of the number and encoding daily over a period of
time, and after a "buffer period", test their recall. This would also more
closely resemble the real-life conditions in which such a technique would be
used (e.g. for password memorization).
In terms of the results, the difference between (long term) recall and
recognition is interesting. Do the authors have some explanation for why in the
former most methods performed similarly, but in the latter "Sentence"
performs better? Could it be that the use of not very likely words (e.g.
"officiate", in the example provided) make the encodings hard to remember but
easy to spot? If this were the case, it would somewhat defeat the purpose of
the approach.
Also, it would be useful for the reader if the paper provided  (e.g. in an
appendix) some examples of the digits/encodings that the users were presented
during the study, to get a better sense of the difficulty of recall and the
quality of the encodings. 
- Suggestions:
It would be nice to provide some background on the Major system for those not
familiar with it, which I suspect might be many in the ACL audience, myself
included. Where does it come from? What's the logic behind those
digit-phoneme maps?