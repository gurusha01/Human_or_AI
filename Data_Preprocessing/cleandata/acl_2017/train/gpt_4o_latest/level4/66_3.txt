- Strengths:  
Addresses a relatively underexplored task with clear practical implications.  
The paper is well-written and effectively motivated.
- Weaknesses:  
Relies solely on a user study for validation, which has several limitations.
- Discussion:  
The paper explores different methods for generating memorable mnemonic encodings of numbers using the "Major" system. Unlike other approaches that produce multiple candidate sequences, the methods proposed in this work aim to generate a single sequence optimized for memorability. Given the subjective nature of "memorability" as a criterion, the authors focus on syntactic strategies to produce short and plausible sentences. Their final model employs a POS template drawn from a set of "preferred" structures and uses a trigram language model to populate the template slots.
The approach is well-motivated, with the section on existing tools situating this work within the broader context of prior research on security and memorability. The authors cite evidence showing that mnemonic-based passwords strike a balance between security (compared to random passwords) and memorability (compared to simple passwords). This strong motivation is likely to address skepticism regarding the significance or feasibility of such techniques.
Regarding the proposed methods, the baseline and n-gram models (predictably) yield poor encodings. The results in Table 2 demonstrate that the "Chunk" and "Sentence" methods produce shorter sentences. However, for short digit sequences like the ones considered here, how critical are the additional features of these methods (e.g., POS replacements, templates)? It seems plausible that a straightforward n-gram model with digit-to-trigram weighting adjustments could perform comparably in this context.
The evaluation is a weaker aspect of the paper. A key concern is that the one-time memorization setup is insufficient for evaluating this framework. Mnemonic techniques are designed to support recall after repeated practice, not just after a single exposure. A more robust evaluation would involve reminding participants of the number and its encoding daily over a period of time, followed by a recall test after a delay. This would better reflect real-world scenarios where such techniques are applied, such as password memorization.
The distinction between (long-term) recall and recognition in the results is intriguing. Why do most methods perform similarly in recall, while the "Sentence" method outperforms others in recognition? Could this be due to the use of less common words (e.g., "officiate" in the provided example), which might make the encodings harder to recall but easier to recognize? If so, this could undermine the intended purpose of the approach.
Additionally, it would be helpful for the paper to include examples of the digit sequences and their corresponding encodings used in the user study (e.g., in an appendix). This would give readers a clearer sense of the recall difficulty and the quality of the generated encodings.
- Suggestions:  
Providing some background on the Major system would benefit readers unfamiliar with it, which likely includes a significant portion of the ACL audience (myself included). Where does the system originate? What is the rationale behind the digit-to-phoneme mappings?