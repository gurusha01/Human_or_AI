- Strengths: This paper presents an intriguing project aimed at empowering users to design their own custom language for interacting with a computer program, as an alternative to traditional programming languages. The authors specifically emphasize the ability for users to create definitions, including recursive definitions, which provides a highly flexible and general method for issuing commands. The example illustrating how users could define concepts to generate a palm tree was compelling and engaging. The proposed approach, which leverages grammar learning to accommodate new cases, appears to be a promising direction.
- Weaknesses: The work seems to build upon the authors' ACL 2016 paper on a related topic. It would be beneficial if the authors explicitly clarified the novel contributions of this paper compared to the prior work.
Additionally, the paper lacks a related work section, offering limited comparison with previous research in this area.
While the features for learning are intriguing, their practical application is not always clear. For instance, it would be helpful to include an example demonstrating how the social features influenced the results. Furthermore, the paper does not provide sufficient insight into how users collaborate to develop a shared language.
- General Discussion: