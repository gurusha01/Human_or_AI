This paper presents a compelling project that allows users to create their own language for interacting with a computer program, offering an alternative to traditional programming languages. A key aspect of this work is the ability for users to create definitions, including recursive ones, which enables a highly generalizable method for issuing commands. The example illustrating how a user can generate definitions to create a palm tree is particularly motivating. The approach leverages grammar learning to accommodate new cases, which appears to be an effective strategy.
However, the paper seems to build upon a previous work presented at ACL 2016, and it would be beneficial to clearly articulate the novel contributions of this paper in relation to its predecessor. A notable omission is the lack of a related work section, which would provide a comprehensive comparison with existing research in the field.
While the features for learning are intriguing, their application and impact are not always transparent. For instance, an example demonstrating how social features influence the outcome would be enlightening. Furthermore, the paper does not adequately illustrate how collaborative language creation among users functions, leaving a significant aspect of the project unexplored.