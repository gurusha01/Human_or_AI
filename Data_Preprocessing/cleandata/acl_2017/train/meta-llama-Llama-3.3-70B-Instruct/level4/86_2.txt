This manuscript proposes a novel approach to translating natural language descriptions into source code by leveraging a model that adheres to the grammatical constraints of the target programming language. The paper is well-structured, tackles a challenging and intriguing problem by utilizing inherent constraints, and demonstrates substantial performance enhancements.
The paper's strengths include:
- Investigating a fascinating and crucial problem domain.
- Effectively incorporating output space constraints into the model.
- Conducting thorough evaluations and comparisons, while also analyzing the impact of various model aspects on performance.
- The manuscript is clearly and concisely written.
However, there are some weaknesses:
- The primary concern is the choice of evaluation metrics. Although accuracy and BLEU4 are straightforward to calculate, they may not provide a comprehensive picture of the model's performance. Accuracy can overlook correctly generated code due to minor, functionally insignificant changes, potentially resulting in 0% accuracy despite 100% functional correctness. Furthermore, BLEU's token-level n-gram evaluation may not be suitable for code evaluation, particularly when significant changes (e.g., tree transformations of the AST) do not affect functionality. Consider applying BLEU to normalized ASTs of reference and generated code or, ideally, assessing functional equivalence between reference and generated code, even if only for a small, random subsample of the datasets.
Minor issues include:
- On page 2, paragraph 2, the term "network" is used; it is assumed that this refers to the AST.
- In Section 4.2.1, regarding Action Embedding, it is unclear whether the action embedding vectors in WR and WG are one-hot vectors or non-trivial embeddings. If the latter, how are they computed? If not, what distinguishes the vectors of W_R and e(r) in equation 4?
- In Section 5.2, concerning Preprocessing, replacing quoted strings in descriptions for the DJANGO dataset may lead to issues when these strings need to be copied into the generated code. Additionally, filtering out infrequent words may cause problems when these words describe variable names or literals that must be included in the code.
The author response has been reviewed.