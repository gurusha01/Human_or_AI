Summary of the Paper
The paper introduces UDEPLAMBDA, a semantic interface for Universal Dependencies (UD) that maps natural language to logical forms in an almost language-independent manner. The framework is based on DEPLAMBDA, a method that converts English Stanford Dependencies to logical forms, but extends it to work with UD, which provides a cross-linguistically uniform syntactic representation. The authors evaluate UDEPLAMBDA on semantic parsing for question answering against Freebase in three languages: English, Spanish, and German.
Main Contributions
1. UDEPLAMBDA: A semantic interface for Universal Dependencies that maps natural language to logical forms in an almost language-independent manner.
2. Multilingual Evaluation: The authors provide translations of benchmark datasets (WebQuestions and GraphQuestions) to German and Spanish, and evaluate UDEPLAMBDA on these datasets.
3. State-of-the-Art Results: UDEPLAMBDA achieves state-of-the-art results on GraphQuestions and competitive results on WebQuestions.
Strengths
1. Language Independence: UDEPLAMBDA can be applied to multiple languages without requiring language-specific knowledge.
2. Scalability: The framework can be used for large-scale semantic parsing tasks.
3. Interpretability: The logical forms generated by UDEPLAMBDA provide a clear and interpretable representation of the input sentence.
Weaknesses
1. Limited Semantic Specificity: UDEPLAMBDA sacrifices some semantic specificity to achieve language independence.
2. Dependence on UD: The framework relies on the quality of the UD annotations, which may not always be accurate.
3. Limited Handling of Quantifiers and Negation: UDEPLAMBDA does not currently handle quantifiers and negation markers, which may limit its applicability to certain tasks.
Questions to Authors
1. How do the authors plan to address the limited semantic specificity of UDEPLAMBDA?
2. Can the authors provide more details on the entity resolution algorithm used in the experiments?
3. How do the authors plan to extend UDEPLAMBDA to handle quantifiers and negation markers?