Summary of the Paper
The paper proposes a type-based approach, named SynTime, to recognize time expressions from free text. The authors analyze time expressions from four datasets and make four observations: time expressions are short, use a small vocabulary, contain at least one time token, and demonstrate similar syntactic behavior. Based on these observations, SynTime defines syntactic types for tokens and designs simple heuristic rules to recognize time expressions. The approach is evaluated on three datasets and outperforms state-of-the-art baselines.
Main Contributions
1. The authors analyze time expressions from four datasets and make four observations that provide evidence for the principle of least effort in time expression.
2. SynTime, a type-based time expression tagger, is proposed, which defines syntactic types for tokens and designs simple heuristic rules to recognize time expressions.
3. The approach is evaluated on three datasets and outperforms state-of-the-art baselines, including rule-based time taggers and machine learning-based time taggers.
Strengths
1. The paper provides a thorough analysis of time expressions from four datasets, which leads to a deeper understanding of the characteristics of time expressions.
2. SynTime is a simple and efficient approach that outperforms state-of-the-art baselines, making it a promising solution for time expression recognition.
3. The approach is flexible and can be easily expanded to recognize time expressions in text from different types and domains.
Weaknesses
1. The paper assumes that words are tokenized and POS tagged correctly, which may not always be the case in reality.
2. The approach may not perform well on time expressions that are not covered by the defined syntactic types or rules.
3. The evaluation is limited to three datasets, and it would be beneficial to evaluate the approach on more datasets to demonstrate its generalizability.
Questions to Authors
1. How do the authors plan to address the issue of incorrect tokenization and POS tagging, which can affect the performance of SynTime?
2. Can the authors provide more details on how SynTime can be expanded to recognize time expressions in text from different types and domains?
3. Are there any plans to evaluate SynTime on more datasets or to compare it with other state-of-the-art approaches in the field?