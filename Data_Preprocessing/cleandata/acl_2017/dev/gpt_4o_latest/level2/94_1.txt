Review of the Paper
Summary and Contributions
This paper introduces a fully non-monotonic transition system for the non-projective Covington dependency parser, along with a novel dynamic oracle for training. The key contributions of the paper are:
1. Full Non-Monotonicity: Unlike prior work that restricted non-monotonicity to specific cases, this system allows the repair of erroneous attachments in both directions (leftward and rightward arcs) without relying on monotonic decisions. This is a significant departure from previous approaches (e.g., Honnibal et al., 2013), which were limited to projective trees and partial non-monotonicity.
   
2. Approximate Dynamic Oracle: The authors propose an approximate dynamic oracle based on efficiently computable bounds of the loss. This innovation addresses the computational challenges of exact loss calculation in non-monotonic and non-projective scenarios.
3. Empirical Validation: The proposed system is evaluated on CoNLL-X and CoNLL-XI datasets, demonstrating consistent improvements in parsing accuracy (UAS and LAS) over the monotonic oracle for most languages, with statistically significant gains in 14 out of 19 datasets.
Strengths
1. Novelty: The paper is the first to implement full non-monotonicity for a non-projective parser, which is a meaningful extension of the Covington algorithm. This innovation addresses limitations of prior work and expands the applicability of non-monotonic systems to non-projective dependency parsing.
2. Practical Feasibility: The introduction of approximate loss bounds (lower and upper) is a practical solution to the computational infeasibility of exact loss calculation. The empirical results show that these approximations are tight and effective, with less than 1% relative error in most cases.
3. Comprehensive Evaluation: The authors conduct experiments across 19 languages, providing robust evidence for the effectiveness of the proposed system. The results demonstrate clear improvements over both static and monotonic dynamic oracles, particularly with the best-performing loss expression.
4. Efficiency: The lower-bound loss expression not only achieves competitive accuracy but also makes the non-monotonic system faster than the monotonic oracle, which is a notable strength for real-world applications.
Weaknesses
1. Limited Theoretical Analysis of Loss Approximations: While the empirical results validate the effectiveness of the loss bounds, the paper lacks a deeper theoretical analysis of why the upper bound |U(c, tG)| + nc(A ∪ I(c, tG)) outperforms the closer approximation |U(c, tG)| + npc(A ∪ I(c, tG)) in practice. This could provide additional insights into the behavior of the non-monotonic oracle.
2. Unexplained Performance Drop in Basque: The non-monotonic system underperforms in Basque compared to the monotonic oracle, but the paper does not provide an explanation for this anomaly. A detailed error analysis could strengthen the paper's conclusions.
3. Lack of Neural Integration: While the authors mention the potential applicability of their oracle in neural network-based parsers, no experiments are conducted in this context. This limits the paper's relevance to modern NLP systems, where neural models dominate.
4. Complexity of Cycle Handling: The proposed method for handling cycles in non-monotonic scenarios is computationally expensive (O((n + e)(c + 1))). While this is mitigated by the use of the lower-bound loss expression, the scalability of the system for very large datasets or sentences remains unclear.
Questions to Authors
1. Can you provide more insights into why the upper bound |U(c, tG)| + nc(A ∪ I(c, tG)) achieves better results than the closer approximation |U(c, tG)| + npc(A ∪ I(c, tG))?
2. Have you considered applying your non-monotonic oracle to neural parsers? If so, what challenges do you anticipate in integrating it with neural architectures?
3. Could you elaborate on why the non-monotonic system underperforms in Basque? Is this due to language-specific characteristics or limitations of the proposed approach?
Recommendation
Accept with Minor Revisions. The paper makes a significant contribution to dependency parsing by introducing full non-monotonicity and a practical dynamic oracle for non-projective parsers. While there are some areas for improvement, particularly in theoretical analysis and neural integration, the strengths of the work outweigh its limitations. This paper is likely to inspire further research in non-monotonic parsing and dynamic oracle design.