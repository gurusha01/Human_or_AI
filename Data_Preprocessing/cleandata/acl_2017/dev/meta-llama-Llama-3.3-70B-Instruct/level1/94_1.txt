This paper proposes a novel, fully non-monotonic transition system based on the non-projective Covington algorithm for dependency parsing. The main contributions of this work are:
1. Non-monotonic transition system: The authors propose a non-monotonic variant of the Covington parser, which allows for the correction of previous errors by assigning new heads to nodes, while still enforcing the single-head and acyclicity constraints.
2. Approximate dynamic oracle: The authors develop an approximate dynamic oracle that uses efficiently-computable approximations of the loss, which is necessary due to the complexity of calculating the actual loss in a non-monotonic and non-projective scenario.
3. Experimental evaluation: The authors evaluate their approach on 19 datasets from the CoNLL-X and CoNLL-XI shared tasks, showing that the non-monotonic dynamic oracle outperforms the monotonic version in the majority of languages.
The strengths of this paper are:
1. Novel approach: The proposed non-monotonic transition system and approximate dynamic oracle are novel contributions to the field of dependency parsing.
2. Theoretical foundations: The authors provide a thorough analysis of the non-monotonic transition system and the approximate dynamic oracle, including proofs and algorithms.
3. Experimental evaluation: The authors conduct a thorough experimental evaluation of their approach, including a comparison with the monotonic version and a static oracle.
4. Improvements over state-of-the-art: The non-monotonic dynamic oracle achieves better performance than the monotonic version and the static oracle in the majority of languages.
The weaknesses of this paper are:
1. Complexity: The non-monotonic transition system and approximate dynamic oracle may be complex to implement and understand, which could limit their adoption.
2. Computational efficiency: The calculation of the approximate loss bounds may be computationally expensive, which could impact the efficiency of the parser.
3. Limited analysis of errors: The authors do not provide a detailed analysis of the errors made by the non-monotonic dynamic oracle, which could help to identify areas for improvement.
Questions to authors:
1. How do the authors plan to address the complexity of the non-monotonic transition system and approximate dynamic oracle, to make them more accessible to a wider audience?
2. Can the authors provide more details on the computational efficiency of the approximate loss bounds calculation, and how it impacts the overall efficiency of the parser?
3. How do the authors plan to analyze and improve the errors made by the non-monotonic dynamic oracle, to further improve its performance?