SAGA is a new incremental gradient technique. Purely in terms of performance, its salient features are that on strongly convex problems, it is provably faster than SAG and SVRG, and almost as fast as SDCA. The main advantage over SDCA is that the algorithm works without modification in the absence of strong convexity. "Without modification" here means without needing to explicitly add a regularizer to make the problem strongly convex. SAGA does seem to need to explicitly know the Lipschitz and strong convexity constants, in order to obtain linear convergence. Indeed, as discussed below, another advantage of SAGA is that it need only tune one step-size parameter (what is labelled \eta in the paper). It would be interesting to know how this is computed in practice when the values are not explicitly known.
Section 3 provides not only an explanation of SAGA, but also a nice summary of a few other popular methods. This is valuable to the paper, since many variants of these methods have been in use for some time, and understanding them better in a unified and compared setting is quite useful. For example, the discussion on SDCA is quite interesting. By a transformation of the formulation, the authors are able to show a much more clear connection to other primal based methods (in particular, MISOmu).
SAGA is an improvement over these methods because of better analysis (e.g., SAG), ability to deal with prox operators, fewer parameters that must be carefully tuned (e.g., compared to SVRG), and ability to deal with absence of strong convexity automatically.
Given that the ability to handle non-strongly convex composite functions automatically is a key selling point, the main point of the paper would be strengthened if the authors could explain, or even just show more clearly in computation, that adding a regularizer with a small constant and then using, e.g., SDCA, does not result in a better solution technique.
The paper seems well written. I only found errors on line 121 (effect should be affect) and then in 298, it seems a \mu turned into an s.
 The paper is well written and the more unified exposition of several incremental gradient methods is in itself useful. The paper would be strengthened with a more clear differentiation from other algorithms -- how hard is it to tune two parameters instead of one? how much better is this algorithm in the absence of strong convexity, compared to others that require a regularizer?