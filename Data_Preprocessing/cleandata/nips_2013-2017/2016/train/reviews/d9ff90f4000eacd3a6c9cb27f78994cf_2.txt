The authors define a notion called "Givens capacity" which measures the complexity of a unitary matrix. They bound the Givens capacity of a parametrized class of unitary matrices proposed in previous work. From here they claim that this means that the parametrization only covers a proper subset of unitary matrices. They present an alternative method for working within the full set of unitary matrices and show that on some examples it improves over the parametrized method. The experimental portion of the paper seems more valuable than the theoretical portion, but also has some serious issues. First, the original reason the paramatrization (3) was proposed was to limit the number of parameters to trade off between representation power and computation time. The present paper proposes a method that not only uses many more parameters, but apparently requires matrix inversion to compute. The only discussion of computation time is in lines 178 - 181, in which the authors claim that the matrix inversion is faster. This would seem to point to a problem with the Theano implementation, since the matrix inversion method should take time O(N^3) and the reduced-capacity method should take time O(N log N) with small constants, meaning that the latter should be significantly faster. Second, there is no apples-to-apples comparison of the methods -- some are trained using RMSprop, some are trained using SGD, and no argument is given for why. The authors then draw conclusions without considering any of these confounding factors. Maybe the observed differences are only due to the choice of optimization method? I am not asserting that this is the case, but the authors have not ruled it out. A minor point: the authors introduce Stiefel manifolds for seemingly no reason. The only one they consider is the square matrix case which is the same as unitary matrices. It seems that they do this because they would like to apply a method from a paper which considers the more general Stiefel manifolds, but since that level of generality is not needed here, there seems to be no reason to introduce it.