Recently, randomized sampling and sketching methods have been popularly used in solving large scale overdetermined least squares regression problems. The paper proposes a leverage scores based sampling method for the alternating least squares minimization problems that appear as intermediate steps during the computation of low rank tensor CANDECOMP/PARAFAC (CP) decomposition. Tensor CP decomposition involves representing the tensor as sum of rank-1 tensors, and these rank-1 tensors can be represented as low rank factor matrices. The low rank factor matrices can be computed using the Alternating least squares (ALS) approach, which involves solving LS problems with the tensor matricization and the Khatri-Rao product (KRP) of the remaining factor matrices. The paper proposes leverage scores based sampling of the matricization and the KRP prior to solving the least squares regression problem. The key contribution of the paper (according to me) is in computing the leverage scores of the rows of the KRPs. Paper proposes to replace the leverage scores of the KRP (which are expensive to compute) by an upper bound, which is shown to be the product of the scores of the constituting matrices. Experiment results illustrating the speed up of their algorithm are also provided. The paper proposes a fast method for estimating the alternating least squares that appear during the computation of tensor CP decomposition, based on leverage scores sampling. The speed up in the computational time demonstrated in the experiments is impressive. However, I have certain concerns. Following are my questions, concerns and suggestions regarding the paper. Regarding the theory: 1. The paper somehow does not justify why leverage based sampling is proposed instead of other randomized sampling/sketching approaches, which do not require the computation of leverage scores. From the theoretical results point of view, according to Theorem 4.1 of the paper, the number of samples required for the proposed method is m=\Theta(R^2\log n/\epsilon^2), which seems to be worse than the number of samples required by the other randomized sampling methods (which do not require leverage scores computation) such as the one proposed in reference [15] (Drineas et. al, 2011) based on SRHT (subsampled Hadamard transforms), or the ones discussed in (Woodruff,2014) monograph, where their sampling complexities seem to be m=\Theta(R\log(n)/\epsilon^2). The advantages of the proposed method over other sampling methods must be discussed. 2. In Theorem 4.1, the number of samples is set to be m=\Theta(R^2\log n/\epsilon^2). How was this computed? There seems to be no proof for this neither in the main paper nor in the Appendix. 3. What are matrices C and D in Lemma E.2 and Corollary E.3? How does sampling come into picture? I suppose C=AS^T and D=SB, where S is the sampling matrix. This must to be mentioned. 4. I am unable to see how the quantity \rho(x_B) in Lemma E.1 is equivalent to \|\mathcal{T} - [A,B,C]\|^2 in Theorem 4.1. Please provide this connection in the proof. 5. The runtime of each iteration of the algorithm is claimed to be \tilde{O}(nR^3). Please provided details regarding this, (this is totally missing). Style and presentation: 6. Notation used is highly inconsistent. Both 'r' and 'R' are used for the size of the factor matrices. Lines 124,181,210,268, 'r' is used and elsewhere 'R' is used. Similarly, the size of the design matrix X (which should be R, same as A and B). In line 121, 'p' is used! Elsewhere 'r' is used. 7. Please mention what \tilde{O} time complexity is. This might not be a common knowledge. 8. Incomplete or missing statements: i) line 46, "of be" - something is missing ii) line 164 "i-th of" and line 165 something is missing. iii) line 444, lemma E1, U is not defined. iv) lemma E.2 and E.3, C and D are not defined. 9. Minor typos: i) line 5, the the. ii) line 52, SPASL iii) line 108, a challenging tasks, iv) line 185, an rank v) line 202, second term is spare, and the the