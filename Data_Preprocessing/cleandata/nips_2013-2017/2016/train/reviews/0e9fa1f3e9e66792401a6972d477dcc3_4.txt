This paper presents a method--termed AutoBDMC--for assessing MCMC convergence. The method uses the recently-developed Bidirectional Monte Carlo method to compute stochastic upper and lower bounds for the log marginal likelihood (this relies on annealed importance sampling). The authors show that the gap between the upper and lower bounds is itself a bound on the Jensen-Shannon divergence between the true posterior and the distribution of approximate samples, thus providing a single scalar quantity to assess MCMC convergence behavior. Since the method can only analyze convergence on synthetic data generated from the joint distribution, the authors provide experimental evidence that its analyses on such synthetic data is predictive of behavior on real world data. They also demonstrate uses of their method for model selection and debugging purposes. Overall, I found this paper quite readable and well-motivated. The presented method seems clearly useful, and the experimental evaluation is reasonably compelling. I found all of Section 3 harder to follow than the rest of the paper. The transition into 3.1 is especially jarring, as it launches into variable and equation definitions without motivating them. If the divergence bound in Section 3.1 is a new result (which I believe it is), then this should be made explicit, as the novelty/contribution of the paper seems to hinge on this. What, precisely, is AutoBDMC? This is never explicitly stated anywhere in the paper. In my understanding, it seems like AutoBDMC is the approach of using AIS and rAIS to analyze MCMC convergence. I would expect to see a statement to that effect. By the time Section 3.2 states that "â€¦this poses a challenge for AutoBDMC," AutoBDMC should be clearly defined. Some other minutiae: Line 149: Should p(theta, z | y) be p(theta, z, y)? Notational inconsistencies: the paper switches between using y and D to denote data/observations, which I found a bit confusing at times. WebPPL code in supplemental: Should be accompanied by (a) which version(s) of WebPPL this is known to work with, and (b) how to integrate into the WebPPL distribution in order to be used. Or even better, release this as a WebPPL package that can be installed via npm. If possible, a similar release for the Stan version of the code would also be much appreciated.