The authors propose a framework for semi-supervised active clustering framework whereby the learner is given oracle access to the domain expert via same-cluster queries. If the expert has decided on a k-center based solution with a certain separability, the authors propose an efficient probabilistic polynomial-time algorithm to recover the optimal clustering. The authors show that there are separable instances where the k-means clustering is NP-hard, but can be efficiently solved given access to a relatively small number of same-cluster queries. Interestingly, the query complexity is not too far away from the lower bound provided by the authors. This paper is very well written, clearly motivated and provides substantial theoretical insight into a difficult problem. I enjoyed reading it. I particularly liked the phase transition behaviour of the k-means objective with respect to the instance niceness. The fact that a relatively small number of same-cluster queries can be used to efficiently solve an otherwise NP-hard problem is encouraging. It would be great if you could address the following comments: 1. It is assumed that the oracle is perfect: A more realistic oracle would be allowed to make mistakes. It's critical to understand what kind of assumptions on the oracle are necessary for the problem to remain efficiently solvable. 2. How much does one gain in practice? Assume that the data is generated by some probabilistic model and satisfies the required separation condition. It would be interesting to compare the time-quality tradeoff obtained by some k-Means approximation (say k-means++) and the proposed algorithm. In practice, it may be the case that k-means++ works extremely well given the same separability assumption. 3. It is assumed that the expert conforms to a hard center-based clustering. Do any of the results translate to the setting in which the goal is to recover a GMM and the oracle returns a probabilistic assignment to each cluster? Clearly, given enough separation and some assumptions on the covariance matrices, the problems become very similar. Minor comment: Theorem 7, "clustering instane" should be "clustering instance".