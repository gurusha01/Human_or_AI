The paper establishes intriguing and innovative connections between arithmetic circuits (ACs) and probabilistic sentential decision diagrams (PSDDs), presenting a groundbreaking approach to directly compile ACs for graphical models through the multiplication of PSDDs corresponding to the graphical model's factors. The comparisons of compilation sizes and times between this PSDD-based method and existing compilers further highlight the advantages of this novel, significantly simplified approach to AC construction. The paper is exceptionally well-written and, in my opinion, merits acceptance; I have only a few minor comments.  
Title: Is the current title the most effective descriptor of the paper? A title such as "Efficient AC Compilation of Graphical Models via PSDD Multiplication" might more clearly capture the key connections and contributions presented in the work.  
Question on naming: Considering the relationship between binary decision diagrams (BDDs) and algebraic decision diagrams (ADDs), could PSDDs be viewed as algebraic generalizations of SDDs (ASDDs) whose numerical evaluations sum to one? The discussion of factors versus probabilities seems to suggest this interpretation. If so, adopting the term ASDD might provide a more general and intuitive terminology.  
Theorem 1: Are both decomposability and determinism necessary conditions for efficient inference (presumably linear time) in the size of an AC? If so, could the authors briefly clarify why inference becomes less tractable without these properties? My understanding (which may be incorrect) was that any AC representation of a graphical model allows for linear-time inference relative to the size of the AC. If this understanding is accurate, is there a straightforward PSDD multiplication algorithm that does not preserve these properties but still enables efficient inference in the resulting AC?  
Algorithm 1, line 19: How is the cache implemented in this algorithm? Similar to ADDs, is it based on the assumption that all subcircuits are recursively cached, allowing for the maintenance of a unique identifier for each PSDD? Regardless, it would be helpful for the authors to clarify this point, as caching is critical for the efficient implementation of the Multiply algorithm.  
Section 6: The discussion of annotated ordered multi-valued decision diagrams (AOMDDs) makes it somewhat unclear how PSDDs differ from AOMDDs. Could the authors elaborate further on the distinctions between these representations?