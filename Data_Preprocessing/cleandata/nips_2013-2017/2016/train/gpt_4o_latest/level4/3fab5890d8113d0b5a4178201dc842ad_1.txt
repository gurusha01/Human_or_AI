The authors employ fast approximate-nearest-neighbors structures and arg-top-K operations to compute attention weights within a Neural Turing Machine. They present experiments demonstrating that this approach does not compromise training performance and, in fact, enables training on larger-scale problems. While the novelty of this work is limited—see, for instance, section 3.3 of the memory networks paper (http://arxiv.org/pdf/1410.3916.pdf)—there are now multiple memory network studies that utilize memories with millions of items and hashing techniques to achieve scalable lookups. However, I have not encountered such methods being applied to writeable memories before. Although this paper may not represent a significant conceptual breakthrough, the practical implementation and success of these techniques are certainly noteworthy and merit publication. Therefore, I recommend accepting the paper, albeit with some revisions.
1. The paper lacks sufficient detail to allow for replication of its results. In particular, the descriptions of the tasks are insufficient. Given that the original NTM paper's task code has not been released and there is no "standard" version of these tasks, it is essential for the authors to provide precise and thorough descriptions of how the tasks were constructed. Additionally, I urge the authors to commit to releasing the code for their experiments to facilitate reproducibility.
2. The paper does not adequately address the limitations of the proposed approach. Under what conditions does the method fail, and does it always perform as expected? While the authors describe their model as being smooth, it is important to note that the argmax (or K-argmax) operation is inherently not smooth. For example, with $K=1$ in the read-only setting, their model closely resembles the MemNN-WSH model described in http://arxiv.org/pdf/1503.08895.pdf (albeit without hashing), which was reported to perform less effectively than fully smooth models. Is this discrepancy due to the $K=1$ setting or the nature of the tasks? A deeper analysis of failure cases and a discussion of the types of tasks or setups that enable successful training would significantly enhance the paper's value. The authors' model involves making discrete decisions during training without explicitly accounting for this (unlike the approach in http://arxiv.org/abs/1511.07275). While the fact that they achieve results with this method is a meaningful contribution, it is important to better understand the model's limitations and the conditions under which it succeeds or fails.
Finally, I recommend the authors remove section 3.6 from the paper. Additionally, I suggest they refrain from labeling the omniglot dataset as "non-synthetic" or "real-world."