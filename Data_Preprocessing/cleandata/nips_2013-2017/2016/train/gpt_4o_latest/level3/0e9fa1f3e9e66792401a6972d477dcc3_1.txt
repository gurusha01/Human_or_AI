The paper proposes using Bidirectional Monte Carlo (BDMC) to estimate the Jeffreys divergence (J-S divergence) for debugging and evaluating Markov Chain Monte Carlo (MCMC) implementations in probabilistic programming languages (PPLs). This approach is particularly promising as it addresses the limitations of existing MCMC diagnostics, which often fail to rigorously identify convergence failures. By bounding the Jeffreys divergence through annealed importance sampling (AIS) chains run in both forward and reverse directions, the authors provide a quantitative measure of the accuracy of approximate posterior samples. The integration of this method into WebPPL and Stan, two widely used PPLs, and its validation on multiple models and datasets, further underscores its practical utility.
The paper builds on prior work, particularly [1] and [2], which also evaluate MCMC samplers using data sampled from the prior. However, the authors extend these ideas by refining BDMC to diagnose sampler convergence failures and propose a protocol for applying the method to real-world datasets. This is a significant contribution, as it bridges the gap between theoretical guarantees and practical applicability in probabilistic programming.
Strengths:
1. Novelty and Significance: The use of BDMC to rigorously evaluate MCMC convergence is innovative and addresses a critical gap in the field. The method has the potential to advance the state of the art in debugging and improving PPLs.
2. Practical Implementation: The integration of the method into WebPPL and Stan demonstrates its feasibility and relevance to practitioners.
3. Validation and Debugging Utility: The experiments validate the method's effectiveness and highlight its utility in uncovering bugs in PPL implementations, as evidenced by the discovery of a bug in WebPPL.
Weaknesses:
1. Clarity of Presentation: The derivation in Section 3.1 is difficult to follow, with unclear definitions (e.g., \(q(.)\) is used before being defined). A more structured, step-by-step explanation would improve accessibility.
2. Complexity: The distinction between unobserved variables \(z\) and \(\theta\) adds unnecessary complexity, as these variables always appear together. Simplifying this aspect could enhance readability.
3. Notation and Minor Errors: The paper suffers from cluttered notation, making it harder to follow. Additionally, there is a missing parenthesis on line 165, which reflects a lack of careful proofreading.
Arguments for Acceptance:
- The paper addresses an important problem with a novel and well-motivated approach.
- It demonstrates practical relevance by integrating and validating the method in widely used PPLs.
- The debugging capabilities of the method are particularly valuable for the growing field of probabilistic programming.
Arguments Against Acceptance:
- The unclear derivation and cluttered notation hinder accessibility for a broader audience.
- The added complexity in variable representation detracts from the paper's clarity without providing significant benefits.
Recommendation: Accept with minor revisions. The paper makes a strong contribution to the field, but improvements in clarity and presentation are necessary to maximize its impact.