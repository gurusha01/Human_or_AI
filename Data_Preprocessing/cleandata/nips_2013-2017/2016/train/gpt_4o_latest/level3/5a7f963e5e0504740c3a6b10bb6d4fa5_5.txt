This paper explores the tractability of operations on arithmetic circuits (ACs), focusing on a recently introduced subclass called Probabilistic Sentential Decision Diagrams (PSDDs). The authors present two main contributions: (a) a polynomial-time algorithm for multiplying PSDDs and (b) a corresponding decomposable and deterministic arithmetic circuit. These results are utilized to propose a novel approach for compiling probabilistic graphical models, bypassing intermediate logical representations like Sentential Decision Diagrams (SDDs) or d-DNNFs. While the paper provides clever insights into PSDD multiplication and its applications, several issues limit its impact.
Strengths:
1. Novelty: The introduction of a polynomial-time multiplication operator for PSDDs is a significant theoretical contribution, as multiplication is intractable for many AC subclasses. This result expands the applicability of PSDDs to a broader range of probabilistic reasoning tasks.
2. Simplified Compilation: The proposed method for compiling probabilistic graphical models directly into PSDDs eliminates the need for intermediate representations, potentially reducing complexity in some cases.
3. Empirical Comparison: The paper includes an empirical evaluation of PSDD compilation against existing methods, demonstrating size advantages in certain benchmarks.
Weaknesses:
1. Algorithm Description: The algorithm for PSDD multiplication is poorly described. Key steps, such as the base case handling and caching mechanisms, are relegated to the appendix, making it difficult for readers to fully understand or reproduce the results. Supplementary material is insufficient to address these gaps.
2. Clarity of Comparisons: The empirical comparison lacks clarity regarding the types of networks where PSDDs provide significant advantages. For instance, while PSDDs outperform other methods in some benchmarks, the reasons for these improvements are not adequately explained.
3. Compilation Time: Surprisingly, the paper does not address compilation time in detail. This omission is critical, as the proposed method does not appear to improve compilation efficiency, which is a key metric for practical utility.
4. Writing Quality: The paper suffers from poor writing, including grammatical errors (e.g., missing or unnecessary "s" in verbs) and inconsistent references. This detracts from the overall readability and professionalism of the work.
5. Limited Scope: While the results are clever, their contribution to the broader literature is marginal. The lack of a polytime summing-out operator for PSDDs limits their utility in inference tasks like variable elimination or message passing.
Questions and Suggestions:
1. The reviewer questions whether the graphical projection (e.g., Figure 4) functions similarly to marginalization in directed acyclic graphs (DAGs). Clarifying this connection could strengthen the paper.
2. The authors should provide more detailed explanations of their algorithm, ideally with pseudocode or step-by-step examples in the main text.
3. A deeper discussion of the trade-offs between PSDDs and other AC subclasses, particularly in terms of size, efficiency, and supported operations, would enhance the paper's significance.
Recommendation:
While the paper introduces a novel and theoretically sound result, its limited scope, poor clarity, and lack of practical improvements in compilation time reduce its overall impact. With significant revisions to the algorithm description, empirical analysis, and writing quality, the paper could make a stronger contribution. For now, I recommend weak rejection.