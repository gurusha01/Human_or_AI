This paper introduces a novel method, Bounding Divergences with Reverse Annealing (BREAD), for evaluating the accuracy of approximate posterior inference in probabilistic programming languages. The method extends the bidirectional Monte Carlo (BDMC) technique to bound the Jeffreys divergence between the true posterior distribution and the distribution of approximate samples. The authors demonstrate the effectiveness of BREAD in evaluating the accuracy of posterior inference in two probabilistic programming languages, WebPPL and Stan, and showcase its potential in guiding the design of inference algorithms and model representations.
The paper is well-written, and the authors provide a clear and concise introduction to the background and related work. The technical contributions of the paper are significant, and the authors provide a thorough analysis of the method's properties and limitations. The experimental evaluation is comprehensive, and the results demonstrate the effectiveness of BREAD in evaluating the accuracy of posterior inference and guiding the design of inference algorithms.
The strengths of the paper include:
* The introduction of a novel method for evaluating the accuracy of approximate posterior inference, which has the potential to significantly impact the field of probabilistic programming.
* A thorough analysis of the method's properties and limitations, including a discussion of the assumptions and potential biases.
* A comprehensive experimental evaluation, which demonstrates the effectiveness of BREAD in evaluating the accuracy of posterior inference and guiding the design of inference algorithms.
The weaknesses of the paper include:
* The method is limited to probabilistic programming languages that can be viewed as importance sampling over an extended state space, which may not be applicable to all probabilistic programming languages.
* The authors note that the method requires an exact posterior sample, which can be challenging to obtain in practice.
* The experimental evaluation is primarily focused on two probabilistic programming languages, WebPPL and Stan, and it would be beneficial to see a more comprehensive evaluation across a wider range of languages and models.
Overall, the paper makes a significant contribution to the field of probabilistic programming, and the authors demonstrate the potential of BREAD in evaluating the accuracy of approximate posterior inference and guiding the design of inference algorithms. The paper is well-written, and the technical contributions are thorough and well-analyzed.
Arguments for acceptance:
* The paper introduces a novel method for evaluating the accuracy of approximate posterior inference, which has the potential to significantly impact the field of probabilistic programming.
* The technical contributions of the paper are significant, and the authors provide a thorough analysis of the method's properties and limitations.
* The experimental evaluation is comprehensive, and the results demonstrate the effectiveness of BREAD in evaluating the accuracy of posterior inference and guiding the design of inference algorithms.
Arguments against acceptance:
* The method is limited to probabilistic programming languages that can be viewed as importance sampling over an extended state space, which may not be applicable to all probabilistic programming languages.
* The authors note that the method requires an exact posterior sample, which can be challenging to obtain in practice.
* The experimental evaluation is primarily focused on two probabilistic programming languages, WebPPL and Stan, and it would be beneficial to see a more comprehensive evaluation across a wider range of languages and models.