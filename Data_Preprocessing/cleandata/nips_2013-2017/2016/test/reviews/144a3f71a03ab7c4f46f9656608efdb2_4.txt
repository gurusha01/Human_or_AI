This paper proposed a way to project the non-decomposable ancestral constraints to decomposable constraints so the decomposable-score-based structure learning approaches can incorporate such domain knowledge and hence improve the learning efficiency. The novelty of this paper mostly lies in section 5 where the authors introduced their proposed way to project the non-decomposable ancestral constraints to edge and topological ordering constraints which are decomposable. The paper is well written and clearly illustrates their work both in the theory part and the experiments part. I have some concerns and suggestions as below: i. Table 3 shows that the projection of ancestral constraints can only improve the performance of EC trees but not the ILP approach. Does it mean that projecting the ancestral constraints to decomposable constraints only works for EC trees and have poor generalization ability to other learning approaches? Considering the main innovation of this paper is to infer decomposable constraints from non-decomposable ancestral constraints, it would be more convincing if the authors can show that incorporating such decomposable constraints can improve the performance and efficiency of certain learning approach which originally cannot handle the non-decomposable constraints. ii. Table 2 shows an easy-hard-easy pattern on the EC tree performance as increasing the proportion of ancestral constraints. Why does it happen? Does it mean that the effect of reducing the EC tree search space with ancestral constraints is fairly sensitive to the amount of domain knowledge it incorporates compared to the ILP approach? Hence, the number of ancestral constraints needs to be carefully tuned in order to achieve ideal performance? iii. Table 2 only shows the results of the structural Hamming distance from the EC trees. But, how does it compared with ILP approach? iv. A small suggestion: I understand that the BN graph contains the theoretical fundamental of EC trees as EC trees is extended from it. However, since the experiments part only considered the search space of EC trees with ancestral constraints applied to it, I would drop section 4.1 and spend more time on better explaining EC trees and the A* algorithm in the EC tree settings.