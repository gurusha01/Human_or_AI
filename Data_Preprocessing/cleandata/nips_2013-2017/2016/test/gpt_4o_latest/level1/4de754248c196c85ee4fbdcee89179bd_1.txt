The paper presents a novel approach to energy disaggregation for home appliance monitoring, leveraging additive factorial hidden Markov models (FHMMs). The authors propose a scalable and computationally efficient method that combines semidefinite programming (SDP) relaxations, randomized rounding, and an Alternating Direction Method of Multipliers (ADMM) solver. The primary contribution lies in replacing the quadratic programming relaxation used in prior work (Kolter and Jaakkola, 2012) with a tighter SDP relaxation, which is better suited for large-scale integer programming problems. The authors also introduce a novel ADMM variant tailored to the block-structured nature of the SDP, enabling scalability to datasets with millions of variables. Experimental results on both synthetic and real-world datasets demonstrate the superiority of the proposed method over state-of-the-art algorithms, achieving lower disaggregation errors and higher precision and recall in identifying appliance states.
Strengths
1. Technical Soundness: The paper is technically rigorous, providing detailed derivations of the proposed SDP relaxation and ADMM-based solver. The randomized rounding approach is well-motivated and builds on established techniques (e.g., Park and Boyd, 2015).
2. Scalability: The proposed method addresses a critical limitation of existing FHMM-based approaches by enabling inference on large-scale datasets, a significant advancement for practical applications of energy disaggregation.
3. Experimental Validation: The authors provide comprehensive experiments on both synthetic and real-world datasets, demonstrating consistent improvements over competing methods (e.g., Kolter and Jaakkola, 2012; Zhong et al., 2014). The use of multiple evaluation metrics (e.g., normalized disaggregation error, precision, recall) strengthens the empirical claims.
4. Broader Applicability: The method has potential applications beyond energy disaggregation, such as in other FHMM inference problems or large-scale integer quadratic programming tasks.
Weaknesses
1. Clarity: While the technical content is thorough, the paper is dense and could benefit from clearer explanations, particularly in the derivation of the SDP relaxation and the ADMM updates. Non-expert readers may struggle to follow the mathematical details.
2. Computational Overhead: Although the method is scalable, the reported runtime (5 hours for real-world experiments) is significantly higher than competing methods. The authors acknowledge this limitation and suggest that a C++ implementation could improve efficiency, but this remains speculative.
3. Generality of Results: While the method performs well on the REDD dataset, its generalizability to other real-world energy datasets with different characteristics is not explored.
4. Comparison Baseline: The comparison to state-of-the-art methods is limited to a few algorithms. Including more recent deep learning-based approaches (e.g., convolutional or recurrent neural networks) could provide a more comprehensive evaluation.
Arguments for Acceptance
- The paper addresses a critical scalability issue in FHMM-based energy disaggregation, advancing the state of the art.
- The proposed method is technically innovative and well-supported by theoretical and empirical evidence.
- The work has broader implications for large-scale optimization problems, making it relevant to a wide audience.
Arguments Against Acceptance
- The clarity of the presentation could be improved, particularly for readers less familiar with SDP and ADMM.
- The computational efficiency of the method, while better than exact SDP solvers, remains a concern for practical deployment.
- The evaluation is limited to a single real-world dataset, raising questions about generalizability.
Recommendation
Overall, this paper makes a significant contribution to the field of energy disaggregation and large-scale optimization. While there are some concerns regarding clarity and computational efficiency, the strengths outweigh the weaknesses. I recommend acceptance, provided the authors address the clarity issues and discuss potential extensions to improve runtime in future work.