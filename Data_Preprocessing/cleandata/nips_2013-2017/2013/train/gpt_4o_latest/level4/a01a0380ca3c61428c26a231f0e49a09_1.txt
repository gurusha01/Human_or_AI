The paper establishes bounds on the search performance of a straightforward, tree-based nearest neighbor search algorithm. These bounds are tied to the vector quantization (VQ) performance of the tree. The authors argue that this implies trees with superior VQ performance are beneficial for nearest neighbor search. The analysis is further extended to trees with large margin splits.
The title of the paper poses the question, "which space partitioning tree to use for search?" A more precise framing would be, "which tree provides the strongest performance guarantees?" The paper, however, provides minimal insight into practical performance, largely due to its reliance on an overly simplified search procedure. Often, stronger guarantees arise as artifacts of specific analytical approaches or proof techniques, given that the discussion revolves around upper bounds. If these bounds are not tight, they offer limited practical guidance on which tree to "use." The paper falls into the common trap of conflating stronger performance guarantees with actual improved performance, as evidenced in several places, such as the opening sentence of Section 4.
Algorithm 1 is analyzed in detail, but its practical relevance is questionable. The algorithm descends the tree without backtracking and performs exhaustive search at the target depth \( l \). While the analysis does not account for it, the final search could instead leverage efficient exact tree search with backtracking. 
This algorithm does not identify the exact nearest neighbor. A more natural alternative would involve a heuristic to skip branches dynamically during traversal. The key distinction is that Algorithm 1 relies on a pre-specified parameter to determine branch traversal, rather than making data-dependent decisions. For this reason, I would personally avoid using this algorithm. Since the paper's results are confined to this algorithm, I question its overall relevance.
I acknowledge that analyzing the computational complexity of methods incorporating backtracking is significantly more challenging. However, I argue that such an analysis is essential for understanding the behavior of realistic algorithms. The current analysis appears to have been conducted primarily because it was feasible, rather than because it was meaningful.
The paper's conclusion follows this logic:  
Algorithm 1: good VQ performance â‡’ good search performance.  
However, Algorithm 1 is not inherently a strong search algorithm. When more sophisticated tree search methods are employed, the conclusions drawn from this analysis become largely irrelevant. Despite this, the title and other statements in the paper (e.g., the top of page 5) suggest a broader applicability of the results. I must emphasize that this is not the case, and the paper does NOT provide an answer to the practical question of which search tree to use.
I would value the results more if they contributed to the analysis of more realistic search algorithms. That said, I am not an expert in tree search analysis and cannot fully assess the paper from this perspective. Additionally, the paper does not claim to introduce novel analytical methods; its focus is solely on the theorems. This further leads me to question its overall contribution.
The empirical evaluation is weak. Only four datasets are used, and they are non-standard. For instance, why is MNIST arbitrarily subsampled to 6,000 training and 1,000 test samples? No justification is provided for this choice, which undermines the credibility of the evaluation. With such small training datasets, the need for tree-based search is minimal. While the empirical results align well with the theoretical analysis, they fail to address practical concerns such as computation time. For example, a single decision in a kd-tree is computationally cheaper than in a PA-tree by a factor of \( O(\text{dim}(X)) \). The additional computation time could be allocated to backtracking, potentially giving the kd-tree an edge. Thus, the analysis offers no practical guidance on which tree to use with a more advanced search algorithm.
I remain unconvinced that this simplified analysis can adequately answer the question posed in the title for practical scenarios. The reliance on an overly simplified search algorithm significantly diminishes the relevance of the analysis. Consequently, its practical utility is close to negligible.
After reviewing the author feedback, I find that my concerns have been addressed thoroughly and convincingly. As a result, I have revised my decision accordingly. I appreciate the authors' thoughtful and constructive feedback.