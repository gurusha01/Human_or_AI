The authors discuss the problem of sparse precision matrix estimation using CLIME and present a scalable variant CLIME-ADMM along with a distributed framework for computations. Empirical results comparing the CLIME-ADMM algorithm to state-of-the-art techniques such as DC-QUIC, Tiger and Flare are presented.
Notation remains scattered in various parts of Section 1, 2 and 3. It may help instead to have a table with all the notations for ease of readability. For example, \rho and \eta do not seem to be defined in the text. 
The block cyclic data distribution appears to be interesting- it is however not obvious why this scheme would achieve load balance and scalability. There are also no empirical results to prove this point.
It appears that the algorithm currently sets the column block size on an adhoc basis -- is there some intuition or theory to guide the choice of k?
A more general concern is that this is perhaps not a 'distributed' algorithm as no explicit mechanism of message passing and communication are discussed. Perhaps it would make sense to consider this a parallel implementation.
Minor comments:
Section 1: ' where \lambda is a tunning parameter -> Replace with 'tuning'
Section 5.1: 'As Tiger is parameter tunning free' -> Replace with 'tuning'
Section 2: 'CLIME is summerized in' -> 'CLIME is summarized in' 
 A large scale parallel algorithm for estimation of sparse precision matrix using CLIME is presented. The novelty involves the estimation of the precision matrix by column blocks, instead of column-by-column. Empricial analysis using OpenMPI and Scalapak is presented.