The paper studies the collision probability of the following hashing scheme for points in R^D: the hash function picks a random vector of D i.i.d. samples from a symmetric alpha-stable distribution, and to hash a point x, we compute the dot product of x and the random vector and return the sign of the dot product. The same scheme for 2-stable distribution has been studied before (known as sim-hash). The main result shows that the collision probability for alpha=1 on binary data can be approximated by a function of the chi-square similarity. The bound for general data is pointed out by the authors themselves to be far from the true collision probability so it is not clear what it means, especially regarding the comparison between that bound and the chi square similarity. 
The paper provides some experiments to show that the collision probability is approximately equal to some functions of the chi square similarity, and thus one can approximate chi square similarity from the collision probability and these functions. However, in this process, I think we are no longer able to use linear SVM or efficient near neighbor search (advantages 2 and 3 in the introduction) and have to use kernel SVM and exhaustive search instead. When using linear SVM, we use the kernel implicitly defined by the LSH and there is inadequate explanation of how useful it is (chi square is useful but it does not mean any function of it is also useful). 
I have not verified all the proofs in the appendix but the ones I have read seem correct. The proof details are clear and easy to follow. The question of finding a hashing scheme approximating the chi square similarity is interesting, but the paper does not get close to resolving it. 
============ 
Rebuttal comments: the streaming application is interesting but in all 3 applications (linear SVM, near neighbor search, streaming), the crucial factor is whether the kernel implicitly defined by the hashing scheme is useful, which is still inadequately supported. It would be helpful to report the accuracy and speed achieved using the hashing scheme directly with linear SVM (as described in the introduction) on, say, the MNIST data. The paper shows the collision probability of a certain hashing scheme based on stable distribution is related to some function of the chi square similarity. The paper does not show how useful this function is for learning tasks and how to get algorithms for chi square similarity.