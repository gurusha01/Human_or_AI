This study presents an enhanced version of the conventional word hashing trick for embedding representation, utilizing a weighted combination of multiple vectors indexed by different hash functions to represent each word, which can be achieved through a predefined dictionary or during online training. This approach is notable for its simplicity and ease of implementation, significantly reducing the number of embedding parameters.
The results obtained are generally satisfactory, and the methodology employed is quite refined. Moreover, the hash embeddings appear to function as an effective regularizer. However, to further enhance the clarity of the presentation, it would be beneficial to include the final selected vocabulary sizes and the parameter reduction achieved by the hash embedding in Table 2. Additionally, Table 3 lacks a comparison with a state-of-the-art joint model for the DBPedia dataset, as presented in [1].
The claim made on Line 255, stating that the ensemble would require the same training time as a single large model, seems inaccurate. This equivalence in training time would only hold if each model in the ensemble had an architecture with fewer non-embedding weights. Given that the number of non-embedding weights in each network of the ensemble is reportedly the same as in the large model, the training time for the ensemble would likely be substantially longer.
Table 3 highlights the top three performing models, but a more insightful comparison could be achieved by categorizing the approaches into embedding-only methods and RNN/CNN methods. It would also be intriguing to explore the integration of these embeddings into more context-sensitive RNN/CNN models.
Minor suggestions for improvement include:
- L9: Correcting the typo "million(s)"
- L39: Amending "to(o) much"
- L148: Revising the sentence for better clarity
- L207: Providing a definition or explanation for "patience"
- L235: Correcting the typo "table table"
- Table 4: Clarifying whether the importance weights were summed to obtain the results, and specifying the order of the highest and lowest weights.
[1] Miyato, Takeru, Andrew M. Dai, and Ian Goodfellow. "Virtual adversarial training for semi-supervised text classification." ICLR 2017.