{
  "name" : "3fc2c60b5782f641f76bcefc39fb2392.pdf",
  "metadata" : {
    "source" : "META",
    "title" : "Task-based End-to-end Model Learning in Stochastic Optimization",
    "authors" : [ "Priya L. Donti" ],
    "emails" : [ "pdonti@cs.cmu.edu", "bamos@cs.cmu.edu", "zkolter@cs.cmu.edu" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "While prediction algorithms commonly operate within some larger process, the criteria by which we train these algorithms often differ from the ultimate criteria on which we evaluate them: the performance of the full “closed-loop” system on the ultimate task at hand. For instance, instead of merely classifying images in a standalone setting, one may want to use these classifications within planning and control tasks such as autonomous driving. While a typical image classification algorithm might optimize accuracy or log likelihood, in a driving task we may ultimately care more about the difference between classifying a pedestrian as a tree vs. classifying a garbage can as a tree. Similarly, when we use a probabilistic prediction algorithm to generate forecasts of upcoming electricity demand, we then want to use these forecasts to minimize the costs of a scheduling procedure that allocates generation for a power grid. As these examples suggest, instead of using a “generic loss,” we instead may want to learn a model that approximates the ultimate task-based “true loss.”\nThis paper considers an end-to-end approach for learning probabilistic machine learning models that directly capture the objective of their ultimate task. Formally, we consider probabilistic models in the context of stochastic programming, where the goal is to minimize some expected cost over the models’ probabilistic predictions, subject to some (potentially also probabilistic) constraints. As mentioned above, it is common to approach these problems in a two-step fashion: first to fit a predictive model to observed data by minimizing some criterion such as negative log-likelihood, and then to use this model to compute or approximate the necessary expected costs in the stochastic programming setting. While this procedure can work well in many instances, it ignores the fact that the true cost of the system (the optimization objective evaluated on actual instantiations in the real world) may benefit from a model that actually attains worse overall likelihood, but makes more accurate predictions over certain manifolds of the underlying space.\n31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\nWe propose to train a probabilistic model not (solely) for predictive accuracy, but so that–when it is later used within the loop of a stochastic programming procedure–it produces solutions that minimize the ultimate task-based loss. This formulation may seem somewhat counterintuitive, given that a “perfect” predictive model would of course also be the optimal model to use within a stochastic programming framework. However, the reality that all models do make errors illustrates that we should indeed look to a final task-based objective to determine the proper error tradeoffs within a machine learning setting. This paper proposes one way to evaluate task-based tradeoffs in a fully automated fashion, by computing derivatives through the solution to the stochastic programming problem in a manner that can improve the underlying model.\nWe begin by presenting background material and related work in areas spanning stochastic programming, end-to-end training, and optimizing alternative loss functions. We then describe our approach within the formal context of stochastic programming, and give a generic method for propagating task loss through these problems in a manner that can update the models. We report on three experimental evaluations of the proposed approach: a classical inventory stock problem, a real-world electrical grid scheduling task, and a real-world energy storage arbitrage task. We show that the proposed approach outperforms traditional modeling and purely black-box policy optimization approaches."
    }, {
      "heading" : "2 Background and related work",
      "text" : "Stochastic programming Stochastic programming is a method for making decisions under uncertainty by modeling or optimizing objectives governed by a random process. It has applications in many domains such as energy [1], finance [2], and manufacturing [3], where the underlying probability distributions are either known or can be estimated. Common considerations include how to best model or approximate the underlying random variable, how to solve the resulting optimization problem, and how to then assess the quality of the resulting (approximate) solution [4].\nIn cases where the underlying probability distribution is known but the objective cannot be solved analytically, it is common to use Monte Carlo sample average approximation methods, which draw multiple iid samples from the underlying probability distribution and then use deterministic optimization methods to solve the resultant problems [5]. In cases where the underlying distribution is not known, it is common to learn or estimate some model from observed samples [6].\nEnd-to-end training Recent years have seen a dramatic increase in the number of systems building on so-called “end-to-end” learning. Generally speaking, this term refers to systems where the end goal of the machine learning process is directly predicted from raw inputs [e.g. 7, 8]. In the context of deep learning systems, the term now traditionally refers to architectures where, for example, there is no explicit encoding of hand-tuned features on the data, but the system directly predicts what the image, text, etc. is from the raw inputs [9, 10, 11, 12, 13]. The context in which we use the term end-to-end is similar, but slightly more in line with its older usage: instead of (just) attempting to learn an output (with known and typically straightforward loss functions), we are specifically attempting to learn a model based upon an end-to-end task that the user is ultimately trying to accomplish. We feel that this concept–of describing the entire closed-loop performance of the system as evaluated on the real task at hand–is beneficial to add to the notion of end-to-end learning.\nAlso highly related to our work are recent efforts in end-to-end policy learning [14], using value iteration effectively as an optimization procedure in similar networks [15], and multi-objective optimization [16, 17, 18, 19]. These lines of work fit more with the “pure” end-to-end approach we discuss later on (where models are eschewed for pure function approximation methods), but conceptually the approaches have similar motivations in modifying typically-optimized policies to address some task(s) directly. Of course, the actual methodological approaches are quite different, given our specific focus on stochastic programming as the black box of interest in our setting.\nOptimizing alternative loss functions There has been a great deal of work in recent years on using machine learning procedures to optimize different loss criteria than those “naturally” optimized by the algorithm. For example, Stoyanov et al. [20] and Hazan et al. [21] propose methods for optimizing loss criteria in structured prediction that are different from the inference procedure of the prediction algorithm; this work has also recently been extended to deep networks [22]. Recent work has also explored using auxiliary prediction losses to satisfy multiple objectives [23], learning\ndynamics models that maximize control performance in Bayesian optimization [24], and learning adaptive predictive models via differentiation through a meta-learning optimization objective [25].\nThe work we have found in the literature that most closely resembles our approach is the work of Bengio [26], which uses a neural network model for predicting financial prices, and then optimizes the model based on returns obtained via a hedging strategy that employs it. We view this approach–of both using a model and then tuning that model to adapt to a (differentiable) procedure–as a philosophical predecessor to our own work. In concurrent work, Elmachtoub and Grigas [27] also propose an approach for tuning model parameters given optimization results, but in the context of linear programming and outside the context of deep networks. Whereas Bengio [26] and Elmachtoub and Grigas [27] use hand-crafted (but differentiable) algorithms to approximately attain some objective given a predictive model, our approach is tightly coupled to stochastic programming, where the explicit objective is to attempt to optimize the desired task cost via an exact optimization routine, but given underlying randomness. The notions of stochasticity are thus naturally quite different in our work, but we do hope that our work can bring back the original idea of task-based model learning. (Despite Bengio [26]’s original paper being nearly 20 years old, virtually all follow-on work has focused on the financial application, and not on what we feel is the core idea of using a surrogate model within a task-driven optimization procedure.)"
    }, {
      "heading" : "3 End-to-end model learning in stochastic programming",
      "text" : "We first formally define the stochastic modeling and optimization problems with which we are concerned. Let (x 2 X , y 2 Y) ⇠ D denote standard input-output pairs drawn from some (real, unknown) distribution D. We also consider actions z 2 Z that incur some expected loss LD(z) = Ex,y⇠D[f(x, y, z)]. For instance, a power systems operator may try to allocate power generators z given past electricity demand x and future electricity demand y; this allocation’s loss corresponds to the over- or under-generation penalties incurred given future demand instantiations.\nIf we knew D, then we could select optimal actions z?D = argminz LD(z). However, in practice, the true distribution D is unknown. In this paper, we are interested in modeling the conditional distribution y|x using some parameterized model p(y|x; ✓) in order to minimize the real-world cost of the policy implied by this parameterization. Specifically, we find some parameters ✓ to parameterize p(y|x; ✓) (as in the standard statistical setting) and then determine optimal actions z?(x; ✓) (via stochastic optimization) that correspond to our observed input x and the specific choice of parameters ✓ in our probabilistic model. Upon observing the costs of these actions z?(x; ✓) relative to true instantiations of x and y, we update our parameterized model p(y|x; ✓) accordingly, calculate the resultant new z?(x; ✓), and repeat. The goal is to find parameters ✓ such that the corresponding policy z ? (x; ✓) optimizes the loss under the true joint distribution of x and y.\nExplicitly, we wish to choose ✓ to minimize the task loss L(✓) in the context of x, y ⇠ D, i.e.\nminimize\n✓\nL(✓) = E x,y⇠D[f(x, y, z ? (x; ✓))]. (1)\nSince in reality we do not know the distribution D, we obtain z?(x; ✓) via a proxy stochastic optimization problem for a fixed instantiation of parameters ✓, i.e.\nz\n?\n(x; ✓) = argmin\nz\nE y⇠p(y|x;✓)[f(x, y, z)]. (2)\nThe above setting specifies z?(x; ✓) using a simple (unconstrained) stochastic program, but in reality our decision may be subject to both probabilistic and deterministic constraints. We therefore consider more general decisions produced through a generic stochastic programming problem1\nz\n?\n(x; ✓) = argmin\nz\nE y⇠p(y|x;✓)[f(x, y, z)]\nsubject to E y⇠p(y|x;✓)[gi(x, y, z)]  0, i = 1, . . . , nineq\nh\ni\n(z) = 0, i = 1, . . . , n\neq\n.\n(3)\n1It is standard to presume in stochastic programming that equality constraints depend only on decision variables (not random variables), as non-trivial random equality constraints are typically not possible to satisfy.\nIn this setting, the full task loss is more complex, since it captures both the expected cost and any deviations from the constraints. We can write this, for instance, as\nL(✓) = E x,y⇠D[f(x, y, z ?(x; ✓))]+\nnineqX\ni=1\nI{E x,y⇠D[gi(x, y, z ?(x; ✓))]  0}+ neqX\ni=1\nE x [I{h i (z?(x; ✓)) = 0}]\n(4) (where I(·) is the indicator function that is zero when its constraints are satisfied and infinite otherwise). However, the basic intuition behind our approach remains the same for both the constrained and unconstrained cases: in both settings, we attempt to learn parameters of a probabilistic model not to produce strictly “accurate” predictions, but such that when we use the resultant model within a stochastic programming setting, the resulting decisions perform well under the true distribution.\nActually solving this problem requires that we differentiate through the “argmin” operator z?(x; ✓) of the stochastic programming problem. This differentiation is not possible for all classes of optimization problems (the argmin operator may be discontinuous), but as we will show shortly, in many practical cases–including cases where the function and constraints are strongly convex–we can indeed efficiently compute these gradients even in the context of constrained optimization."
    }, {
      "heading" : "3.1 Discussion and alternative approaches",
      "text" : "We highlight our approach in contrast to two alternative existing methods: traditional model learning and model-free black-box policy optimization. In traditional machine learning approaches, it is common to use ✓ to minimize the (conditional) log-likelihood of observed data under the model p(y|x; ✓). This method corresponds to approximately solving the optimization problem\nminimize\n✓\nE x,y⇠D [ log p(y|x; ✓)] . (5)\nIf we then need to use the conditional distribution y|x to determine actions z within some later optimization setting, we commonly use the predictive model obtained from (5) directly. This approach has obvious advantages, in that the model-learning phase is well-justified independent of any future use in a task. However, it is also prone to poor performance in the common setting where the true distribution y|x cannot be represented within the class of distributions parameterized by ✓, i.e. where the procedure suffers from model bias. Conceptually, the log-likelihood objective implicitly trades off between model error in different regions of the input/output space, but does so in a manner largely opaque to the modeler, and may ultimately not employ the correct tradeoffs for a given task.\nIn contrast, there is an alternative approach to solving (1) that we describe as the model-free “black-box” policy optimization approach. Here, we forgo learning any model at all of the random variable y. Instead, we attempt to learn a policy mapping directly from inputs x to actions z ? (x; ¯\n✓) that minimize the loss L(¯✓) presented in (4) (where here ¯✓ defines the form of the policy itself, not a predictive model). While such model-free methods can perform well in many settings, they are often very data-inefficient, as the policy class must have enough representational power to describe sufficiently complex policies without recourse to any underlying model.2\nAlgorithm 1 Task Loss Optimization 1: input: D // samples from true distribution 2: initialize ✓ // some initial parameterization 3: for t = 1, . . . , T do 4: sample (x, y) ⇠ D 5: compute z?(x; ✓) via Equation (3) 6: // step in violated constraint or objective 7: if 9i s.t. g\ni\n(x, y, z\n? (x; ✓)) > 0 then 8: update ✓ with r\n✓\ng\ni\n(x, y, z\n?\n(x; ✓))\n9: else 10: update ✓ with r\n✓\nf(x, y, z\n?\n(x; ✓))\n11: end if 12: end for\nOur approach offers an intermediate setting, where we do still use a surrogate model to determine an optimal decision z?(x; ✓), yet we adapt this model based on the task loss instead of any model prediction accuracy. In practice, we typically want to minimize some weighted combination of log-likelihood and task loss, which can be easily accomplished given our approach.\n3.2 Optimizing task loss\nTo solve the generic optimization problem (4), we can in principle adopt a straightforward (constrained) stochastic gradient approach, as detailed in Algorithm 1. At each iteration, we\n2This distinction is roughly analogous to the policy search vs. model-based settings in reinforcement learning. However, for the purposes of this paper, we consider much simpler stochastic programs without the multiple rounds that occur in RL, and the extension of these techniques to a full RL setting remains as future work.\nsolve the proxy stochastic programming problem (3) to obtain z?(x, ✓), using the distribution defined by our current values of ✓. Then, we compute the true loss L(✓) using the observed value of y. If any of the inequality constraints g\ni in L(✓) are violated, we take a gradient step in the violated constraint; otherwise, we take a gradient step in the optimization objective f . We note that if any inequality constraints are probabilistic, Algorithm 1 must be adapted to employ mini-batches in order to determine whether these probabilistic constraints are satisfied. Alternatively, because even the g\ni\nconstraints are probabilistic, it is common in practice to simply move a weighted version of these constraints to the objective, i.e., we modify the objective by adding some appropriate penalty times the positive part of the function, g\ni (x, y, z)+, for some > 0. In practice, this has the effect of taking gradient steps jointly in all the violated constraints and the objective in the case that one or more inequality constraints are violated, often resulting in faster convergence. Note that we need only move stochastic constraints into the objective; deterministic constraints on the policy itself will always be satisfied by the optimizer, as they are independent of the model."
    }, {
      "heading" : "3.3 Differentiating the optimization solution to a stochastic programming problem",
      "text" : "While the above presentation highlights the simplicity of the proposed approach, it avoids the issue of chief technical challenge to this approach, which is computing the gradient of an objective that depends upon the argmin operation z?(x; ✓). Specifically, we need to compute the term\n@L\n@✓\n=\n@L\n@z\n?\n@z\n?\n@✓\n(6)\nwhich involves the Jacobian @z ?\n@✓ . This is the Jacobian of the optimal solution with respect to the distribution parameters ✓. Recent approaches have looked into similar argmin differentiations [28, 29], though the methodology we present here is more general and handles the stochasticity of the objective.\nAt a high level, we begin by writing the KKT optimality conditions of the general stochastic programming problem (3). Differentiating these equations and applying the implicit function theorem gives a set of linear equations that we can solve to obtain the necessary Jacobians (with expectations over the distribution y ⇠ p(y|x; ✓) denoted E\ny✓ , and where g is the vector of inequality constraints)2\n64 r2 z E y✓f(z) +\nnineqX\ni=1\ni r2 z E y✓gi(z) (rzEy✓g(z)) T A T\ndiag( ) (r z E y✓g(z)) diag(Ey✓g(z)) 0\nA 0 0\n3\n75\n2\n64\n@z\n@✓\n@\n@✓\n@⌫\n@✓\n3\n75 =\n2\n64\n@rzEy✓ f(z) @✓ + @\nPnineq i=1 irzEy✓ gi(z)\n@✓\ndiag( ) @Ey✓ g(z) @✓\n0\n3\n75 .\n(7) The terms in these equations look somewhat complex, but fundamentally, the left side gives the optimality conditions of the convex problem, and the right side gives the derivatives of the relevant functions at the achieved solution with respect to the governing parameter ✓. In practice, we calculate the right-hand terms by employing sequential quadratic programming [30] to find the optimal policy z ?\n(x; ✓) for the given parameters ✓, using a recently-proposed approach for fast solution of the argmin differentiation for QPs [31] to solve the necessary linear equations; we then take the derivatives at the optimum produced by this strategy. Details of this approach are described in the appendix."
    }, {
      "heading" : "4 Experiments",
      "text" : "We consider three applications of our task-based method: a synthetic inventory stock problem, a real-world energy scheduling task, and a real-world battery arbitrage task. We demonstrate that the task-based end-to-end approach can substantially improve upon other alternatives. Source code for all experiments is available at https://github.com/locuslab/e2e-model-learning."
    }, {
      "heading" : "4.1 Inventory stock problem",
      "text" : "Problem definition To highlight the performance of the algorithm in a setting where the true underlying model is known to us, we consider a “conditional” variation of the classical inventory stock problem [4]. In this problem, a company must order some quantity z of a product to minimize costs over some stochastic demand y, whose distribution in turn is affected by some observed features x (Figure 1a). There are linear and quadratic costs on the amount of product ordered, plus different linear/quadratic costs on over-orders [z y]+ and under-orders [y z]+. The objective is given by\nf\nstock (y, z) = c0z + 1\n2\nq0z 2 + c b [y z]+ + 1\n2\nq\nb ([y z]+)2 + ch[z y]+ + 1\n2\nq\nh ([z y]+)2, (8)\nwhere [v]+ ⌘ max{v, 0}. For a specific choice of probability model p(y|x; ✓), our proxy stochastic programming problem can then be written as\nminimize\nz\nE y⇠p(y|x;✓)[fstock(y, z)]. (9)\nTo simplify the setting, we further assume that the demands are discrete, taking on values d1, . . . , dk with probabilities (conditional on x) (p\n✓\n)\ni ⌘ p(y = d i |x; ✓). Thus our stochastic programming problem (9) can be written succinctly as a joint quadratic program3\nminimize z2R,zb,zh2Rk c0z +\n1\n2\nq0z 2 +\nkX\ni=1\n(p\n✓\n)\ni\n✓ c\nb\n(z\nb\n)\ni\n+\n1\n2\nq\nb\n(z\nb\n) 2 i + c h (z h ) i + 1\n2\nq\nh\n(z\nh\n) 2 i\n◆\nsubject to d z1  z b , z1 d  z h , z, z h , z b 0.\n(10)\nFurther details of this approach are given in the appendix.\nExperimental setup We examine our algorithm under two main conditions: where the true model is linear, and where it is nonlinear. In all cases, we generate problem instances by randomly sampling some x 2 Rn and then generating p(y|x; ✓) according to either p(y|x; ✓) / exp(⇥Tx) (linear true model) or p(y|x; ✓) / exp((⇥Tx)2) (nonlinear true model) for some ⇥ 2 Rn⇥k. We compare the following approaches on these tasks: 1) the QP allocation based upon the true model (which performs optimally); 2) MLE approaches (with linear or nonlinear probability models) that fit a model to the data, and then compute the allocation by solving the QP; 3) pure end-to-end policy-optimizing models (using linear or nonlinear hypotheses for the policy); and 4) our task-based learning models (with linear or nonlinear probability models). In all cases, we evaluate test performance by running on 1000 random examples, and evaluate performance over 10 folds of different true ✓? parameters.\nFigures 2(a) and (b) show the performance of these methods given a linear true model, with linear and nonlinear model hypotheses, respectively. As expected, the linear MLE approach performs best, as the true underlying model is in the class of distributions that it can represent and thus solving the stochastic programming problem is a very strong proxy for solving the true optimization problem under the real distribution. While the true model is also contained within the nonlinear MLE’s generic nonlinear distribution class, we see that this method requires more data to converge, and when given less data makes error tradeoffs that are ultimately not the correct tradeoffs for the task at hand; our task-based approach thus outperforms this approach. The task-based approach also substantially outperforms the policy-optimizing neural network, highlighting the fact that it is more data-efficient to run the learning process “through” a reasonable model. Note that here it does not make a difference whether we use the linear or nonlinear model in the task-based approach.\nFigures 2(c) and (d) show performance in the case of a nonlinear true model, with linear and nonlinear model hypotheses, respectively. Case (c) represents the “non-realizable” case, where the true underlying distribution cannot be represented by the model hypothesis class. Here, the linear MLE, as expected, performs very poorly: it cannot capture the true underlying distribution, and thus the resultant stochastic programming solution would not be expected to perform well. The linear policy model similarly performs poorly. Importantly, the task-based approach with the linear model performs much better here: despite the fact that it still has a misspecified model, the task-based nature of the learning process lets us learn a different linear model than the MLE version, which is\n3This is referred to as a two-stage stochastic programming problem (though a very trivial example of one), where first stage variables consist of the amount of product to buy before observing demand, and second-stage variables consist of how much to sell back or additionally purchase once the true demand has been revealed.\nparticularly tuned to the distribution and loss of the task. Finally, also as to be expected, the non-linear models perform better than the linear models in this scenario, but again with the task-based non-linear model outperforming the nonlinear MLE and end-to-end policy approaches."
    }, {
      "heading" : "4.2 Load forecasting and generator scheduling",
      "text" : "We next consider a more realistic grid-scheduling task, based upon over 8 years of real electrical grid data. In this setting, a power system operator must decide how much electricity generation z 2 R24 to schedule for each hour in the next 24 hours based on some (unknown) distribution over electricity demand (Figure 1b). Given a particular realization y of demand, we impose penalties for both generation excess (\ne ) and generation shortage ( s ), with s\ne . We also add a quadratic regularization term, indicating a preference for generation schedules that closely match demand realizations. Finally, we impose a ramping constraint c\nr restricting the change in generation between consecutive timepoints, reflecting physical limitations associated with quick changes in electricity output levels. These are reasonable proxies for the actual economic costs incurred by electrical grid operators when scheduling generation, and can be written as the stochastic programming problem\nminimize\nz2R24\n24X\ni=1\nE y⇠p(y|x;✓)\n\ns\n[y\ni z i ]+ + e[zi yi]+ + 1\n2\n(z\ni y i )\n2\nsubject to |z i z i 1|  cr 8i,\n(11)\nwhere [v]+ ⌘ max{v, 0}. Assuming (as we will in our model), that yi is a Gaussian random variable with mean µ\ni and variance 2 i , then this expectation has a closed form that can be computed via analytically integrating the Gaussian PDF.4 We then use sequential quadratic programming (SQP) to iteratively approximate the resultant convex objective as a quadratic objective, iterate until convergence, and then compute the necessary Jacobians using the quadratic approximation at the solution, which gives the correct Hessian and gradient terms. Details are given in the appendix.\nTo develop a predictive model, we make use of a highly-tuned load forecasting methodology. Specifically, we input the past day’s electrical load and temperature, the next day’s temperature forecast, and additional features such as non-linear functions of the temperatures, binary indicators of weekends or holidays, and yearly sinusoidal features. We then predict the electrical load over all 24\n4 Part of the philosophy behind applying this approach here is that we know the Gaussian assumption is incorrect: the true underlying load is neither Gaussian distributed nor homoskedastic. However, these assumptions are exceedingly common in practice, as they enable easy model learning and exact analytical solutions. Thus, training the (still Gaussian) system with a task-based loss retains computational tractability while still allowing us to modify the distribution’s parameters to improve actual performance on the task at hand.\nhours of the next day. We employ a 2-hidden-layer neural network for this purpose, with an additional residual connection from the inputs to the outputs initialized to the linear regression solution.\n! ∈ ℝ$\n200\n% ∈ ℝ&'\nPast Load Past Temp\n(Past Temp)2\nFuture Temp (Future Temp)2 (Future Temp)3\n((Weekday) ((Holiday) ((DST)\nsin(2-.× DOY) cos(2-× DOY)\nFuture Load\n200\npure policy-optimizing network is not shown, as it could not sufficiently learn the ramp constraints. We could not obtain good performance for the policy optimizer even ignoring this infeasibility.)\nFigure 4 shows the performance of the three models. As expected, the RMSE model performs best with respect to the RMSE of its predictions (its objective). However, the task-based model substantially outperforms the RMSE model when evaluated on task loss, the actual objective that the system operator cares about: specifically, we improve upon the performance of the traditional stochastic programming method by 38.6%. The cost-weighted RMSE’s performance is extremely variable, and overall, the task net improves upon this method by 8.6%."
    }, {
      "heading" : "4.3 Price forecasting and battery storage",
      "text" : "Finally, we consider a battery arbitrage task, based upon 6 years of real electrical grid data. Here, a grid-scale battery must operate over a 24 hour period based on some (unknown) distribution over future electricity prices (Figure 1c). For each hour, the operator must decide how much to charge (zin 2 R24) or discharge (zout 2 R24) the battery, thus inducing a particular state of charge in the battery (zstate 2 R24). Given a particular realization y of prices, the operator optimizes over: 1) profits, 2) flexibility to participate in other markets, by keeping the battery near half its capacity B (with weight ), and 3) battery health, by discouraging rapid charging/discharging (with weight ✏,\n5It is worth noting that a cost-weighted RMSE approach is only possible when direct costs can be assigned independently to each decision point, i.e. when costs do not depend on multiple decision points (as in this experiment). Our task-based method, however, accommodates the (typical) more general setting.\n✏ < ). The battery also has a charging efficiency ( eff), limits on speed of charge (cin) and discharge (cout), and begins at half charge. This can be written as the stochastic programming problem\nminimize zin,zout,zstate2R24 E y⇠p(y|x;✓)\n\" 24X\ni=1\ny\ni (zin zout)i + zstate\nB\n2\n2 + ✏kzink2 + ✏kzoutk2 #\nsubject to zstate,i+1 = zstate,i zout,i + effzin,i 8i, zstate,1 = B/2, 0  zin  cin, 0  zout  cout, 0  zstate  B.\n(12)\nAssuming (as we will in our model) that y i is a random variable with mean µ i , then this expectation has a closed form that depends only on the mean. Further details are given in the appendix.\nTo develop a predictive model for the mean, we use an architecture similar to that described in Section 4.2. In this case, we input the past day’s prices and temperature, the next day’s load forecasts and temperature forecasts, and additional features such as non-linear functions of the temperatures and temporal features similar to those in Section 4.2. We again train the model to minimize the mean squared error between the model’s predictions and the actual prices (giving the mean prediction µ\ni ), using about 5 years of data to train the model and 1 subsequent year for testing. Using the mean predictions of this base model, we then solve the storage scheduling problem by solving the optimization problem (12), again learning network parameters by minimizing the task loss. We compare against a traditional stochastic programming model that minimizes just the RMSE.\nTable 1 shows the performance of the two models. As energy prices are difficult to predict due to numerous outliers and price spikes, the models in this case are not as well-tuned as in our load forecasting experiment; thus, their performance is relatively variable. Even then, in all cases, our task-based model demonstrates better average performance than the RMSE model when evaluated on task loss, the objective most important to the battery operator (although the improvements are not statistically significant). More interestingly, our task-based method shows less (and in some cases, far less) variability in performance than the RMSE-minimizing method. Qualitatively, our task-based method hedges against perverse events such as price spikes that could substantially affect the performance of a battery charging schedule. The task-based method thus yields more reliable performance than a pure RMSE-minimizing method in the case the models are inaccurate due to a high level of stochasticity in the prediction task."
    }, {
      "heading" : "5 Conclusions and future work",
      "text" : "This paper proposes an end-to-end approach for learning machine learning models that will be used in the loop of a larger process. Specifically, we consider training probabilistic models in the context of stochastic programming to directly capture a task-based objective. Preliminary experiments indicate that our task-based learning model substantially outperforms MLE and policy-optimizing approaches in all but the (rare) case that the MLE model “perfectly” characterizes the underlying distribution. Our method also achieves a 38.6% performance improvement over a highly-optimized real-world stochastic programming algorithm for scheduling electricity generation based on predicted load. In the case of energy price prediction, where there is a high degree of inherent stochasticity in the problem, our method demonstrates more reliable task performance than a traditional predictive method. The task-based approach thus demonstrates promise in optimizing in-the-loop predictions. Future work includes an extension of our approach to stochastic learning models with multiple rounds, and further to model predictive control and full reinforcement learning settings."
    }, {
      "heading" : "Acknowledgments",
      "text" : "This material is based upon work supported by the National Science Foundation Graduate Research Fellowship Program under Grant No. DGE1252522, and by the Department of Energy Computational Science Graduate Fellowship."
    } ],
    "references" : [ {
      "title" : "Stochastic programming models in energy",
      "author" : [ "Stein W Wallace", "Stein-Erik Fleten" ],
      "venue" : "Handbooks in operations research and management science,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2003
    }, {
      "title" : "Stochastic optimization models in finance, volume 1",
      "author" : [ "William T Ziemba", "Raymond G Vickson" ],
      "venue" : "World Scientific,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2006
    }, {
      "title" : "Stochastic models of manufacturing systems, volume",
      "author" : [ "John A Buzacott", "J George Shanthikumar" ],
      "venue" : null,
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 1993
    }, {
      "title" : "A tutorial on stochastic programming",
      "author" : [ "Alexander Shapiro", "Andy Philpott" ],
      "venue" : "Manuscript. Available at www2.isye.gatech.edu/ashapiro/publications.html,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2007
    }, {
      "title" : "The empirical behavior of sampling methods for stochastic programming",
      "author" : [ "Jeff Linderoth", "Alexander Shapiro", "Stephen Wright" ],
      "venue" : "Annals of Operations Research,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2006
    }, {
      "title" : "Scenarios and policy aggregation in optimization under uncertainty",
      "author" : [ "R Tyrrell Rockafellar", "Roger J-B Wets" ],
      "venue" : "Mathematics of operations research,",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 1991
    }, {
      "title" : "Off-road obstacle avoidance through end-to-end learning",
      "author" : [ "Yann LeCun", "Urs Muller", "Jan Ben", "Eric Cosatto", "Beat Flepp" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2005
    }, {
      "title" : "Cognitive networks: adaptation and learning to achieve end-to-end performance objectives",
      "author" : [ "Ryan W Thomas", "Daniel H Friend", "Luiz A Dasilva", "Allen B Mackenzie" ],
      "venue" : "IEEE Communications Magazine,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 2006
    }, {
      "title" : "End-to-end scene text recognition",
      "author" : [ "Kai Wang", "Boris Babenko", "Serge Belongie" ],
      "venue" : "In Computer Vision (ICCV),",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2011
    }, {
      "title" : "Deep residual learning for image recognition",
      "author" : [ "Kaiming He", "Xiangyu Zhang", "Shaoqing Ren", "Jian Sun" ],
      "venue" : "In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 2016
    }, {
      "title" : "End-to-end text recognition with convolutional neural networks",
      "author" : [ "Tao Wang", "David J Wu", "Adam Coates", "Andrew Y Ng" ],
      "venue" : "In Pattern Recognition (ICPR),",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2012
    }, {
      "title" : "Towards end-to-end speech recognition with recurrent neural networks",
      "author" : [ "Alex Graves", "Navdeep Jaitly" ],
      "venue" : "In ICML,",
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 2014
    }, {
      "title" : "Deep speech 2: End-toend speech recognition in english and mandarin",
      "author" : [ "Dario Amodei", "Rishita Anubhai", "Eric Battenberg", "Carl Case", "Jared Casper", "Bryan Catanzaro", "Jingdong Chen", "Mike Chrzanowski", "Adam Coates", "Greg Diamos" ],
      "venue" : "arXiv preprint arXiv:1512.02595,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2015
    }, {
      "title" : "End-to-end training of deep visuomotor policies",
      "author" : [ "Sergey Levine", "Chelsea Finn", "Trevor Darrell", "Pieter Abbeel" ],
      "venue" : "Journal of Machine Learning Research,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 2016
    }, {
      "title" : "Value iteration networks",
      "author" : [ "Aviv Tamar", "Sergey Levine", "Pieter Abbeel", "YI WU", "Garrett Thomas" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 2016
    }, {
      "title" : "Local search for multiobjective function optimization: pareto descent method",
      "author" : [ "Ken Harada", "Jun Sakuma", "Shigenobu Kobayashi" ],
      "venue" : "In Proceedings of the 8th annual conference on Genetic and evolutionary computation,",
      "citeRegEx" : "16",
      "shortCiteRegEx" : "16",
      "year" : 2006
    }, {
      "title" : "Multi-objective reinforcement learning using sets of pareto dominating policies",
      "author" : [ "Kristof Van Moffaert", "Ann Nowé" ],
      "venue" : "Journal of Machine Learning Research,",
      "citeRegEx" : "17",
      "shortCiteRegEx" : "17",
      "year" : 2014
    }, {
      "title" : "Multiobjective deep reinforcement learning",
      "author" : [ "Hossam Mossalam", "Yannis M Assael", "Diederik M Roijers", "Shimon Whiteson" ],
      "venue" : "arXiv preprint arXiv:1610.02707,",
      "citeRegEx" : "18",
      "shortCiteRegEx" : "18",
      "year" : 2016
    }, {
      "title" : "Model-based multi-objective reinforcement learning",
      "author" : [ "Marco A Wiering", "Maikel Withagen", "Mădălina M Drugan" ],
      "venue" : "In Adaptive Dynamic Programming and Reinforcement Learning (ADPRL),",
      "citeRegEx" : "19",
      "shortCiteRegEx" : "19",
      "year" : 2014
    }, {
      "title" : "Empirical risk minimization of graphical model parameters given approximate inference, decoding, and model structure",
      "author" : [ "Veselin Stoyanov", "Alexander Ropson", "Jason Eisner" ],
      "venue" : "International Conference on Artificial Intelligence and Statistics,",
      "citeRegEx" : "20",
      "shortCiteRegEx" : "20",
      "year" : 2011
    }, {
      "title" : "Direct loss minimization for structured prediction",
      "author" : [ "Tamir Hazan", "Joseph Keshet", "David A McAllester" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "21",
      "shortCiteRegEx" : "21",
      "year" : 2010
    }, {
      "title" : "Training deep neural networks via direct loss minimization",
      "author" : [ "Yang Song", "Alexander G Schwing", "Richard S Zemel", "Raquel Urtasun" ],
      "venue" : "In Proceedings of The 33rd International Conference on Machine Learning,",
      "citeRegEx" : "22",
      "shortCiteRegEx" : "22",
      "year" : 2016
    }, {
      "title" : "Reinforcement learning with unsupervised auxiliary tasks",
      "author" : [ "Max Jaderberg", "Volodymyr Mnih", "Wojciech Marian Czarnecki", "Tom Schaul", "Joel Z Leibo", "David Silver", "Koray Kavukcuoglu" ],
      "venue" : "arXiv preprint arXiv:1611.05397,",
      "citeRegEx" : "23",
      "shortCiteRegEx" : "23",
      "year" : 2016
    }, {
      "title" : "Goal-driven dynamics learning via bayesian optimization",
      "author" : [ "Somil Bansal", "Roberto Calandra", "Ted Xiao", "Sergey Levine", "Claire J Tomlin" ],
      "venue" : "arXiv preprint arXiv:1703.09260,",
      "citeRegEx" : "24",
      "shortCiteRegEx" : "24",
      "year" : 2017
    }, {
      "title" : "Model-agnostic meta-learning for fast adaptation of deep networks",
      "author" : [ "Chelsea Finn", "Pieter Abbeel", "Sergey Levine" ],
      "venue" : "arXiv preprint arXiv:1703.03400,",
      "citeRegEx" : "25",
      "shortCiteRegEx" : "25",
      "year" : 2017
    }, {
      "title" : "Using a financial training criterion rather than a prediction criterion",
      "author" : [ "Yoshua Bengio" ],
      "venue" : "International Journal of Neural Systems,",
      "citeRegEx" : "26",
      "shortCiteRegEx" : "26",
      "year" : 1997
    }, {
      "title" : "Smart \"predict, then optimize",
      "author" : [ "Adam N Elmachtoub", "Paul Grigas" ],
      "venue" : "arXiv preprint arXiv:1710.08005,",
      "citeRegEx" : "27",
      "shortCiteRegEx" : "27",
      "year" : 2017
    }, {
      "title" : "On differentiating parameterized argmin and argmax problems with application to bi-level optimization",
      "author" : [ "Stephen Gould", "Basura Fernando", "Anoop Cherian", "Peter Anderson", "Rodrigo Santa Cruz", "Edison Guo" ],
      "venue" : "arXiv preprint arXiv:1607.05447,",
      "citeRegEx" : "28",
      "shortCiteRegEx" : "28",
      "year" : 2016
    }, {
      "title" : "Input convex neural networks",
      "author" : [ "Brandon Amos", "Lei Xu", "J Zico Kolter" ],
      "venue" : "arXiv preprint arXiv:1609.07152,",
      "citeRegEx" : "29",
      "shortCiteRegEx" : "29",
      "year" : 2016
    }, {
      "title" : "Sequential quadratic programming",
      "author" : [ "Paul T Boggs", "Jon W Tolle" ],
      "venue" : "Acta numerica,",
      "citeRegEx" : "30",
      "shortCiteRegEx" : "30",
      "year" : 1995
    }, {
      "title" : "Optnet: Differentiable optimization as a layer in neural networks",
      "author" : [ "Brandon Amos", "J Zico Kolter" ],
      "venue" : "arXiV preprint arXiv:1703.00443,",
      "citeRegEx" : "31",
      "shortCiteRegEx" : "31",
      "year" : 2017
    }, {
      "title" : "Batch normalization: Accelerating deep network training by reducing internal covariate shift",
      "author" : [ "Sergey Ioffe", "Christian Szegedy" ],
      "venue" : "arXiv preprint arXiv:1502.03167,",
      "citeRegEx" : "32",
      "shortCiteRegEx" : "32",
      "year" : 2015
    }, {
      "title" : "Adam: A method for stochastic optimization",
      "author" : [ "Diederik Kingma", "Jimmy Ba" ],
      "venue" : "arXiv preprint arXiv:1412.6980,",
      "citeRegEx" : "33",
      "shortCiteRegEx" : "33",
      "year" : 2014
    } ],
    "referenceMentions" : [ {
      "referenceID" : 0,
      "context" : "It has applications in many domains such as energy [1], finance [2], and manufacturing [3], where the underlying probability distributions are either known or can be estimated.",
      "startOffset" : 51,
      "endOffset" : 54
    }, {
      "referenceID" : 1,
      "context" : "It has applications in many domains such as energy [1], finance [2], and manufacturing [3], where the underlying probability distributions are either known or can be estimated.",
      "startOffset" : 64,
      "endOffset" : 67
    }, {
      "referenceID" : 2,
      "context" : "It has applications in many domains such as energy [1], finance [2], and manufacturing [3], where the underlying probability distributions are either known or can be estimated.",
      "startOffset" : 87,
      "endOffset" : 90
    }, {
      "referenceID" : 3,
      "context" : "Common considerations include how to best model or approximate the underlying random variable, how to solve the resulting optimization problem, and how to then assess the quality of the resulting (approximate) solution [4].",
      "startOffset" : 219,
      "endOffset" : 222
    }, {
      "referenceID" : 4,
      "context" : "In cases where the underlying probability distribution is known but the objective cannot be solved analytically, it is common to use Monte Carlo sample average approximation methods, which draw multiple iid samples from the underlying probability distribution and then use deterministic optimization methods to solve the resultant problems [5].",
      "startOffset" : 340,
      "endOffset" : 343
    }, {
      "referenceID" : 5,
      "context" : "In cases where the underlying distribution is not known, it is common to learn or estimate some model from observed samples [6].",
      "startOffset" : 124,
      "endOffset" : 127
    }, {
      "referenceID" : 13,
      "context" : "Also highly related to our work are recent efforts in end-to-end policy learning [14], using value iteration effectively as an optimization procedure in similar networks [15], and multi-objective optimization [16, 17, 18, 19].",
      "startOffset" : 81,
      "endOffset" : 85
    }, {
      "referenceID" : 14,
      "context" : "Also highly related to our work are recent efforts in end-to-end policy learning [14], using value iteration effectively as an optimization procedure in similar networks [15], and multi-objective optimization [16, 17, 18, 19].",
      "startOffset" : 170,
      "endOffset" : 174
    }, {
      "referenceID" : 15,
      "context" : "Also highly related to our work are recent efforts in end-to-end policy learning [14], using value iteration effectively as an optimization procedure in similar networks [15], and multi-objective optimization [16, 17, 18, 19].",
      "startOffset" : 209,
      "endOffset" : 225
    }, {
      "referenceID" : 16,
      "context" : "Also highly related to our work are recent efforts in end-to-end policy learning [14], using value iteration effectively as an optimization procedure in similar networks [15], and multi-objective optimization [16, 17, 18, 19].",
      "startOffset" : 209,
      "endOffset" : 225
    }, {
      "referenceID" : 17,
      "context" : "Also highly related to our work are recent efforts in end-to-end policy learning [14], using value iteration effectively as an optimization procedure in similar networks [15], and multi-objective optimization [16, 17, 18, 19].",
      "startOffset" : 209,
      "endOffset" : 225
    }, {
      "referenceID" : 18,
      "context" : "Also highly related to our work are recent efforts in end-to-end policy learning [14], using value iteration effectively as an optimization procedure in similar networks [15], and multi-objective optimization [16, 17, 18, 19].",
      "startOffset" : 209,
      "endOffset" : 225
    }, {
      "referenceID" : 20,
      "context" : "[21] propose methods for optimizing loss criteria in structured prediction that are different from the inference procedure of the prediction algorithm; this work has also recently been extended to deep networks [22].",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 21,
      "context" : "[21] propose methods for optimizing loss criteria in structured prediction that are different from the inference procedure of the prediction algorithm; this work has also recently been extended to deep networks [22].",
      "startOffset" : 211,
      "endOffset" : 215
    }, {
      "referenceID" : 22,
      "context" : "Recent work has also explored using auxiliary prediction losses to satisfy multiple objectives [23], learning 2",
      "startOffset" : 95,
      "endOffset" : 99
    }, {
      "referenceID" : 23,
      "context" : "dynamics models that maximize control performance in Bayesian optimization [24], and learning adaptive predictive models via differentiation through a meta-learning optimization objective [25].",
      "startOffset" : 75,
      "endOffset" : 79
    }, {
      "referenceID" : 24,
      "context" : "dynamics models that maximize control performance in Bayesian optimization [24], and learning adaptive predictive models via differentiation through a meta-learning optimization objective [25].",
      "startOffset" : 188,
      "endOffset" : 192
    }, {
      "referenceID" : 25,
      "context" : "The work we have found in the literature that most closely resembles our approach is the work of Bengio [26], which uses a neural network model for predicting financial prices, and then optimizes the model based on returns obtained via a hedging strategy that employs it.",
      "startOffset" : 104,
      "endOffset" : 108
    }, {
      "referenceID" : 26,
      "context" : "In concurrent work, Elmachtoub and Grigas [27] also propose an approach for tuning model parameters given optimization results, but in the context of linear programming and outside the context of deep networks.",
      "startOffset" : 42,
      "endOffset" : 46
    }, {
      "referenceID" : 25,
      "context" : "Whereas Bengio [26] and Elmachtoub and Grigas [27] use hand-crafted (but differentiable) algorithms to approximately attain some objective given a predictive model, our approach is tightly coupled to stochastic programming, where the explicit objective is to attempt to optimize the desired task cost via an exact optimization routine, but given underlying randomness.",
      "startOffset" : 15,
      "endOffset" : 19
    }, {
      "referenceID" : 26,
      "context" : "Whereas Bengio [26] and Elmachtoub and Grigas [27] use hand-crafted (but differentiable) algorithms to approximately attain some objective given a predictive model, our approach is tightly coupled to stochastic programming, where the explicit objective is to attempt to optimize the desired task cost via an exact optimization routine, but given underlying randomness.",
      "startOffset" : 46,
      "endOffset" : 50
    }, {
      "referenceID" : 25,
      "context" : "(Despite Bengio [26]’s original paper being nearly 20 years old, virtually all follow-on work has focused on the financial application, and not on what we feel is the core idea of using a surrogate model within a task-driven optimization procedure.",
      "startOffset" : 16,
      "endOffset" : 20
    }, {
      "referenceID" : 27,
      "context" : "Recent approaches have looked into similar argmin differentiations [28, 29], though the methodology we present here is more general and handles the stochasticity of the objective.",
      "startOffset" : 67,
      "endOffset" : 75
    }, {
      "referenceID" : 28,
      "context" : "Recent approaches have looked into similar argmin differentiations [28, 29], though the methodology we present here is more general and handles the stochasticity of the objective.",
      "startOffset" : 67,
      "endOffset" : 75
    }, {
      "referenceID" : 29,
      "context" : "In practice, we calculate the right-hand terms by employing sequential quadratic programming [30] to find the optimal policy",
      "startOffset" : 93,
      "endOffset" : 97
    }, {
      "referenceID" : 30,
      "context" : "z ? (x; ✓) for the given parameters ✓, using a recently-proposed approach for fast solution of the argmin differentiation for QPs [31] to solve the necessary linear equations; we then take the derivatives at the optimum produced by this strategy.",
      "startOffset" : 130,
      "endOffset" : 134
    }, {
      "referenceID" : 3,
      "context" : "1 Inventory stock problem Problem definition To highlight the performance of the algorithm in a setting where the true underlying model is known to us, we consider a “conditional” variation of the classical inventory stock problem [4].",
      "startOffset" : 231,
      "endOffset" : 234
    } ],
    "year" : 2017,
    "abstractText" : "With the increasing popularity of machine learning techniques, it has become common to see prediction algorithms operating within some larger process. However, the criteria by which we train these algorithms often differ from the ultimate criteria on which we evaluate them. This paper proposes an end-to-end approach for learning probabilistic machine learning models in a manner that directly captures the ultimate task-based objective for which they will be used, within the context of stochastic programming. We present three experimental evaluations of the proposed approach: a classical inventory stock problem, a real-world electrical grid scheduling task, and a real-world energy storage arbitrage task. We show that the proposed approach can outperform both traditional modeling and purely black-box policy optimization approaches in these applications.",
    "creator" : null
  }
}