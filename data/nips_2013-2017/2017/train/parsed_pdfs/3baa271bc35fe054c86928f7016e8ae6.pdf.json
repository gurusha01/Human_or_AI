{
  "name" : "3baa271bc35fe054c86928f7016e8ae6.pdf",
  "metadata" : {
    "source" : "META",
    "title" : "Streaming Robust Submodular Maximization: A Partitioned Thresholding Approach",
    "authors" : [ "Slobodan Mitrović", "Ilija Bogunovic", "Ashkan Norouzi-Fard", "Jakub Tarnawski", "Volkan Cevher" ],
    "emails" : [ "slobodan.mitrovic@epfl.ch", "ilija.bogunovic@epfl.ch", "ashkan.norouzifard@epfl.ch", "jakub.tarnawski@epfl.ch", "volkan.cevher@epfl.ch" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "A central challenge in many large-scale machine learning tasks is data summarization – the extraction of a small representative subset out of a large dataset. Applications include image and document summarization [1, 2], influence maximization [3], facility location [4], exemplar-based clustering [5], recommender systems [6], and many more. Data summarization can often be formulated as the problem of maximizing a submodular set function subject to a cardinality constraint.\nOn small datasets, a popular algorithm is the simple greedy method [7], which produces solutions provably close to optimal. Unfortunately, it requires repeated access to all elements, which makes it infeasible for large-scale scenarios, where the entire dataset does not fit in the main memory. In this setting, streaming algorithms prove to be useful, as they make only a small number of passes over the data and use sublinear space.\nIn many settings, the extracted representative set is also required to be robust. That is, the objective value should degrade as little as possible when some elements of the set are removed. Such removals may arise for any number of reasons, such as failures of nodes in a network, or user preferences which the model failed to account for; they could even be adversarial in nature.\n∗e-mail: slobodan.mitrovic@epfl.ch †e-mail: ilija.bogunovic@epfl.ch ‡e-mail: ashkan.norouzifard@epfl.ch §e-mail: jakub.tarnawski@epfl.ch ¶e-mail: volkan.cevher@epfl.ch\n31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\nA robustness requirement is especially challenging for large datasets, where it is prohibitively expensive to reoptimize over the entire data collection in order to find replacements for the removed elements. In some applications, where data is produced so rapidly that most of it is not being stored, such a search for replacements may not be possible at all.\nThese requirements lead to the following two-stage setting. In the first stage, we wish to solve the robust streaming submodular maximization problem – one of finding a small representative subset of elements that is robust against any possible removal of up to m elements. In the second, query stage, after an arbitrary removal of m elements from the summary obtained in the first stage, the goal is to return a representative subset, of size at most k, using only the precomputed summary rather than the entire dataset.\nFor example, (i) in dominating set problem (also studied under influence maximization) we want to efficiently (in a single pass) compute a compressed but robust set of influential users in a social network (whom we will present with free copies of a new product), (ii) in personalized movie recommendation we want to efficiently precompute a robust set of user-preferred movies. Once we discard those users who will not spread the word about our product, we should find a new set of influential users in the precomputed robust summary. Similarly, if some movies turn out not to be interesting for the user, we should still be able to provide good recommendations by only looking into our robust movie summary.\nContributions. In this paper, we propose a two-stage procedure for robust submodular maximization. For the first stage, we design a streaming algorithm which makes one pass over the data and finds a summary that is robust against removal of up to m elements, while containing at most O ( (m log k + k) log2 k ) elements.\nIn the second (query) stage, given any set of sizem that has been removed from the obtained summary, we use a simple greedy algorithm that runs on the remaining elements and produces a solution of size at most k (without needing to access the entire dataset). We prove that this solution satisfies a constant-factor approximation guarantee.\nAchieving this result requires novelty in the algorithm design as well as the analysis. Our streaming algorithm uses a structure where the constructed summary is arranged into partitions consisting of buckets whose sizes increase exponentially with the partition index. Moreover, buckets in different partitions are associated with greedy thresholds, which decrease exponentially with the partition index. Our analysis exploits and combines the properties of the described robust structure and decreasing greedy thresholding rule.\nIn addition to algorithmic and theoretical contributions, we also demonstrate in several practical scenarios that our procedure matches (and in some cases outperforms) the SIEVE-STREAMING algorithm [8] (see Section 5) – even though we allow the latter to know in advance which elements will be removed from the dataset."
    }, {
      "heading" : "2 Problem Statement",
      "text" : "We consider a potentially large universe of elements V of size n equipped with a normalized monotone submodular set function f : 2V → R≥0 defined on V . We say that f is monotone if for any two sets X ⊆ Y ⊆ V we have f(X) ≤ f(Y ). The set function f is said to be submodular if for any two sets X ⊆ Y ⊆ V and any element e ∈ V \\ Y it holds that\nf(X ∪ {e})− f(X) ≥ f(Y ∪ {e})− f(Y ). We use f (Y | X) to denote the marginal gain in the function value due to adding the elements of set Y to set X , i.e. f (Y | X) := f(X ∪ Y )− f(X). We say that f is normalized if f(∅) = 0. The problem of maximizing a monotone submodular function subject to a cardinality constraint, i.e.,\nmax Z⊆V,|Z|≤k f(Z), (1)\nhas been studied extensively. It is well-known that a simple greedy algorithm (henceforth refered to as GREEDY) [7], which starts from an empty set and then iteratively adds the element with highest marginal gain, provides a (1 − e−1)-approximation. However, it requires repeated access to all elements of the dataset, which precludes it from use in large-scale machine learning applications.\nWe say that a set S is robust for a parameter m if, for any set E ⊆ V such that |E| ≤ m, there is a subset Z ⊆ S \\ E of size at most k such that\nf(Z) ≥ cf(OPT(k, V \\ E)),\nwhere c > 0 is an approximation ratio. We use OPT(k, V \\E) to denote the optimal subset of size k of V \\ E (i.e., after the removal of elements in E):\nOPT(k, V \\ E) ∈ argmax Z⊆V \\E,|Z|≤k f(Z).\nIn this work, we are interested in solving a robust version of Problem (1) in the setting that consists of the following two stages: (i) streaming and (ii) query stage.\nIn the streaming stage, elements from the ground set V arrive in a streaming fashion in an arbitrary order. Our goal is to design a one-pass streaming algorithm that has oracle access to f and retains a small set S of elements in memory. In addition, we want S to be a robust summary, i.e., S should both contain elements that maximize the objective value, and be robust against the removal of prespecified number of elements m. In the query stage, after any set E of size at most m is removed from V , the goal is to return a set Z ⊆ S \\ E of size at most k such that f(Z) is maximized. Related work. A robust, non-streaming version of Problem (1) was first introduced in [9]. In that setting, the algorithm must output a set Z of size k which maximizes the smallest objective value guaranteed to be obtained after a set of size m is removed, that is,\nmax Z⊆V,|Z|≤k min E⊆Z,|E|≤m\nf(Z \\ E).\nThe work [10] provides the first constant (0.387) factor approximation result to this problem, valid for m = o( √ k). Their solution consists of buckets of size O(m2 log k) that are constructed greedily, one after another. Recently, in [11], a centralized algorithm PRO has been proposed that achieves the same approximation result and allows for a greater robustness m = o(k). PRO constructs a set that is arranged into partitions consisting of buckets whose sizes increase exponentially with the partition index. In this work, we use a similar structure for the robust set but, instead of filling the buckets greedily one after another, we place an element in the first bucket for which the gain of adding the element is above the corresponding threshold. Moreover, we introduce a novel analysis that allows us to be robust to any number of removals m as long as we are allowed to use O(m log2 k) memory.\nRecently, submodular streaming algorithms (e.g. [5], [12] and [13]) have become a prominent option for scaling submodular optimization to large-scale machine learning applications. A popular submodular streaming algorithm SIEVE-STREAMING [8] solves Problem (1) by performing one pass over the data, and achieves a (0.5− )-approximation while storing at most O ( k log k ) elements.\nOur algorithm extends the algorithmic ideas of SIEVE-STREAMING, such as greedy thresholding, to the robust setting. In particular, we introduce a new exponentially decreasing thresholding scheme that, together with an innovative analysis, allows us to obtain a constant-factor approximation for the robust streaming problem.\nRecently, robust versions of submodular maximization have been considered in the problems of influence maximization (e.g, [3], [14]) and budget allocation ([15]). Increased interest in interactive machine learning methods has also led to the development of interactive and adaptive submodular optimization (see e.g. [16], [17]). Our procedure also contains the interactive component, as we can compute the robust summary only once and then provide different sub-summaries that correspond to multiple different removals (see Section 5.2).\nIndependently and concurrently with our work, [18] gave a streaming algorithm for robust submodular maximization under the cardinality constraint. Their approach provides a 1/2 − ε approximation guarantee. However, their algorithm uses O(mk log k/ε) memory. While the memory requirement of their method increases linearly with k, in the case of our algorithm this dependence is logarithmic."
    }, {
      "heading" : "3 A Robust Two-stage Procedure",
      "text" : "Our approach consists of the streaming Algorithm 1, which we call Streaming Robust submodular algorithm with Partitioned Thresholding (STAR-T). This algorithm is used in the streaming stage, while Algorithm 2, which we call STAR-T-GREEDY, is used in the query stage.\nAs the input, STAR-T requires a non-negative monotone submodular function f , cardinality constraint k, robustness parameter m and thresholding parameter τ . The parameter τ is an αapproximation to f(OPT(k, V \\E)), for some α ∈ (0, 1] to be specified later. Hence, it depends on f(OPT(k, V \\ E)), which is not known a priori. For the sake of clarity, we present the algorithm as if f(OPT(k, V \\ E)) were known, and in Section 4.1 we show how f(OPT(k, V \\ E)) can be approximated. The algorithm makes one pass over the data and outputs a set of elements S that is later used in the query stage in STAR-T-GREEDY.\nThe set S (see Figure 1 for an illustration) is divided into dlog ke+1 partitions, where every partition i ∈ {0, . . . , dlog ke} consists of wdk/2ie buckets Bi,j , j ∈ {1, . . . , wdk/2ie}. Here, w ∈ N+ is a memory parameter that depends on m; we use w ≥ ⌈ 4dlog kem\nk\n⌉ in our asymptotic theory, while\nour numerical results show that w = 1 works well in practice. Every bucket Bi,j stores at most min{k, 2i} elements. If |Bi,j | = min{2i, k}, then we say that Bi,j is full. Every partition has a corresponding threshold that is exponentially decreasing with the partition index i as τ/2i. For example, the buckets in the first partition will only store elements that have marginal value at least τ . Every element e ∈ V arriving on the stream is assigned to the first non-full bucket Bi,j for which the marginal value f (e | Bi,j) is at least τ/2i. If there is no such bucket, the element will not be stored. Hence, the buckets are disjoint sets that in the end (after one pass over the data) can have a smaller number of elements than specified by their corresponding cardinality constraints, and some of them might even be empty. The set S returned by STAR-T is the union of all the buckets.\nIn the second stage, STAR-T-GREEDY receives as input the set S constructed in the streaming stage, a set E ⊂ S that we think of as removed elements, and the cardinality constraint k. The algorithm then returns a set Z, of size at most k, that is obtained by running the simple greedy algorithm GREEDY on the set S \\ E. Note that STAR-T-GREEDY can be invoked for different sets E."
    }, {
      "heading" : "4 Theoretical Bounds",
      "text" : "In this section we discuss our main theoretical results. We initially assume that the value f(OPT(k, V \\ E)) is known; later, in Section 4.1, we remove this assumption. The more detailed versions of our proofs are given in the supplementary material. We begin by stating the main result.\nAlgorithm 1 STreAming Robust - Thresholding submodular algorithm (STAR-T) Input: Set V , k, τ , w ∈ N+\n1: Bi,j ← ∅ for all 0 ≤ i ≤ dlog ke and 1 ≤ j ≤ wdk/2ie 2: for each element e in the stream do 3: for i← 0 to dlog ke do . loop over partitions 4: for j ← 1 to wdk/2ie do . loop over buckets 5: if |Bi,j | < min{2i, k} and f (e | Bi,j) ≥ τ/min{2i, k} then 6: Bi,j ← Bi,j ∪ {e} 7: break: proceed to the next element in the stream 8: S ← ⋃ i,j Bi,j 9: return S\nAlgorithm 2 STAR-T- GREEDY Input: Set S, query set E and k\n1: Z ← GREEDY(k, S \\ E) 2: return Z\nTheorem 4.1 Let f be a normalized monotone submodular function defined over the ground set V . Given a cardinality constraint k and parameter m, for a setting of parameters w ≥\n⌈ 4dlog kem\nk\n⌉ and\nτ = 1\n2+ (1−e−1) (1−e−1/3) ( 1− 1dlog ke )f(OPT(k, V \\ E)), STAR-T performs a single pass over the data set and constructs a set S of size at most O((k + m log k) log k) elements.\nFor such a set S and any set E ⊆ V such that |E| ≤ m, STAR-T-GREEDY yields a set Z ⊆ S \\E of size at most k with\nf(Z) ≥ c · f(OPT(k, V \\ E)), for c = 0.149 ( 1− 1dlog ke ) . Therefore, as k →∞, the value of c approaches 0.149.\nProof sketch. We first consider the case when there is a partition i? in S such that at least half of its buckets are full. We show that there is at least one full bucket Bi?,j such that f (Bi?,j \\ E) is only a constant factor smaller than f(OPT(k, V \\ E)), as long as the threshold τ is set close to f(OPT(k, V \\ E)). We make this statement precise in the following lemma:\nLemma 4.2 If there exists a partition in S such that at least half of its buckets are full, then for the set Z produced by STAR-T-GREEDY we have\nf(Z) ≥ ( 1− e−1 )( 1− 4m\nwk\n) τ. (2)\nTo prove this lemma, we first observe that from the properties of GREEDY it follows that f(Z) = f(GREEDY(k, S \\ E)) ≥ ( 1− e−1 ) f (Bi?,j \\ E) .\nNow it remains to show that f (Bi?,j \\ E) is close to τ . We observe that for any full bucket Bi?,j , we have |Bi?,j | = min{2i, k}, so its objective value f (Bi?,j) is at least τ (every element added to this bucket increases its objective value by at least τ/min{2i, k}). On average, |Bi?,j ∩ E| is relatively small, and hence we can show that there exists some full bucket Bi?,j such that f (Bi?,j \\ E) is close to f (Bi?,j).\nNext, we consider the other case, i.e., when for every partition, more than half of its buckets are not full after the execution of STAR-T. For every partition i, we let Bi denote a bucket that is not fully populated and for which |Bi ∩ E| is minimized over all the buckets of that partition. Then, we look at such a bucket in the last partition: Bdlog ke.\nWe provide two lemmas that depend on f(Bdlog ke). If τ is set to be small compared to f(OPT(k, V \\ E)):\n• Lemma 4.3 shows that if f(Bdlog ke) is close to f(OPT(k, V \\ E)), then our solution is within a constant factor of f(OPT(k, V \\ E)); • Lemma 4.4 shows that if f(Bdlog ke) is small compared to f(OPT(k, V \\ E)), then our\nsolution is again within a constant factor of f(OPT(k, V \\ E)).\nLemma 4.3 If there does not exist a partition of S such that at least half of its buckets are full, then for the set Z produced by STAR-T-GREEDY we have\nf(Z) ≥ ( 1− e−1/3 )( f ( Bdlog ke ) − 4m wk τ ) ,\nwhere Bdlog ke is a not-fully-populated bucket in the last partition that minimizes ∣∣Bdlog ke ∩ E∣∣ and |E| ≤ m.\nUsing standard properties of submodular functions and the GREEDY algorithm we can show that f(Z) = f(GREEDY(k, S \\ E)) ≥ ( 1− e−1/3 )( f ( Bdlog ke ) − 4m wk τ ) .\nThe complete proof of this result can be found in Lemma B.2, in the supplementary material.\nLemma 4.4 If there does not exist a partition of S such that at least half of its buckets are full, then for the set Z produced by STAR-T-GREEDY,\nf(Z) ≥ (1− e−1) ( f(OPT (k, V \\ E))− f(Bdlog ke)− τ ) ,\nwhere Bdlog ke is any not-fully-populated bucket in the last partition.\nTo prove this lemma, we look at two sets X and Y , where Y contains all the elements from OPT(k, V \\ E) that are placed in the buckets that precede bucket Bdlog ke in S, and set X := OPT(k, V \\ E) \\ Y . By monotonicity and submodularity of f , we bound f(Y ) by:\nf(Y ) ≥ f(OPT(k, V \\E))− f(X) ≥ f(OPT(k, V \\E))− f ( Bdlog ke ) − ∑ e∈X f ( e ∣∣ Bdlog ke) .\nTo bound the sum on the right hand side we use that for every e ∈ X we have f ( e ∣∣ Bdlog ke) < τk , which holds due to the fact that Bdlog ke is a bucket in the last partition and is not fully populated.\nWe conclude the proof by showing that f(Z) = f(GREEDY(k, S \\ E)) ≥ ( 1− e−1 ) f(Y ).\nEquipped with the above results, we proceed to prove our main result.\nProof of Theorem 4.1. First, we prove the bound on the size of S:\n|S| = dlog ke∑ i=0 wdk/2iemin{2i, k} ≤ dlog ke∑ i=0 w(k/2i + 1)2i ≤ (log k + 5)wk. (3)\nBy setting w ≥ ⌈ 4dlog kem\nk\n⌉ we obtain S = O((k +m log k) log k).\nNext, we show the approximation guarantee. We first define γ := 4mwk , α1 := ( 1− e−1/3 ) , and\nα2 := ( 1− e−1 ) . Lemma 4.3 and 4.4 provide two bounds on f(Z), one increasing and one decreasing in f(Bdlog ke). By balancing out the two bounds, we derive\nf(Z) ≥ (\nα1α2 α1 + α2\n) (f(OPT(k, V \\ E))− (1 + γ)τ), (4)\nwith equality for f(Bdlog ke) = α2f(OPT(k,V \\E))−(α2−γα1)τ\nα2+α1 .\nNext, as γ ≥ 0, we can observe that Eq. (4) is decreasing, while the bound on f(Z) given by Lemma 4.2 is increasing in τ for γ < 1. Hence, by balancing out the two inequalities, we obtain our final bound\nf(Z) ≥ 12 α2(1−γ) + 1 α1 f(OPT(k, V \\ E)). (5)\nFor w ≥ ⌈ 4dlog kem\nk\n⌉ we have γ ≤ 1/dlog ke, and hence, by substituting α1 and α2 in Eq. (5), we\nprove our main result:\nf(Z) ≥\n( 1− e−1/3 ) ( 1− e−1 ) ( 1− 1dlog ke ) 2 ( 1− e−1/3 ) + (1− e−1) f(OPT(k, V \\ E))\n≥ 0.149 ( 1− 1 dlog ke ) f(OPT(k, V \\ E)).\n2\n4.1 Algorithm without access to f(OPT(k, V \\ E))\nAlgorithm STAR-T requires in its input a parameter τ which is a function of an unknown value f(OPT(k, V \\ E)). To deal with this shortcoming, we show how to extend the idea of [8] of maintaining multiple parallel instances of our algorithm in order to approximate f(OPT(k, V \\ E)). For a given constant > 0, this approach increases the space by a factor of log1+ k and provides a (1 + )-approximation compared to the value obtained in Theorem 4.1. More precisely, we prove the following theorem.\nTheorem 4.5 For any given constant > 0 there exists a parallel variant of STAR-T that makes one pass over the stream and outputs a collection of sets S of total size O ( (k +m log k) log k log1+ k ) with the following property: There exists a set S ∈ S such that applying STAR-T-GREEDY on S yields a set Z ⊆ S \\ E of size at most k with\nf(Z) ≥ 0.149 1 + ( 1− 1 dlog ke ) f(OPT(k, V \\ E)).\nThe proof of this theorem, along with a description of the corresponding algorithm, is provided in Appendix E."
    }, {
      "heading" : "5 Experiments",
      "text" : "In this section, we numerically validate the claims outlined in the previous section. Namely, we test the robustness and compare the performance of our algorithm against the SIEVE-STREAMING algorithm that knows in advance which elements will be removed. We demonstrate improved or matching performance in two different data summarization applications: (i) the dominating set problem, and (ii) personalized movie recommendation. We illustrate how a single robust summary can be used to regenerate recommendations corresponding to multiple different removals."
    }, {
      "heading" : "5.1 Dominating Set",
      "text" : "In the dominating set problem, given a graph G = (V,M), where V represents the set of nodes and M stands for edges, the objective function is given by f(Z) = |N (Z) ∪ Z|, where N (Z) denotes the neighborhood of Z (all nodes adjacent to any node of Z). This objective function is monotone and submodular.\nWe consider two datasets: (i) ego-Twitter [19], consisting of 973 social circles from Twitter, which form a directed graph with 81306 nodes and 1768149 edges; (ii) Amazon product co-purchasing network [20]: a directed graph with 317914 nodes and 1745870 edges.\nGiven the dominating set objective function, we run STAR-T to obtain the robust summary S. Then we compare the performance of STAR-T-GREEDY, which runs on S, against the performance of SIEVE-STREAMING, which we allow to know in advance which elements will be removed. We also compare against a method that chooses the same number of elements as STAR-T, but does so uniformly at random from the set of all elements that will not be removed (V \\ E); we refer to it as RANDOM. Finally, we also demonstrate the peformance of STAR-T-SIEVE, a variant of our algorithm that uses the same robust summary S, but instead of running GREEDY in the second stage, it runs SIEVE-STREAMING on S \\ E.\nFigures 2(a,c) show the objective value after the random removal of k elements from the set S, for different values of k. Note thatE is sampled as a subset of the summary of our algorithm, which hurts the performance of our algorithm more than the baselines. The reported numbers are averaged over 100 iterations. STAR-T-GREEDY, STAR-T-SIEVE and SIEVE-STREAMING perform comparably (STAR-T-GREEDY slightly outperforms the other two), while RANDOM is significantly worse.\nIn Figures 2(b,d) we plot the objective value for different values of k after the removal of 2k elements from the set S, chosen greedily (i.e., by iteratively removing the element that reduces the objective value the most). Again, STAR-T-GREEDY, STAR-T-SIEVE and SIEVE-STREAMING perform comparably, but this time SIEVE-STREAMING slightly outperforms the other two for some values of k. We observe that even when we remove more than k elements from S, the performance of our algorithm is still comparable to the performance of SIEVE-STREAMING (which knows in advance which elements will be removed). We provide additional results in the supplementary material."
    }, {
      "heading" : "5.2 Interactive Personalized Movie Recommendation",
      "text" : "The next application we consider is personalized movie recommendation. We use the MovieLens 1M database [21], which contains 1000209 ratings for 3900 movies by 6040 users. Based on these ratings, we obtain feature vectors for each movie and each user by using standard low-rank matrix completion techniques [22]; we choose the number of features to be 30.\nFor a user u, we use the following monotone submodular function to recommend a set of movies Z: fu(Z) = (1− α) · ∑ z∈Z 〈vu, vz〉+ α · ∑ m∈M max z∈Z 〈vm, vz〉 .\nThe first term aggregates the predicted scores of the chosen movies z ∈ Z for the user u (here vu and vz are non-normalized feature vectors of user u and movie z, respectively). The second term corresponds to a facility-location objective that measures how well the set Z covers the set of all movies M [4]. Finally, α is a user-dependent parameter that specifies the importance of global movie coverage versus high scores of individual movies.\nHere, the robust setting arises naturally since we do not have complete information about the user: when shown a collection of top movies, it will likely turn out that they have watched (but not rated) many of them, rendering these recommendations moot. In such an interactive setting, the user may also require (or exclude) movies of a specific genre, or similar to some favorite movie.\nWe compare the performance of our algorithms STAR-T-GREEDY and STAR-T-SIEVE in such scenarios against two baselines: GREEDY and SIEVE-STREAMING (both being run on the set V \\E, i.e., knowing the removed elements in advance). Note that in this case we are able to afford running\nGREEDY, which may be infeasible when working with larger datasets. Below we discuss two concrete practical scenarios featured in our experiments.\nMovies by genre. After we have built our summary S, the user decides to watch a drama today; we retrieve only movies of this genre from S. This corresponds to removing 59% of the universe V . In Figure 2(f) we report the quality of our output compared to the baselines (for user ID 445 and α = 0.95) for different values of k. The performance of STAR-T-GREEDY is within several percent of the performance of GREEDY (which we can consider as a tractable optimum), and the two sieve-based methods STAR-T-SIEVE and SIEVE-STREAMING display similar objective values.\nAlready-seen movies. We randomly sample a set E of movies already watched by the user (500 out of all 3900 movies). To obtain a realistic subset, each movie is sampled proportionally to its popularity (number of ratings). Figure 2(e) shows the performance of our algorithm faced with the removal of E (user ID = 445, α = 0.9) for a range of settings of k. Again, our algorithm is able to almost match the objective values of GREEDY (which is aware of E in advance).\nRecall that we are able to use the same precomputed summary S for different removed sets E. This summary was built for parameter w = 1, which theoretically allows for up to k removals. However, despite having |E| k in the above scenarios, our performance remains robust; this indicates that our method is more resilient in practice than what the proved bound alone would guarantee."
    }, {
      "heading" : "6 Conclusion",
      "text" : "We have presented a new robust submodular streaming algorithm STAR-T based on a novel partitioning structure and an exponentially decreasing thresholding rule. It makes one pass over the data and retains a set of size O ( (k +m log k) log2 k ) . We have further shown that after the removal of any m elements, a simple greedy algorithm that runs on the obtained set achieves a constant-factor approximation guarantee for robust submodular function maximization. In addition, we have presented two numerical studies where our method compares favorably against the SIEVE-STREAMING algorithm that knows in advance which elements will be removed.\nAcknowledgment. IB and VC’s work was supported in part by the European Research Council (ERC) under the European Union’s Horizon 2020 research and innovation program (grant agreement number 725594), in part by the Swiss National Science Foundation (SNF), project 407540_167319/1, in part by the NCCR MARVEL, funded by the Swiss National Science Foundation, in part by Hasler Foundation Switzerland under grant agreement number 16066 and in part by Office of Naval Research (ONR) under grant agreement number N00014-16-R-BA01. JT’s work was supported by ERC Starting Grant 335288-OptApprox."
    } ],
    "references" : [ {
      "title" : "Learning mixtures of submodular functions for image collection summarization",
      "author" : [ "S. Tschiatschek", "R.K. Iyer", "H. Wei", "J.A. Bilmes" ],
      "venue" : "Advances in neural information processing systems, 2014, pp. 1413–1421.",
      "citeRegEx" : "1",
      "shortCiteRegEx" : null,
      "year" : 2014
    }, {
      "title" : "A class of submodular functions for document summarization",
      "author" : [ "H. Lin", "J. Bilmes" ],
      "venue" : "Assoc. for Comp. Ling.: Human Language Technologies-Volume 1, 2011.",
      "citeRegEx" : "2",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "Maximizing the spread of influence through a social network",
      "author" : [ "D. Kempe", "J. Kleinberg", "É. Tardos" ],
      "venue" : "Int. Conf. on Knowledge Discovery and Data Mining (SIGKDD), 2003.",
      "citeRegEx" : "3",
      "shortCiteRegEx" : null,
      "year" : 2003
    }, {
      "title" : "Leveraging sparsity for efficient submodular data summarization",
      "author" : [ "E. Lindgren", "S. Wu", "A.G. Dimakis" ],
      "venue" : "Advances in Neural Information Processing Systems, 2016, pp. 3414–3422.",
      "citeRegEx" : "4",
      "shortCiteRegEx" : null,
      "year" : 2016
    }, {
      "title" : "Budgeted nonparametric learning from data streams",
      "author" : [ "A. Krause", "R.G. Gomes" ],
      "venue" : "ICML, 2010, pp. 391–398.",
      "citeRegEx" : "5",
      "shortCiteRegEx" : null,
      "year" : 2010
    }, {
      "title" : "Beyond keyword search: discovering relevant scientific literature",
      "author" : [ "K. El-Arini", "C. Guestrin" ],
      "venue" : "Proceedings of the 17th ACM SIGKDD international conference on Knowledge discovery and data mining. ACM, 2011, pp. 439–447.",
      "citeRegEx" : "6",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "An analysis of approximations for maximizing submodular set functions—i",
      "author" : [ "G.L. Nemhauser", "L.A. Wolsey", "M.L. Fisher" ],
      "venue" : "Mathematical Programming, vol. 14, no. 1, pp. 265–294, 1978.",
      "citeRegEx" : "7",
      "shortCiteRegEx" : null,
      "year" : 1978
    }, {
      "title" : "Streaming submodular maximization: Massive data summarization on the fly",
      "author" : [ "A. Badanidiyuru", "B. Mirzasoleiman", "A. Karbasi", "A. Krause" ],
      "venue" : "Proceedings of the 20th ACM SIGKDD. ACM, 2014, pp. 671–680.",
      "citeRegEx" : "8",
      "shortCiteRegEx" : null,
      "year" : 2014
    }, {
      "title" : "Robust submodular observation selection",
      "author" : [ "A. Krause", "H.B. McMahan", "C. Guestrin", "A. Gupta" ],
      "venue" : "Journal of Machine Learning Research, vol. 9, no. Dec, pp. 2761–2801, 2008.",
      "citeRegEx" : "9",
      "shortCiteRegEx" : null,
      "year" : 2008
    }, {
      "title" : "Robust monotone submodular function maximization",
      "author" : [ "J.B. Orlin", "A.S. Schulz", "R. Udwani" ],
      "venue" : "Int. Conf. on Integer Programming and Combinatorial Opt. (IPCO). Springer, 2016.",
      "citeRegEx" : "10",
      "shortCiteRegEx" : null,
      "year" : 2016
    }, {
      "title" : "Robust submodular maximization: A non-uniform partitioning approach",
      "author" : [ "I. Bogunovic", "S. Mitrović", "J. Scarlett", "V. Cevher" ],
      "venue" : "Int. Conf. Mach. Learn. (ICML), 2017.",
      "citeRegEx" : "11",
      "shortCiteRegEx" : null,
      "year" : 2017
    }, {
      "title" : "Fast greedy algorithms in MapReduce and streaming",
      "author" : [ "R. Kumar", "B. Moseley", "S. Vassilvitskii", "A. Vattani" ],
      "venue" : "ACM Transactions on Parallel Computing, vol. 2, no. 3, p. 14, 2015.",
      "citeRegEx" : "12",
      "shortCiteRegEx" : null,
      "year" : 2015
    }, {
      "title" : "An efficient streaming algorithm for the submodular cover problem",
      "author" : [ "A. Norouzi-Fard", "A. Bazzi", "I. Bogunovic", "M. El Halabi", "Y.-P. Hsieh", "V. Cevher" ],
      "venue" : "Adv. Neur. Inf. Proc. Sys. (NIPS), 2016.",
      "citeRegEx" : "13",
      "shortCiteRegEx" : null,
      "year" : 2016
    }, {
      "title" : "Robust influence maximization",
      "author" : [ "W. Chen", "T. Lin", "Z. Tan", "M. Zhao", "X. Zhou" ],
      "venue" : "Proceedings of the ACM SIGKDD, 2016, p. 795.",
      "citeRegEx" : "14",
      "shortCiteRegEx" : null,
      "year" : 2016
    }, {
      "title" : "Robust budget allocation via continuous submodular functions",
      "author" : [ "M. Staib", "S. Jegelka" ],
      "venue" : "Int. Conf. Mach. Learn. (ICML), 2017.",
      "citeRegEx" : "15",
      "shortCiteRegEx" : null,
      "year" : 2017
    }, {
      "title" : "Adaptive submodularity: Theory and applications in active learning and stochastic optimization",
      "author" : [ "D. Golovin", "A. Krause" ],
      "venue" : "Journal of Artificial Intelligence Research, vol. 42, 2011.",
      "citeRegEx" : "16",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "Interactive submodular set cover",
      "author" : [ "A. Guillory", "J. Bilmes" ],
      "venue" : "arXiv preprint arXiv:1002.3345, 2010.",
      "citeRegEx" : "17",
      "shortCiteRegEx" : null,
      "year" : 2010
    }, {
      "title" : "Deletion-robust submodular maximization: Data summarization with “the right to be forgotten",
      "author" : [ "B. Mirzasoleiman", "A. Karbasi", "A. Krause" ],
      "venue" : "International Conference on Machine Learning, 2017, pp. 2449–2458.",
      "citeRegEx" : "18",
      "shortCiteRegEx" : null,
      "year" : 2017
    }, {
      "title" : "Discovering social circles in ego networks",
      "author" : [ "J. Mcauley", "J. Leskovec" ],
      "venue" : "ACM Trans. Knowl. Discov. Data, 2014.",
      "citeRegEx" : "19",
      "shortCiteRegEx" : null,
      "year" : 2014
    }, {
      "title" : "Defining and evaluating network communities based on ground-truth",
      "author" : [ "J. Yang", "J. Leskovec" ],
      "venue" : "Knowledge and Information Systems, vol. 42, no. 1, pp. 181–213, 2015.",
      "citeRegEx" : "20",
      "shortCiteRegEx" : null,
      "year" : 2015
    }, {
      "title" : "The MovieLens datasets: History and context",
      "author" : [ "F.M. Harper", "J.A. Konstan" ],
      "venue" : "ACM Transactions on Interactive Intelligent Systems (TiiS), vol. 5, no. 4, p. 19, 2016.",
      "citeRegEx" : "21",
      "shortCiteRegEx" : null,
      "year" : 2016
    }, {
      "title" : "Missing value estimation methods for DNA microarrays",
      "author" : [ "O. Troyanskaya", "M. Cantor", "G. Sherlock", "P. Brown", "T. Hastie", "R. Tibshirani", "D. Botstein", "R.B. Altman" ],
      "venue" : "Bioinformatics, vol. 17, no. 6, pp. 520–525, 2001. 10",
      "citeRegEx" : "22",
      "shortCiteRegEx" : null,
      "year" : 2001
    } ],
    "referenceMentions" : [ {
      "referenceID" : 0,
      "context" : "Applications include image and document summarization [1, 2], influence maximization [3], facility location [4], exemplar-based clustering [5], recommender systems [6], and many more.",
      "startOffset" : 54,
      "endOffset" : 60
    }, {
      "referenceID" : 1,
      "context" : "Applications include image and document summarization [1, 2], influence maximization [3], facility location [4], exemplar-based clustering [5], recommender systems [6], and many more.",
      "startOffset" : 54,
      "endOffset" : 60
    }, {
      "referenceID" : 2,
      "context" : "Applications include image and document summarization [1, 2], influence maximization [3], facility location [4], exemplar-based clustering [5], recommender systems [6], and many more.",
      "startOffset" : 85,
      "endOffset" : 88
    }, {
      "referenceID" : 3,
      "context" : "Applications include image and document summarization [1, 2], influence maximization [3], facility location [4], exemplar-based clustering [5], recommender systems [6], and many more.",
      "startOffset" : 108,
      "endOffset" : 111
    }, {
      "referenceID" : 4,
      "context" : "Applications include image and document summarization [1, 2], influence maximization [3], facility location [4], exemplar-based clustering [5], recommender systems [6], and many more.",
      "startOffset" : 139,
      "endOffset" : 142
    }, {
      "referenceID" : 5,
      "context" : "Applications include image and document summarization [1, 2], influence maximization [3], facility location [4], exemplar-based clustering [5], recommender systems [6], and many more.",
      "startOffset" : 164,
      "endOffset" : 167
    }, {
      "referenceID" : 6,
      "context" : "On small datasets, a popular algorithm is the simple greedy method [7], which produces solutions provably close to optimal.",
      "startOffset" : 67,
      "endOffset" : 70
    }, {
      "referenceID" : 7,
      "context" : "In addition to algorithmic and theoretical contributions, we also demonstrate in several practical scenarios that our procedure matches (and in some cases outperforms) the SIEVE-STREAMING algorithm [8] (see Section 5) – even though we allow the latter to know in advance which elements will be removed from the dataset.",
      "startOffset" : 198,
      "endOffset" : 201
    }, {
      "referenceID" : 6,
      "context" : "It is well-known that a simple greedy algorithm (henceforth refered to as GREEDY) [7], which starts from an empty set and then iteratively adds the element with highest marginal gain, provides a (1 − e−1)-approximation.",
      "startOffset" : 82,
      "endOffset" : 85
    }, {
      "referenceID" : 8,
      "context" : "A robust, non-streaming version of Problem (1) was first introduced in [9].",
      "startOffset" : 71,
      "endOffset" : 74
    }, {
      "referenceID" : 9,
      "context" : "The work [10] provides the first constant (0.",
      "startOffset" : 9,
      "endOffset" : 13
    }, {
      "referenceID" : 10,
      "context" : "Recently, in [11], a centralized algorithm PRO has been proposed that achieves the same approximation result and allows for a greater robustness m = o(k).",
      "startOffset" : 13,
      "endOffset" : 17
    }, {
      "referenceID" : 4,
      "context" : "[5], [12] and [13]) have become a prominent option for scaling submodular optimization to large-scale machine learning applications.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 11,
      "context" : "[5], [12] and [13]) have become a prominent option for scaling submodular optimization to large-scale machine learning applications.",
      "startOffset" : 5,
      "endOffset" : 9
    }, {
      "referenceID" : 12,
      "context" : "[5], [12] and [13]) have become a prominent option for scaling submodular optimization to large-scale machine learning applications.",
      "startOffset" : 14,
      "endOffset" : 18
    }, {
      "referenceID" : 7,
      "context" : "A popular submodular streaming algorithm SIEVE-STREAMING [8] solves Problem (1) by performing one pass over the data, and achieves a (0.",
      "startOffset" : 57,
      "endOffset" : 60
    }, {
      "referenceID" : 2,
      "context" : "g, [3], [14]) and budget allocation ([15]).",
      "startOffset" : 3,
      "endOffset" : 6
    }, {
      "referenceID" : 13,
      "context" : "g, [3], [14]) and budget allocation ([15]).",
      "startOffset" : 8,
      "endOffset" : 12
    }, {
      "referenceID" : 14,
      "context" : "g, [3], [14]) and budget allocation ([15]).",
      "startOffset" : 37,
      "endOffset" : 41
    }, {
      "referenceID" : 17,
      "context" : "Independently and concurrently with our work, [18] gave a streaming algorithm for robust submodular maximization under the cardinality constraint.",
      "startOffset" : 46,
      "endOffset" : 50
    }, {
      "referenceID" : 7,
      "context" : "To deal with this shortcoming, we show how to extend the idea of [8] of maintaining multiple parallel instances of our algorithm in order to approximate f(OPT(k, V \\ E)).",
      "startOffset" : 65,
      "endOffset" : 68
    }, {
      "referenceID" : 18,
      "context" : "We consider two datasets: (i) ego-Twitter [19], consisting of 973 social circles from Twitter, which form a directed graph with 81306 nodes and 1768149 edges; (ii) Amazon product co-purchasing network [20]: a directed graph with 317914 nodes and 1745870 edges.",
      "startOffset" : 42,
      "endOffset" : 46
    }, {
      "referenceID" : 19,
      "context" : "We consider two datasets: (i) ego-Twitter [19], consisting of 973 social circles from Twitter, which form a directed graph with 81306 nodes and 1768149 edges; (ii) Amazon product co-purchasing network [20]: a directed graph with 317914 nodes and 1745870 edges.",
      "startOffset" : 201,
      "endOffset" : 205
    }, {
      "referenceID" : 20,
      "context" : "We use the MovieLens 1M database [21], which contains 1000209 ratings for 3900 movies by 6040 users.",
      "startOffset" : 33,
      "endOffset" : 37
    }, {
      "referenceID" : 21,
      "context" : "Based on these ratings, we obtain feature vectors for each movie and each user by using standard low-rank matrix completion techniques [22]; we choose the number of features to be 30.",
      "startOffset" : 135,
      "endOffset" : 139
    }, {
      "referenceID" : 3,
      "context" : "The second term corresponds to a facility-location objective that measures how well the set Z covers the set of all movies M [4].",
      "startOffset" : 125,
      "endOffset" : 128
    } ],
    "year" : 2017,
    "abstractText" : "We study the classical problem of maximizing a monotone submodular function subject to a cardinality constraint k, with two additional twists: (i) elements arrive in a streaming fashion, and (ii) m items from the algorithm’s memory are removed after the stream is finished. We develop a robust submodular algorithm STAR-T. It is based on a novel partitioning structure and an exponentially decreasing thresholding rule. STAR-T makes one pass over the data and retains a short but robust summary. We show that after the removal of any m elements from the obtained summary, a simple greedy algorithm STAR-T-GREEDY that runs on the remaining elements achieves a constant-factor approximation guarantee. In two different data summarization tasks, we demonstrate that it matches or outperforms existing greedy and streaming methods, even if they are allowed the benefit of knowing the removed subset in advance.",
    "creator" : null
  }
}