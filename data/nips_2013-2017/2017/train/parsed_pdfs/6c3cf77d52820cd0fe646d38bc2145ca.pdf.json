{
  "name" : "6c3cf77d52820cd0fe646d38bc2145ca.pdf",
  "metadata" : {
    "source" : "META",
    "title" : "Deanonymization in the Bitcoin P2P Network",
    "authors" : [ "Giulia Fanti", "Pramod Viswanath" ],
    "emails" : [ "(gfanti@andrew.cmu.edu)", "(pramodv@illinois.edu)" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "The Bitcoin cryptocurrency has seen widespread adoption, due in part to its reputation as a privacypreserving financial system [17, 22]. In practice, though, Bitcoin exhibits serious privacy vulnerabilities [3, 19, 27, 28, 24]. Most of these vulnerabilities arise because of two key properties: (1) Bitcoin associates each user with a pseudonym, and (2) pseudonyms can be linked to financial transactions through a public transaction ledger, called the blockchain [23]. If an attacker can associate a pseudonym with a human identity, the attacker may learn the user’s transaction history.\nIn practice, there are several ways to link a user to her Bitcoin pseudonym. The most commonlystudied methods analyze transaction patterns in the public blockchain, and link those patterns using side information [3, 19, 27, 28, 24]. In this paper, we are interested in a lower-layer vulnerability: the networking stack. Like most cryptocurrencies, Bitcoin nodes communicate over a P2P network [23]. Whenever a user (Alice) generates a transaction (i.e., sends bitcoins to another user, Bob), she first creates a “transaction message” that contains her pseudonym, Bob’s pseudonym, and the transaction amount. Alice subsequently floods this transaction message over the P2P network, which enables other users to validate her transaction and incorporate it into the global blockchain.\nThe anonymity implications of transaction broadcasting were largely ignored until recently, when researchers demonstrated practical deanonymization attacks on the P2P network [6, 15]. These attacks use a “supernode” to connect to all active Bitcoin nodes and listen to the transaction traffic they relay [15, 6, 7]. By using simple estimators to infer the source IP of each transaction broadcast, this eavesdropper adversary was able to link IP addresses to Bitcoin pseudonyms with an accuracy of up to 30% [6]. We refer to such linkage as deanonymization.\nGiulia Fanti (gfanti@andrew.cmu.edu) is in the ECE Department at Carnegie Mellon University. Pramod Viswanath (pramodv@illinois.edu) is in the ECE Department at the University of Illinois at UrbanaChampaign. This work was funded by NSF grant CCF-1705007.\n31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\nIn 2015, the Bitcoin community responded to these attacks by changing its flooding protocols from a gossip-style protocol known as trickle spreading to a diffusion spreading protocol that spreads content with independent exponential delays [1]. We define these protocols precisely in Section 2. However, no systematic motivation was provided for this shift. Indeed, it is unclear whether the change actually defends against the deanonymization attacks in [6, 15].\nProblem and contributions. The main point of our paper is to show that Bitcoin’s flooding protocols have poor anonymity properties, and the community’s shift from trickle spreading (pre-2015) to diffusion spreading (post-2015) did not help the situation. The problem of deanonymizing a user in this context is mathematically equivalent to inferring the source of a random spreading process over a graph, given partial observations of the spread. The optimal (maximum-likelihood) sourceidentification algorithms change between spreading protocols; identifying such algorithms and quantifying their accuracy is the primary focus of this work. We find that despite having different maximum-likelihood estimators, trickle and diffusion exhibit roughly the same, poor anonymity properties. Our specific contributions are threefold:\n(1) Modeling. We model the Bitcoin P2P network and an eavesdropper adversary, whose capabilities reflect recent practical attacks in [6, 15]. Most Bitcoin network protocols are not explicitly documented, so modeling the system requires parsing a combination of documentation, papers, and code. Several of the resulting models are new to the epidemic source detection literature.\n(2) Analysis of Trickle (Pre-2015). We analyze the probability of deanonymization by an eavesdropper adversary under trickle propagation. Our analysis is conducted over a regular tree-structured network. Although the Bitcoin network topology is not a regular tree, we show in Section 2 that regular trees are a reasonable first-order model. We consider graph-independent estimators (e.g., the first-timestamp estimator), as well as maximum-likelihood estimators; both are defined precisely in Section 2. Our analysis suggests that although the first-timestamp estimator performs poorly on high-degree trees, maximum-likelihood estimators achieve high probabilities of detection for trees of any degree d.\n(3) Analysis of Diffusion (Post-2015). We conduct a similar analysis of diffusion spreading, which was adopted in 2015 as a fix for the anonymity weaknesses observed under trickle propagation [6, 15]. The analysis of diffusion requires different theoretical tools, including nonlinear differential equations and generalized Pòlya urns. Although the analysis techniques and attack mechanisms are different, we find that the anonymity properties of diffusion are similar to those of trickle. Namely, the first-timestamp estimator’s probability of detection decays to 0 as degree d grows, but the maximum-likelihood probability of detection remains high (in particular, non-vanishing) even as d ! 1."
    }, {
      "heading" : "2 Model and related work",
      "text" : "Network model. We model the P2P network of Bitcoin nodes as a graph G(V,E), where V is the set of all server nodes and E is the set of edges, or connections, between them. Each server is represented by a (IP address, port) tuple; it can establish up to eight outgoing connections to other Bitcoin nodes [6, 2]. The resulting sparse random graph between nodes can be modeled approximately as a 16-regular graph; in practice, the average degree is closer to 8 due to nonhomogeneities across nodes [20]. The graph is locally tree-like and (approximately) regular. For this reason, regular trees are a natural class of graphs to study. In our theoretical analysis, we model G as a d-regular tree. We validate this choice by running simulations on a snapshot of the true Bitcoin network [20] (Section 5).\nSpreading protocols. Each transaction must be broadcast over the network; we analyze the spread of a single message originating from source node v⇤ 2 V . Without loss of generality, we label v⇤ as node ‘0’ when iterating over nodes. At time t = 0, the message starts spreading according to one of two randomized protocols: trickle (pre-2015) or diffusion (post-2015).\nTrickle spreading is a gossip-based flooding protocol. Each source or relay chooses a neighboring peer (called the ‘trickle’ node) uniformly at random, every 200 ms. If the trickle node has not yet received the message, the sender forwards the message [6].1 We model this by considering a canonical, simpler spreading protocol of round-robin gossip. In round-robin gossip, each source or relay randomly orders its neighbors who have not yet seen the message; we call these uninfected neighbors. In each successive (discrete) timestep, the node transmits the message to the next neighbor\n1This description omits some details of trickle spreading, which we do not consider in our analysis. For example, with probability 1/4, each relay forwards the message instantaneously to its neighbors without trickling.\nin its ordering. Thus, if a node has d neighbors, all d neighbors will receive the message within d timesteps. This differs from trickle spreading, where the time-to-infection is a coupon collector’s problem, and therefore takes ⇥(d log d) timesteps in expectation [8]. We will henceforth abuse terminology by referring to round-robin gossip as trickle spreading.\nIn diffusion, each source or relay node transmits the message to each of its uninfected neighbors with an independent, exponential delay of rate . In practice, Bitcoin uses a higher rate on outgoing edges than incoming ones [2]; we omit this distinction in our model. We assume a continuous-time system, with each node starting the exponential clocks upon receipt (or creation) of a message.\nFor both protocols, we let X v denote the timestamp at which node v 2 V receives a given message. Note that server nodes cannot be infected more than once. We assume the message originates at time t = 0, so X\nv\n⇤ = X\n0 = 0. Moreover, we let G t (V t , E t ) denote the infected subgraph of G at time t, or the subgraph of nodes who have received the message (but not necessarily reported it to the adversary) by time t.\nAdversarial model. The adversary’s goal is to link a message with the source (IP address, port)—i.e., to identify the source node v⇤ 2 V . We consider an eavesdropper adversary, whose capabilities are modeled on the practical deanonymization attacks in [6, 15]. These attacks use a supernode that connects to most of the servers in the Bitcoin network. It can make multiple connections to each honest server, with each connection coming from a different (IP address, port). Hence, the honest server does not realize that the supernode’s connections are all from the same entity. We model this by assuming that the eavesdropper adversary makes a fixed number ✓ of connections to each server, where ✓ 1. We do not include these adversarial connections in the original server graph G, so G remains a d-regular graph (see Figure 1). The supernode can learn the network structure between servers [6], so we assume that G(V,E) is known to the eavesdropper.\nThe supernode in [6, 15] observes the timestamps at which messages are relayed from each honest server, without relaying or transmitting content. If the adversary maintains multiple active connections to each server (✓ > 1), it receives the message ✓ times from each server. We let ⌧ v\ndenote the time at which the adversary first observes the message from node v 2 V . We let ⌧ = (⌧\nv\n) v2V denote the set of all observed first-timestamps. We assume timestamps are relative to time t = 0, i.e., the adversary knows when the message started spreading.\nSource estimation. The adversary’s goal is as follows: given the observed timestamps ⌧ (up to estimation time t) and the graph G, find an estimator M(⌧ , G) that outputs\nthe true source. Our metric of success for the adversary is probability of detection, P(M(⌧ , G) = v⇤), taken over the random spreading realization (captured by ⌧ ) and any randomness in the estimator.\nIn [6, 15], the adversary uses a variant of the first-timestamp estimator M FT (⌧ , G) = argmin v2V\nt\n⌧ v , which outputs the first node (prior to estimation time t) to report the message to the adversary. The first-timestamp estimator requires no knowledge of the graph, and it is computationally easy to implement. We begin by analyzing this estimator for both trickle and diffusion propagation.\nWe also consider the maximum-likelihood (ML) estimator: M ML (⌧ , G) = argmax v2V P(⌧ |G, v⇤ = v). The ML estimator depends on the time of estimation t to the extent that ⌧ only contains timestamps up to time t. Unlike the first-timestamp estimator, the ML estimator differs across spreading protocols, depends on the graph, and may be computationally intractable in general.\nProblem statement. Our goal is to understand whether the Bitcoin community’s move from trickle spreading to diffusion actually improved the system’s anonymity guarantees. The problem at hand is to characterize the maximum-likelihood (ML) probability of detection of the eavesdropper adversary for both trickle and diffusion processes on d-regular trees, as a function of degree d, number of corrupted connections ✓, and detection time t. We meet this goal by computing lower bounds derived from the analysis of suboptimal estimators (e.g., first-timestamp estimator and centrality-based estimators), and upper bounds derived from fundamental limits on detection.\nRelated work. Although there has been much work on the anonymity properties of Bitcoin [19, 28, 24, 27], the ‘epidemic source finding’ interpretation of Bitcoin deanonymization is fairly new. Prior work that (implicitly) adopts this interpretation has focused on Bitcoin’s protocol flaws more than the inference aspect of the problem [6, 15]. As this is the focus of our paper, we include the related source detection literature. Epidemic source detection has been widely studied under diffusion spreading with a snapshot adversary, which observes the set of infected nodes at a single time t; in our notation, the adversary would learn the set {v 2 V : X\nv  t} (no timestamps), along with graph G. Shah and Zaman first characterized the ML probability of detection for diffusion observed by a snapshot adversary when the underlying graph is a regular tree [29]. These results were later extended to random, irregular trees [31], whereas other authors studied heuristic source detection methods on general graphs [12, 26, 16] and related theoretical limits [32, 21, 14]. The eavesdropper adversary differs in that it eventually observes a noisy timestamp ⌧\nv from every node, regardless of when the node is infected. This changes both the analysis and the estimators that one can use. Another common adversarial model is the spy-based adversary, which observes exact timestamps for a corrupted set of nodes that does not include the source [25, 34]. In our notation, for a set of spies S ✓ V , the spy-based adversary observes {(s,X\ns ) : s 2 S}. Prior work on the spy-based adversary does not characterize the ML probability of detection, but researchers have proposed efficient heuristics that perform well in practice [25, 34, 35, 9]. Unlike the spy-based adversary, the eavesdropper only observes delayed timestamps, and it does so for all nodes, including the source."
    }, {
      "heading" : "3 Analysis of trickle (pre-2015)",
      "text" : ""
    }, {
      "heading" : "3.1 First-timestamp estimator",
      "text" : "The analysis of trickle propagation is complicated by its combinatorial, time-dependent nature. As such, we lower-bound the first-timestamp estimator’s probability of detection. Let ⌧ m , min(⌧ 1 , ⌧ 2\n, . . .) denote the minimum observed timestamp among nodes that are not the source. Then we compute P(⌧\n0 < ⌧ m ), i.e., the probability that the true source reports the message to the adversary strictly before any of the other nodes. This event (which causes the source to be detected with probability 1) does not include cases where the true source is one of k nodes (k > 1) that report the message to the adversary simultaneously, and before any other node in the system. Nonetheless, for large node degree d, the ‘simultaneous reporting’ event is rare, so our lower bound is close to the empirical probability of detection of the first-timestamp estimator.\nTheorem 3.1 (Proof in Appendix C.1) Consider a message that propagates according to trickle spreading over a d-regular tree of servers, where each node additionally has ✓ connections to an eavesdropping adversary. The first-timestamp estimator’s probability of detection at time t = 1 satisfies P(MFT(⌧ , G) = v⇤) ✓\nd log 2\n⇥ Ei(2 d log ⇢) Ei (log ⇢) ⇤\nwhere ⇢ = d 1 d 1+✓ , and Ei(x) ,\nR1 x e t dt t denotes the exponential integral.\n2 4 6 8 10\n0.3\n0.35\n0.4\n0.45\n0.5\n0.55\n0.6 0.65 Theoretical lower bound log(d) / (d log(2)) Simulation\nPr ob\nab ili\nty of\nD et\nec tio\nn\nTree degree, d\nFigure 2: First-timestamp estimator accuracy on d-regular trees when ✓ = 1.\nWe prove this bound by conditioning on the time at which the source reports to the adversary. The proof then becomes a combinatorial counting problem. The expression in Theorem 3.1 can be simplified by examining its Taylor expansion (see Appendix A). In particular, for the special case of ✓ = 1 where the adversary establishes only one connection per server, line (5) simplifies to P(M\nFT (⌧ , G)) ⇡ log d d·log 2+o\n⇣ log d\nd\n⌘ .\nThis suggests that the first-timestamp estimator has a probability of detection that decays to zero asymptotically as log(d)/d. Intuitively, the probability of detection should decay to zero, because the higher the degree of the tree, the higher the likelihood that a node other than the source reports to the adversary before the source does. Nonetheless, this is only a lower bound on the first-timestamp’s probability of\ndetection, so we wish to understand how tight the bound is.\nSimulation. To evaluate the lower bound in Theorem 3.1 and its approximation for ✓ = 1, we simulate the first-timestamp estimator on regular trees.2 Figure 2 illustrates the simulation results for ✓ = 1 compared to the approximation above. Each data point is averaged over 5,000 trials. Empirically, the lower bound appears to be tight, especially as d grows. Figure 2 suggest a natural solution to improve anonymity in the Bitcoin network: increase the degree of each node to reduce the adversary’s probability of detection. However, we shall see in the next section that stronger estimators (e.g., the ML estimator) may achieve high probabilities of detection, even for large d."
    }, {
      "heading" : "3.2 Maximum-likelihood estimator",
      "text" : "At any time t, if one knew the ground truth timestamps (i.e., the X v ’s), one could arrange the nodes of the infected subgraph G\nt in the order they received the message. We call such an arrangement an ordering of nodes. Since propagation is in discrete time, multiple nodes may receive the message simultaneously; such nodes are lumped together in the ordering. Of course, the true ordering is not observed by the adversary, but the observed timestamps (i.e., ⌧ ) restrict the set of possible orderings. A feasible ordering is an ordering that respects the rules of trickle propagation over graph G, as well as the observed timestamps ⌧ . In this subsection only, we will abuse notation by using ⌧ to refer to all timestamps observed by the adversary, not just the first timestamp from each server. So if the adversary has ✓ connections to each server, ⌧ would include ✓ timestamps per honest server.\nWe propose an estimator called timestamp rumor centrality, which counts the number of feasible orderings originating from each candidate source. The candidate with the most feasible orderings is chosen as the estimator output. This estimator is similar to rumor centrality, an estimator devised for snapshot adversaries in [29]. However, the presence of timestamps and the lack of knowledge of the infected subgraph increases the estimator’s complexity. We first motivate timestamp rumor centrality.\nProposition 3.2 (Proof in Appendix C.2) Consider a trickle process over a d-regular graph, where each node has ✓ connections to the eavesdropper adversary. Any feasible orderings o\n1 and o 2 with\nrespect to observed timestamps ⌧ and graph G have the same likelihood.\nProposition 3.2 implies that at any fixed time, the likelihood of observing ⌧ given a candidate source is proportional to the number of feasible orderings originating from that candidate source. Therefore, an ML estimator (timestamp rumor centrality) counts the number of feasible orderings at estimation time t. Timestamp rumor centrality is a message-passing algorithm that proceeds as follows: for each candidate source, recursively determine the set of feasible times when each node could have been infected, given the observed timestamps. This is achieved by passing a set of “feasible times of receipt\" from the candidate source to the leaves of the largest feasible infected subtree rooted at the candidate source. In each step, nodes prune receipt times that conflict with their observed timestamps. Next, given each node’s set of feasible receipt times, they count the number of feasible orderings that obey the rules of trickle propagation. This is achieved by passing sets of partial orderings from the leaves to the candidate source, and pruning infeasible orderings. The timestamp rumor centrality protocol is presented in Appendix A.2, along with minor modifications that reduce its complexity.\n−2 1−1 2\n./∗0 = 2 .10 = 2\n.210 = 4\n−3\n5/∗0 = 0 510 = 1 570 = 35210 = 35270 = 4\n3\n580 = 4\n$∗\nserved timestamps, independently. For example, Figure 3 contains a sample spread on a line graph, where the adversary has one connection per server (not shown). Therefore, d = 2 and ✓ = 1. The ground truth infection time is written as X\nv\nbelow each node, and the observed timestamps are written\n2Code for all simulations available at https://github.com/gfanti/bitcoin-trickle-diffusion.\nabove the node. In this figure, the estimator is run at time t = 4, so the adversary only sees three timestamps. For each observed timestamp ⌧\nv , the estimator creates a ball of radius ⌧ v 1, centered at v. For example, in our figure, the green node (node 1) has ⌧\n1 = 2. Therefore, the adversary would make a ball of radius 1 centered at node 1; this ball is depicted by the green bubble in our figure. The ball represents the set of nodes that are close enough to node 1 to feasibly report to the adversary from node 1 at time ⌧\n1 = 2. After constructing an analogous ball for every observed timestamp in ⌧ , the protocol outputs a source selected uniformly from the intersection of these balls. In our example, there are exactly two nodes in this intersection. We describe ball centrality precisely in Protocol 1 (Appendix A.2.1). Although ball centrality is not ML for a fixed time t, the following theorem lower bounds the ML probability of detection by analyzing ball centrality and showing that its probability of detection approaches a fundamental upper bound exponentially fast in detection time t.\nTheorem 3.3 (Proof in Section C.3) Consider a trickle spreading process over a d-regular graph of honest servers. In addition, each server has ✓ independent connections to an eavesdropper adversary. The ML probability of detection at time t satisfies the following expression:\n1 d 2(✓ + d)\n✓\nd\n✓ + d\n◆ t\n(a)  P(MML(⌧ , G) = v⇤) (b)  1 d 2(✓ + d)\n(1)\nNote that the right-hand side of equation (1) is always greater than 1 2 . As such, increasing the graph degree would not significantly reduce the probability of detection; the adversary can still identify the source with probability at least 1\n2 given enough time. Second, the ML probability of detection approaches its upper bound exponentially fast in time t. This suggests that the adversary can achieve high probabilities of detection at small times t. These results highlight an important point: estimators that exploit graph structure can reap significant, order-level gains in accuracy."
    }, {
      "heading" : "4 Analysis of diffusion (post-2015)",
      "text" : ""
    }, {
      "heading" : "4.1 First-timestamp estimator",
      "text" : "Although the first-timestamp estimator does not use knowledge of the underlying graph, its performance depends on the underlying graph structure. The following theorem exactly characterizes its probability of detection on a regular tree as t ! 1.\nTheorem 4.1 (Proof in Appendix C.4) Consider a diffusion process of rate = 1 over a d-regular tree, d > 2. Suppose an adversary observes each node’s infection time with an independent, exponential delay of rate\n2 = ✓, ✓ 1. Then the following expression describes the probability of detection for the first-timestamp estimator at time t = 1: P(MFT(⌧ , G) = v⇤) = ✓ d 2 log d+✓ 2 ✓ .\nThe proof expresses the probability of detection as a nonlinear differential equation that can be solved exactly. The expression highlights a few points: First, for a fixed degree d, the probability of detection is strictly positive as t ! 1. This is straightforward to see, but under other adversarial models (e.g., snapshot adversaries) it is not trivial to see that the probability of detection is positive as t ! 1. Indeed, several papers are dedicated to making that point [30, 31]. Second, when ✓ = 1, i.e., the adversary has only one connection per node, the probability of detection approaches log(d)/d asymptotically in d. This quantity tends to 0 as d ! 1, and it is order-equal to the probability of detection of the first-timestamp adversary on the trickle protocol when ✓ = 1 (see Section 3.1).\nTheorem 4.1 suggests that the Bitcoin community’s transition from trickle spreading to diffusion does not provide order-level anonymity gains (asymptotically in the degree of the graph), at least for the first-timestamp adversary. Next, we ask if the same is true for estimators that use the graph structure."
    }, {
      "heading" : "4.2 Centrality-based estimators",
      "text" : "We compute a different lower bound on the ML probability of detection by analyzing a centralitybased estimator. Unlike the first-timestamp estimator, this reporting centrality estimator uses the structure of the infected subgraph by selecting a candidate source that is close to the center (on the graph) of the observed timestamps. However, it does not explicitly use the observed timestamps. Also unlike the first-timestamp estimator, this centrality-based estimator improves as the degree d\nof the underlying tree increases, with a strictly positive probability of detection as d ! 1. Thus the eavesdropper adversary has an ML probability of detection that scales as ⇥(1) in d. Intuitively, reporting centrality works as follows: for each candidate source v, the estimator counts the number of nodes that have reported to the adversary from each of the node v’s adjacent subtrees. It picks a candidate source for which the number of reporting nodes is approximately equal in each subtree.\nTo make this precise, suppose the infected subtree G t is rooted at w; we use Tw v to denote the subtree of G\nt that contains v and all of v’s descendants, with respect to root node w. Consider a random variable Y\nv (t), which is 1 if node v 2 V has reported to the adversary by time t, and 0 otherwise. We let Y\nT\nw v\n(t) = P\nu2Tw v\nY u (t) denote the number of nodes in Tw v that have reported to the adversary by time t. We use Y (t) = P v2V\nt\nY v (t) to denote the total number of reporting nodes in G t at time t. Similarly, we use N\nT\nw v\n(t) to denote the number of infected nodes in Tw v (so N T w\nv\n(t) Y T w\nv (t)), and we let N(t) denote the total number of infected nodes at time t (N(t) Y (t)). For each candidate source v, we consider its d neighbors, which comprise the set N (v). We define a node v’s reporting centrality at time t—denoted R\nv\n(t)—as follows:\nR v (t) =\n( 1 if max\nu2N (v) YTv u (t) < Y (t) 2\n0 otherwise. (2)\nThat is, a node’s reporting centrality is 1 iff each of its adjacent subtrees has fewer than Y (t)/2 reporting nodes. A node is a reporting center iff its reporting centrality is 1.\nR\nv\n⇤ (t) = 1 since v⇤’s adjacent subtrees\nhave  Y (t)/2 = 2.5 reporting nodes.\nThe estimator outputs v̂ chosen uniformly from all reporting centers. In Figure 4, v⇤ is the only reporting center.\nReporting centrality does not use the adversary’s observed timestamps—it only counts the number of reporting nodes in each of a node’s adjacent subtrees. This estimator is inspired by rumor centrality [30], an ML estimator for the source of a diffusion process under a snapshot adversary. Recall that a snapshot adversary sees the infected subgraph G\nt\nat time t, but it does not learn timestamp information.\nThe next theorem shows that for trees with high degree d, reporting centrality has a strictly higher (in an order sense) probability of detection than the first-timestamp estimator; its probability of detection is strictly positive as d ! 1.\nTheorem 4.2 (Proof in Section C.5) Consider a diffusion process of rate = 1 over a d-regular tree. Suppose this process is observed by an eavesdropper adversary, which sees each node’s timestamp\nwith an independent exponential delay of rate 2 = ✓, ✓ 1. Then the reporting centrality estimator has a (time-dependent) probability of detection P(MRC(⌧ , G) = v⇤) that satisfies lim inf t!1 P(MRC(⌧ , G) = v⇤) Cd > 0. where Cd = 1 d ⇣ 1 I 1/2 ⇣ 1 d 2 , 1 + 1 d 2 ⌘⌘ is a\nconstant that depends only on degree d, and I 1/2 (a, b) is the regularized incomplete Beta function, i.e., the probability a Beta random variable with parameters a and b takes a value in [0, 1\n2\n).\nTo prove this, we relate two Pòlya urn processes: one that represents the diffusion process over the regular tree of honest nodes, and one that describes the full spreading process, which includes both diffusion over the regular tree and random reporting to the adversary. The first urn can be posed as a classic Pòlya urn [10], which has been studied in the context of diffusion [31, 14]. The second urn can be described by an unbalanced generalized Pòlya urn (GPU) with negative coefficients [4, 13]—a class of urns that does not typically appear in the study of diffusion (to the best of our knowledge). As a side note, this approach can be used to analyze other epidemic source-finding problems that have previously evaded analysis, as we show in Appendix B. Notice that the constant C\nd in Theorem 4.2 does not depend on ✓—this is because the reporting centrality estimator makes no use of timestamp information, so the delays in the timestamps ⌧ do not affect the estimator’s asymptotic behavior.\nSimulation results. To evaluate the lower bound in Theorem 4.2, we simulate reporting centrality on diffusion over regular trees. Figure 5 illustrates the empirical performance of reporting centrality averaged over 4,000 trials, compared to the theoretical lower bound on the liminf. The estimator is\nrun at time t = d+ 2. Our simulations are run up to degree d = 5 due to computational constraints, since the infected subgraph grows exponentially in the degree of the tree. By d = 5, reporting centrality reaches the theoretical lower bound on the limiting detection probability.\nFor diffusion, neither lower bound on the first-timestamp or reporting centrality estimator strictly outperforms the other. Figure 5 compares the two estimators as a function of degree d. We observe that reporting centrality outstrips first-timestamp estimation for trees of degree 9 and higher; since our theoretical result is only a lower bound on the performance of reporting centrality, the transition may occur at even smaller d. Empirically, the true Bitcoin graph is approximately 8-regular [20], a regime in which we expect reporting centrality to perform similarly to the first-timestamp estimator."
    }, {
      "heading" : "5 Discussion",
      "text" : "Table 1 summarizes our theoretical results for trickle and diffusion. The probabilities of detection for trickle and diffusion are similar, particularly when ✓ = 1. Although the maximum-likelihood results are difficult to compare visually, they both approach a positive constant as d, t ! 1; for trickle propagation, that constant is 1\n2\n, whereas for diffusion, it is approximately 0.307.\nThese results are asymptotic in degree d. In practice, the underlying Bitcoin graph is fixed; the only variable quantity is the adversary’s resources, represented by ✓. Figure 6 compares analytical expressions and simulations for 4-regular trees under the first-timestamp estimator (as we lack an ML estimator on general graphs), as a function of ✓. It suggests nearly identical detection probabilities for diffusion and trickle on regular trees; while our theoretical prediction for diffusion is exact, our lower bound on trickle is loose since d is small.\nTo validate our decision to analyze regular trees, we simulate trickle and diffusion on a 2015 snapshot of the Bitcoin network [20]. Figure 7 compares these results as a function of ✓, for the first-timestamp estimator. Unless specified otherwise, theoretical curves are calculated for a regular tree with d = 8, the mean degree of our dataset. Diffusion performs close to the theoretical prediction; this is because with high probability, the first-timestamp estimator uses only on a local neighborhood to estimate v⇤, and the Bitcoin graph is locally tree-like. However, our trickle lower bound remains loose. This is partially due to simultaneous reporting events, but the main contributing factor seems to be graph irregularity. Understanding this effect more carefully is an interesting question for future work.\nIn summary, trickle and diffusion have similar probabilities of detection, both in an asymptotic-order sense and numerically. We have analyzed the canonical class of d-regular trees and simulated these protocols on a real Bitcoin graph topology. Our results omit certain details of the spreading protocols, (Sec. 2); extending the analysis to include these details is practically relevant."
    } ],
    "references" : [ {
      "title" : "Evaluating user privacy in bitcoin",
      "author" : [ "Elli Androulaki", "Ghassan O Karame", "Marc Roeschlin", "Tobias Scherer", "Srdjan Capkun" ],
      "venue" : "In International Conference on Financial Cryptography and Data Security,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2013
    }, {
      "title" : "Branching processes, volume 196",
      "author" : [ "Krishna B Athreya", "Peter E Ney" ],
      "venue" : "Springer Science & Business Media,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2012
    }, {
      "title" : "Advanced mathematical methods for scientists and engineers I",
      "author" : [ "Carl M Bender", "Steven A Orszag" ],
      "venue" : "Springer Science & Business Media,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 1999
    }, {
      "title" : "Deanonymisation of clients in bitcoin p2p network",
      "author" : [ "Alex Biryukov", "Dmitry Khovratovich", "Ivan Pustogarov" ],
      "venue" : "In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security,",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2014
    }, {
      "title" : "Bitcoin over tor isn’t a good idea",
      "author" : [ "Alex Biryukov", "Ivan Pustogarov" ],
      "venue" : "In 2015 IEEE Symposium on Security and Privacy,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2015
    }, {
      "title" : "The coupon-collector problem revisited?a survey of engineering problems and computational methods",
      "author" : [ "Arnon Boneh", "Micha Hofri" ],
      "venue" : "Stochastic Models,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 1997
    }, {
      "title" : "Detecting multiple information sources in networks under the sir model",
      "author" : [ "Zhen Chen", "Kai Zhu", "Lei Ying" ],
      "venue" : "IEEE Transactions on Network Science and Engineering,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2016
    }, {
      "title" : "Über die statistik verketteter vorgänge",
      "author" : [ "Florian Eggenberger", "George Pólya" ],
      "venue" : "ZAMM-Journal of Applied Mathematics and Mechanics/Zeitschrift für Angewandte Mathematik und Mechanik,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 1923
    }, {
      "title" : "Metadata-aware anonymous messaging",
      "author" : [ "G. Fanti", "P. Kairouz", "S. Oh", "K. Ramchandran", "P. Viswanath" ],
      "venue" : "In ICML,",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2015
    }, {
      "title" : "Predicting the sources of an outbreak with a spectral technique",
      "author" : [ "V. Fioriti", "M. Chinnici" ],
      "venue" : null,
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 2012
    }, {
      "title" : "Functional limit theorems for multitype branching processes and generalized pólya urns",
      "author" : [ "Svante Janson" ],
      "venue" : "Stochastic Processes and their Applications,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2004
    }, {
      "title" : "Confidence sets for the source of a diffusion in regular trees",
      "author" : [ "Justin Khim", "Po-Ling Loh" ],
      "venue" : "arXiv preprint arXiv:1510.05461,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 2015
    }, {
      "title" : "An analysis of anonymity in bitcoin using p2p network traffic",
      "author" : [ "Philip Koshy", "Diana Koshy", "Patrick McDaniel" ],
      "venue" : "In International Conference on Financial Cryptography and Data Security,",
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 2014
    }, {
      "title" : "Inferring the origin of an epidemic with dynamic message-passing algorithm",
      "author" : [ "A.Y. Lokhov", "M. Mézard", "H. Ohta", "L. Zdeborová" ],
      "venue" : "arXiv preprint arXiv:1303.5315,",
      "citeRegEx" : "16",
      "shortCiteRegEx" : "16",
      "year" : 2013
    }, {
      "title" : "Top 5 vpn services for personal privacy and security, 2016",
      "author" : [ "Paul Mah" ],
      "venue" : null,
      "citeRegEx" : "17",
      "shortCiteRegEx" : "17",
      "year" : 2016
    }, {
      "title" : "Pólya urn models",
      "author" : [ "Hosam Mahmoud" ],
      "venue" : "CRC press,",
      "citeRegEx" : "18",
      "shortCiteRegEx" : "18",
      "year" : 2008
    }, {
      "title" : "A fistful of bitcoins: characterizing payments among men with no names",
      "author" : [ "Sarah Meiklejohn", "Marjori Pomarole", "Grant Jordan", "Kirill Levchenko", "Damon McCoy", "Geoffrey M Voelker", "Stefan Savage" ],
      "venue" : "In Proceedings of the 2013 conference on Internet measurement conference,",
      "citeRegEx" : "19",
      "shortCiteRegEx" : "19",
      "year" : 2013
    }, {
      "title" : "Discovering bitcoins public topology and influential",
      "author" : [ "Andrew Miller", "James Litton", "Andrew Pachulski", "Neal Gupta", "Dave Levin", "Neil Spring", "Bobby Bhattacharjee" ],
      "venue" : null,
      "citeRegEx" : "20",
      "shortCiteRegEx" : "20",
      "year" : 2015
    }, {
      "title" : "Network forensics: random infection vs spreading epidemic",
      "author" : [ "Chris Milling", "Constantine Caramanis", "Shie Mannor", "Sanjay Shakkottai" ],
      "venue" : "ACM SIGMETRICS Performance Evaluation Review,",
      "citeRegEx" : "21",
      "shortCiteRegEx" : "21",
      "year" : 2012
    }, {
      "title" : "Legal sparring continues in bitcoin user?s battle with irs tax sweep, 2017",
      "author" : [ "David Z. Morris" ],
      "venue" : null,
      "citeRegEx" : "22",
      "shortCiteRegEx" : "22",
      "year" : 2017
    }, {
      "title" : "Bitcoin: A peer-to-peer electronic cash",
      "author" : [ "Satoshi Nakamoto" ],
      "venue" : null,
      "citeRegEx" : "23",
      "shortCiteRegEx" : "23",
      "year" : 2008
    }, {
      "title" : "Structure and anonymity of the bitcoin transaction graph",
      "author" : [ "Micha Ober", "Stefan Katzenbeisser", "Kay Hamacher" ],
      "venue" : "Future internet,",
      "citeRegEx" : "24",
      "shortCiteRegEx" : "24",
      "year" : 2013
    }, {
      "title" : "Locating the source of diffusion in large-scale networks",
      "author" : [ "P.C. Pinto", "P. Thiran", "M. Vetterli" ],
      "venue" : "Physical review letters,",
      "citeRegEx" : "25",
      "shortCiteRegEx" : "25",
      "year" : 2012
    }, {
      "title" : "Spotting culprits in epidemics: How many and which ones",
      "author" : [ "B.A. Prakash", "J. Vreeken", "C. Faloutsos" ],
      "venue" : "In ICDM,",
      "citeRegEx" : "26",
      "shortCiteRegEx" : "26",
      "year" : 2012
    }, {
      "title" : "An analysis of anonymity in the bitcoin system",
      "author" : [ "Fergal Reid", "Martin Harrigan" ],
      "venue" : "In Security and privacy in social networks,",
      "citeRegEx" : "27",
      "shortCiteRegEx" : "27",
      "year" : 2013
    }, {
      "title" : "Quantitative analysis of the full bitcoin transaction graph",
      "author" : [ "Dorit Ron", "Adi Shamir" ],
      "venue" : "In International Conference on Financial Cryptography and Data Security,",
      "citeRegEx" : "28",
      "shortCiteRegEx" : "28",
      "year" : 2013
    }, {
      "title" : "Detecting sources of computer viruses in networks: theory and experiment",
      "author" : [ "D. Shah", "T. Zaman" ],
      "venue" : "In ACM SIGMETRICS Performance Evaluation Review,",
      "citeRegEx" : "29",
      "shortCiteRegEx" : "29",
      "year" : 2010
    }, {
      "title" : "Rumors in a network: Who’s the culprit",
      "author" : [ "D. Shah", "T. Zaman" ],
      "venue" : "Information Theory, IEEE Transactions on,",
      "citeRegEx" : "30",
      "shortCiteRegEx" : "30",
      "year" : 2011
    }, {
      "title" : "Rumor centrality: a universal source detector",
      "author" : [ "D. Shah", "T. Zaman" ],
      "venue" : "In ACM SIGMETRICS Performance Evaluation Review,",
      "citeRegEx" : "31",
      "shortCiteRegEx" : "31",
      "year" : 2012
    }, {
      "title" : "Rumor source detection with multiple observations: Fundamental limits and algorithms",
      "author" : [ "Z. Wang", "W. Dong", "W. Zhang", "C.W. Tan" ],
      "venue" : "In ACM SIGMETRICS,",
      "citeRegEx" : "32",
      "shortCiteRegEx" : "32",
      "year" : 2014
    }, {
      "title" : "A robust information source estimator with sparse observations",
      "author" : [ "K. Zhu", "L. Ying" ],
      "venue" : "arXiv preprint arXiv:1309.4846,",
      "citeRegEx" : "34",
      "shortCiteRegEx" : "34",
      "year" : 2013
    }, {
      "title" : "A robust information source estimator with sparse observations",
      "author" : [ "Kai Zhu", "Lei Ying" ],
      "venue" : "Computational Social Networks,",
      "citeRegEx" : "35",
      "shortCiteRegEx" : "35",
      "year" : 2014
    } ],
    "referenceMentions" : [ {
      "referenceID" : 14,
      "context" : "1 Introduction The Bitcoin cryptocurrency has seen widespread adoption, due in part to its reputation as a privacypreserving financial system [17, 22].",
      "startOffset" : 142,
      "endOffset" : 150
    }, {
      "referenceID" : 19,
      "context" : "1 Introduction The Bitcoin cryptocurrency has seen widespread adoption, due in part to its reputation as a privacypreserving financial system [17, 22].",
      "startOffset" : 142,
      "endOffset" : 150
    }, {
      "referenceID" : 0,
      "context" : "In practice, though, Bitcoin exhibits serious privacy vulnerabilities [3, 19, 27, 28, 24].",
      "startOffset" : 70,
      "endOffset" : 89
    }, {
      "referenceID" : 16,
      "context" : "In practice, though, Bitcoin exhibits serious privacy vulnerabilities [3, 19, 27, 28, 24].",
      "startOffset" : 70,
      "endOffset" : 89
    }, {
      "referenceID" : 24,
      "context" : "In practice, though, Bitcoin exhibits serious privacy vulnerabilities [3, 19, 27, 28, 24].",
      "startOffset" : 70,
      "endOffset" : 89
    }, {
      "referenceID" : 25,
      "context" : "In practice, though, Bitcoin exhibits serious privacy vulnerabilities [3, 19, 27, 28, 24].",
      "startOffset" : 70,
      "endOffset" : 89
    }, {
      "referenceID" : 21,
      "context" : "In practice, though, Bitcoin exhibits serious privacy vulnerabilities [3, 19, 27, 28, 24].",
      "startOffset" : 70,
      "endOffset" : 89
    }, {
      "referenceID" : 20,
      "context" : "Most of these vulnerabilities arise because of two key properties: (1) Bitcoin associates each user with a pseudonym, and (2) pseudonyms can be linked to financial transactions through a public transaction ledger, called the blockchain [23].",
      "startOffset" : 236,
      "endOffset" : 240
    }, {
      "referenceID" : 0,
      "context" : "The most commonlystudied methods analyze transaction patterns in the public blockchain, and link those patterns using side information [3, 19, 27, 28, 24].",
      "startOffset" : 135,
      "endOffset" : 154
    }, {
      "referenceID" : 16,
      "context" : "The most commonlystudied methods analyze transaction patterns in the public blockchain, and link those patterns using side information [3, 19, 27, 28, 24].",
      "startOffset" : 135,
      "endOffset" : 154
    }, {
      "referenceID" : 24,
      "context" : "The most commonlystudied methods analyze transaction patterns in the public blockchain, and link those patterns using side information [3, 19, 27, 28, 24].",
      "startOffset" : 135,
      "endOffset" : 154
    }, {
      "referenceID" : 25,
      "context" : "The most commonlystudied methods analyze transaction patterns in the public blockchain, and link those patterns using side information [3, 19, 27, 28, 24].",
      "startOffset" : 135,
      "endOffset" : 154
    }, {
      "referenceID" : 21,
      "context" : "The most commonlystudied methods analyze transaction patterns in the public blockchain, and link those patterns using side information [3, 19, 27, 28, 24].",
      "startOffset" : 135,
      "endOffset" : 154
    }, {
      "referenceID" : 20,
      "context" : "Like most cryptocurrencies, Bitcoin nodes communicate over a P2P network [23].",
      "startOffset" : 73,
      "endOffset" : 77
    }, {
      "referenceID" : 3,
      "context" : "The anonymity implications of transaction broadcasting were largely ignored until recently, when researchers demonstrated practical deanonymization attacks on the P2P network [6, 15].",
      "startOffset" : 175,
      "endOffset" : 182
    }, {
      "referenceID" : 12,
      "context" : "The anonymity implications of transaction broadcasting were largely ignored until recently, when researchers demonstrated practical deanonymization attacks on the P2P network [6, 15].",
      "startOffset" : 175,
      "endOffset" : 182
    }, {
      "referenceID" : 12,
      "context" : "These attacks use a “supernode” to connect to all active Bitcoin nodes and listen to the transaction traffic they relay [15, 6, 7].",
      "startOffset" : 120,
      "endOffset" : 130
    }, {
      "referenceID" : 3,
      "context" : "These attacks use a “supernode” to connect to all active Bitcoin nodes and listen to the transaction traffic they relay [15, 6, 7].",
      "startOffset" : 120,
      "endOffset" : 130
    }, {
      "referenceID" : 4,
      "context" : "These attacks use a “supernode” to connect to all active Bitcoin nodes and listen to the transaction traffic they relay [15, 6, 7].",
      "startOffset" : 120,
      "endOffset" : 130
    }, {
      "referenceID" : 3,
      "context" : "By using simple estimators to infer the source IP of each transaction broadcast, this eavesdropper adversary was able to link IP addresses to Bitcoin pseudonyms with an accuracy of up to 30% [6].",
      "startOffset" : 191,
      "endOffset" : 194
    }, {
      "referenceID" : 3,
      "context" : "Indeed, it is unclear whether the change actually defends against the deanonymization attacks in [6, 15].",
      "startOffset" : 97,
      "endOffset" : 104
    }, {
      "referenceID" : 12,
      "context" : "Indeed, it is unclear whether the change actually defends against the deanonymization attacks in [6, 15].",
      "startOffset" : 97,
      "endOffset" : 104
    }, {
      "referenceID" : 3,
      "context" : "We model the Bitcoin P2P network and an eavesdropper adversary, whose capabilities reflect recent practical attacks in [6, 15].",
      "startOffset" : 119,
      "endOffset" : 126
    }, {
      "referenceID" : 12,
      "context" : "We model the Bitcoin P2P network and an eavesdropper adversary, whose capabilities reflect recent practical attacks in [6, 15].",
      "startOffset" : 119,
      "endOffset" : 126
    }, {
      "referenceID" : 3,
      "context" : "We conduct a similar analysis of diffusion spreading, which was adopted in 2015 as a fix for the anonymity weaknesses observed under trickle propagation [6, 15].",
      "startOffset" : 153,
      "endOffset" : 160
    }, {
      "referenceID" : 12,
      "context" : "We conduct a similar analysis of diffusion spreading, which was adopted in 2015 as a fix for the anonymity weaknesses observed under trickle propagation [6, 15].",
      "startOffset" : 153,
      "endOffset" : 160
    }, {
      "referenceID" : 3,
      "context" : "Each server is represented by a (IP address, port) tuple; it can establish up to eight outgoing connections to other Bitcoin nodes [6, 2].",
      "startOffset" : 131,
      "endOffset" : 137
    }, {
      "referenceID" : 17,
      "context" : "The resulting sparse random graph between nodes can be modeled approximately as a 16-regular graph; in practice, the average degree is closer to 8 due to nonhomogeneities across nodes [20].",
      "startOffset" : 184,
      "endOffset" : 188
    }, {
      "referenceID" : 17,
      "context" : "We validate this choice by running simulations on a snapshot of the true Bitcoin network [20] (Section 5).",
      "startOffset" : 89,
      "endOffset" : 93
    }, {
      "referenceID" : 3,
      "context" : "If the trickle node has not yet received the message, the sender forwards the message [6].",
      "startOffset" : 86,
      "endOffset" : 89
    }, {
      "referenceID" : 5,
      "context" : "This differs from trickle spreading, where the time-to-infection is a coupon collector’s problem, and therefore takes ⇥(d log d) timesteps in expectation [8].",
      "startOffset" : 154,
      "endOffset" : 157
    }, {
      "referenceID" : 3,
      "context" : "We consider an eavesdropper adversary, whose capabilities are modeled on the practical deanonymization attacks in [6, 15].",
      "startOffset" : 114,
      "endOffset" : 121
    }, {
      "referenceID" : 12,
      "context" : "We consider an eavesdropper adversary, whose capabilities are modeled on the practical deanonymization attacks in [6, 15].",
      "startOffset" : 114,
      "endOffset" : 121
    }, {
      "referenceID" : 3,
      "context" : "The supernode can learn the network structure between servers [6], so we assume that G(V,E) is known to the eavesdropper.",
      "startOffset" : 62,
      "endOffset" : 65
    }, {
      "referenceID" : 3,
      "context" : "The supernode in [6, 15] observes the timestamps at which messages are relayed from each honest server, without relaying or transmitting content.",
      "startOffset" : 17,
      "endOffset" : 24
    }, {
      "referenceID" : 12,
      "context" : "The supernode in [6, 15] observes the timestamps at which messages are relayed from each honest server, without relaying or transmitting content.",
      "startOffset" : 17,
      "endOffset" : 24
    }, {
      "referenceID" : 3,
      "context" : "In [6, 15], the adversary uses a variant of the first-timestamp estimator M",
      "startOffset" : 3,
      "endOffset" : 10
    }, {
      "referenceID" : 12,
      "context" : "In [6, 15], the adversary uses a variant of the first-timestamp estimator M",
      "startOffset" : 3,
      "endOffset" : 10
    }, {
      "referenceID" : 16,
      "context" : "Although there has been much work on the anonymity properties of Bitcoin [19, 28, 24, 27], the ‘epidemic source finding’ interpretation of Bitcoin deanonymization is fairly new.",
      "startOffset" : 73,
      "endOffset" : 89
    }, {
      "referenceID" : 25,
      "context" : "Although there has been much work on the anonymity properties of Bitcoin [19, 28, 24, 27], the ‘epidemic source finding’ interpretation of Bitcoin deanonymization is fairly new.",
      "startOffset" : 73,
      "endOffset" : 89
    }, {
      "referenceID" : 21,
      "context" : "Although there has been much work on the anonymity properties of Bitcoin [19, 28, 24, 27], the ‘epidemic source finding’ interpretation of Bitcoin deanonymization is fairly new.",
      "startOffset" : 73,
      "endOffset" : 89
    }, {
      "referenceID" : 24,
      "context" : "Although there has been much work on the anonymity properties of Bitcoin [19, 28, 24, 27], the ‘epidemic source finding’ interpretation of Bitcoin deanonymization is fairly new.",
      "startOffset" : 73,
      "endOffset" : 89
    }, {
      "referenceID" : 3,
      "context" : "Prior work that (implicitly) adopts this interpretation has focused on Bitcoin’s protocol flaws more than the inference aspect of the problem [6, 15].",
      "startOffset" : 142,
      "endOffset" : 149
    }, {
      "referenceID" : 12,
      "context" : "Prior work that (implicitly) adopts this interpretation has focused on Bitcoin’s protocol flaws more than the inference aspect of the problem [6, 15].",
      "startOffset" : 142,
      "endOffset" : 149
    }, {
      "referenceID" : 26,
      "context" : "Shah and Zaman first characterized the ML probability of detection for diffusion observed by a snapshot adversary when the underlying graph is a regular tree [29].",
      "startOffset" : 158,
      "endOffset" : 162
    }, {
      "referenceID" : 28,
      "context" : "These results were later extended to random, irregular trees [31], whereas other authors studied heuristic source detection methods on general graphs [12, 26, 16] and related theoretical limits [32, 21, 14].",
      "startOffset" : 61,
      "endOffset" : 65
    }, {
      "referenceID" : 9,
      "context" : "These results were later extended to random, irregular trees [31], whereas other authors studied heuristic source detection methods on general graphs [12, 26, 16] and related theoretical limits [32, 21, 14].",
      "startOffset" : 150,
      "endOffset" : 162
    }, {
      "referenceID" : 23,
      "context" : "These results were later extended to random, irregular trees [31], whereas other authors studied heuristic source detection methods on general graphs [12, 26, 16] and related theoretical limits [32, 21, 14].",
      "startOffset" : 150,
      "endOffset" : 162
    }, {
      "referenceID" : 13,
      "context" : "These results were later extended to random, irregular trees [31], whereas other authors studied heuristic source detection methods on general graphs [12, 26, 16] and related theoretical limits [32, 21, 14].",
      "startOffset" : 150,
      "endOffset" : 162
    }, {
      "referenceID" : 29,
      "context" : "These results were later extended to random, irregular trees [31], whereas other authors studied heuristic source detection methods on general graphs [12, 26, 16] and related theoretical limits [32, 21, 14].",
      "startOffset" : 194,
      "endOffset" : 206
    }, {
      "referenceID" : 18,
      "context" : "These results were later extended to random, irregular trees [31], whereas other authors studied heuristic source detection methods on general graphs [12, 26, 16] and related theoretical limits [32, 21, 14].",
      "startOffset" : 194,
      "endOffset" : 206
    }, {
      "referenceID" : 11,
      "context" : "These results were later extended to random, irregular trees [31], whereas other authors studied heuristic source detection methods on general graphs [12, 26, 16] and related theoretical limits [32, 21, 14].",
      "startOffset" : 194,
      "endOffset" : 206
    }, {
      "referenceID" : 22,
      "context" : "Another common adversarial model is the spy-based adversary, which observes exact timestamps for a corrupted set of nodes that does not include the source [25, 34].",
      "startOffset" : 155,
      "endOffset" : 163
    }, {
      "referenceID" : 30,
      "context" : "Another common adversarial model is the spy-based adversary, which observes exact timestamps for a corrupted set of nodes that does not include the source [25, 34].",
      "startOffset" : 155,
      "endOffset" : 163
    }, {
      "referenceID" : 22,
      "context" : "Prior work on the spy-based adversary does not characterize the ML probability of detection, but researchers have proposed efficient heuristics that perform well in practice [25, 34, 35, 9].",
      "startOffset" : 174,
      "endOffset" : 189
    }, {
      "referenceID" : 30,
      "context" : "Prior work on the spy-based adversary does not characterize the ML probability of detection, but researchers have proposed efficient heuristics that perform well in practice [25, 34, 35, 9].",
      "startOffset" : 174,
      "endOffset" : 189
    }, {
      "referenceID" : 31,
      "context" : "Prior work on the spy-based adversary does not characterize the ML probability of detection, but researchers have proposed efficient heuristics that perform well in practice [25, 34, 35, 9].",
      "startOffset" : 174,
      "endOffset" : 189
    }, {
      "referenceID" : 6,
      "context" : "Prior work on the spy-based adversary does not characterize the ML probability of detection, but researchers have proposed efficient heuristics that perform well in practice [25, 34, 35, 9].",
      "startOffset" : 174,
      "endOffset" : 189
    }, {
      "referenceID" : 26,
      "context" : "This estimator is similar to rumor centrality, an estimator devised for snapshot adversaries in [29].",
      "startOffset" : 96,
      "endOffset" : 100
    }, {
      "referenceID" : 28,
      "context" : "In [31], precise analysis of standard rumor centrality was possible because rumor centrality can be reduced to a simple counting problem.",
      "startOffset" : 3,
      "endOffset" : 7
    }, {
      "referenceID" : 27,
      "context" : "Indeed, several papers are dedicated to making that point [30, 31].",
      "startOffset" : 58,
      "endOffset" : 66
    }, {
      "referenceID" : 28,
      "context" : "Indeed, several papers are dedicated to making that point [30, 31].",
      "startOffset" : 58,
      "endOffset" : 66
    }, {
      "referenceID" : 27,
      "context" : "This estimator is inspired by rumor centrality [30], an ML estimator for the source of a diffusion process under a snapshot adversary.",
      "startOffset" : 47,
      "endOffset" : 51
    }, {
      "referenceID" : 7,
      "context" : "The first urn can be posed as a classic Pòlya urn [10], which has been studied in the context of diffusion [31, 14].",
      "startOffset" : 50,
      "endOffset" : 54
    }, {
      "referenceID" : 28,
      "context" : "The first urn can be posed as a classic Pòlya urn [10], which has been studied in the context of diffusion [31, 14].",
      "startOffset" : 107,
      "endOffset" : 115
    }, {
      "referenceID" : 11,
      "context" : "The first urn can be posed as a classic Pòlya urn [10], which has been studied in the context of diffusion [31, 14].",
      "startOffset" : 107,
      "endOffset" : 115
    }, {
      "referenceID" : 1,
      "context" : "The second urn can be described by an unbalanced generalized Pòlya urn (GPU) with negative coefficients [4, 13]—a class of urns that does not typically appear in the study of diffusion (to the best of our knowledge).",
      "startOffset" : 104,
      "endOffset" : 111
    }, {
      "referenceID" : 10,
      "context" : "The second urn can be described by an unbalanced generalized Pòlya urn (GPU) with negative coefficients [4, 13]—a class of urns that does not typically appear in the study of diffusion (to the best of our knowledge).",
      "startOffset" : 104,
      "endOffset" : 111
    }, {
      "referenceID" : 17,
      "context" : "diffusion under the first-timestamp estimator, simulated on a snapshot of the real Bitcoin network [20].",
      "startOffset" : 99,
      "endOffset" : 103
    }, {
      "referenceID" : 17,
      "context" : "Empirically, the true Bitcoin graph is approximately 8-regular [20], a regime in which we expect reporting centrality to perform similarly to the first-timestamp estimator.",
      "startOffset" : 63,
      "endOffset" : 67
    } ],
    "year" : 2017,
    "abstractText" : "Recent attacks on Bitcoin’s peer-to-peer (P2P) network demonstrated that its transaction-flooding protocols, which are used to ensure network consistency, may enable user deanonymization—the linkage of a user’s IP address with her pseudonym in the Bitcoin network. In 2015, the Bitcoin community responded to these attacks by changing the network’s flooding mechanism to a different protocol, known as diffusion. However, it is unclear if diffusion actually improves the system’s anonymity. In this paper, we model the Bitcoin networking stack and analyze its anonymity properties, both preand post-2015. The core problem is one of epidemic source inference over graphs, where the observational model and spreading mechanisms are informed by Bitcoin’s implementation; notably, these models have not been studied in the epidemic source detection literature before. We identify and analyze near-optimal source estimators. This analysis suggests that Bitcoin’s networking protocols (both preand post-2015) offer poor anonymity properties on networks with a regular-tree topology. We confirm this claim in simulation on a 2015 snapshot of the real Bitcoin P2P network topology.",
    "creator" : null
  }
}