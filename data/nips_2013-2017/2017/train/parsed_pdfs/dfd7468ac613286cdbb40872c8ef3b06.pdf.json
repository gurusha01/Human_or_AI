{
  "name" : "dfd7468ac613286cdbb40872c8ef3b06.pdf",
  "metadata" : {
    "source" : "META",
    "title" : "MMD GAN: Towards Deeper Understanding of Moment Matching Network",
    "authors" : [ "Chun-Liang Li", "Wei-Cheng Chang", "Yu Cheng", "Yiming Yang", "Barnabás Póczos" ],
    "emails" : [ "chunlial@cs.cmu.edu", "wchang2@cs.cmu.edu", "yiming@cs.cmu.edu", "bapoczos@cs.cmu.edu", "chengyu@us.ibm.com" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "The essence of unsupervised learning models the underlying distribution PX of the data X . Deep generative model [1, 2] uses deep learning to approximate the distribution of complex datasets with promising results. However, modeling arbitrary density is a statistically challenging task [3]. In many applications, such as caption generation [4], accurate density estimation is not even necessary since we are only interested in sampling from the approximated distribution.\nRather than estimating the density of PX , Generative Adversarial Network (GAN) [5] starts from a base distribution PZ over Z , such as Gaussian distribution, then trains a transformation network g✓ such that P\n✓ ⇡ PX , where P✓ is the underlying distribution of g✓(z) and z ⇠ PZ . During the training, GAN-based algorithms require an auxiliary network f\nto estimate the distance between PX and P✓. Different probabilistic (pseudo) metrics have been studied [5–8] under GAN framework.\nInstead of training an auxiliary network f for measuring the distance between PX and P✓, Generative moment matching network (GMMN) [9, 10] uses kernel maximum mean discrepancy (MMD) [11], which is the centerpiece of nonparametric two-sample test, to determine the distribution distances. During the training, g\n✓ is trained to pass the hypothesis test (minimize MMD distance). [11] shows even the simple Gaussian kernel enjoys the strong theoretical guarantees (Theorem 1). However, the empirical performance of GMMN does not meet its theoretical properties. There is no promising empirical results comparable with GAN on challenging benchmarks [12, 13]. Computationally,\n31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\nit also requires larger batch size than GAN needs for training, which is considered to be less efficient [9, 10, 14, 8]\nIn this work, we try to improve GMMN and consider using MMD with adversarially learned kernels instead of fixed Gaussian kernels to have better hypothesis testing power. The main contributions of this work are:\n• In Section 2, we prove that training g ✓\nvia MMD with learned kernels is continuous and differentiable, which guarantees the model can be trained by gradient descent. Second, we prove a new distance measure via kernel learning, which is a sensitive loss function to the distance between PX and P✓ (weak⇤ topology). Empirically, the loss decreases when two distributions get closer.\n• In Section 3, we propose a practical realization called MMD GAN that learns generator g ✓\nwith the adversarially trained kernel. We further propose a feasible set reduction to speed up and stabilize the training of MMD GAN.\n• In Section 5, we show that MMD GAN is computationally more efficient than GMMN, which can be trained with much smaller batch size. We also demonstrate that MMD GAN has promising results on challenging datasets, including CIFAR-10, CelebA and LSUN, where GMMN fails. To our best knowledge, we are the first MMD based work to achieve comparable results with other GAN works on these datasets.\nFinally, we also study the connection to existing works in Section 4. Interestingly, we show Wasserstein GAN [8] is the special case of the proposed MMD GAN under certain conditions. The unified view shows more connections between moment matching and GAN, which can potentially inspire new algorithms based on well-developed tools in statistics [15]. Our experiment code is available at https://github.com/OctoberChang/MMD-GAN."
    }, {
      "heading" : "2 GAN, Two-Sample Test and GMMN",
      "text" : "Assume we are given data {x i }n i=1, where xi 2 X and xi ⇠ PX . If we are interested in sampling from PX , it is not necessary to estimate the density of PX . Instead, Generative Adversarial Network (GAN) [5] trains a generator g\n✓ parameterized by ✓ to transform samples z ⇠ PZ , where z 2 Z , into g\n✓ (z) ⇠ P ✓ such that P ✓ ⇡ PX . To measure the similarity between PX and P✓ via their samples {x}n\ni=1 and {g✓(zj)}nj=1 during the training, [5] trains the discriminator f parameterized by for help. The learning is done by playing a two-player game, where f tries to distinguish x i and g ✓ (z j ) while g ✓ aims to confuse f by generating g ✓ (z j ) similar to x i .\nOn the other hand, distinguishing two distributions by finite samples is known as Two-Sample Test in statistics. One way to conduct two-sample test is via kernel maximum mean discrepancy (MMD) [11]. Given two distributions P and Q, and a kernel k, the square of MMD distance is defined as\nM k (P,Q) = kµP µQk2H = EP[k(x, x0)] 2EP,Q[k(x, y)] + EQ[k(y, y0)]. Theorem 1. [11] Given a kernel k, if k is a characteristic kernel, then M\nk\n(P,Q) = 0 iff P = Q.\nGMMN: One example of characteristic kernel is Gaussian kernel k(x, x0) = exp(kx x0k2). Based on Theorem 1, [9, 10] propose generative moment-matching network (GMMN), which trains g\n✓\nby\nmin\n✓\nM k (PX ,P✓), (1)\nwith a fixed Gaussian kernel k rather than training an additional discriminator f as GAN."
    }, {
      "heading" : "2.1 MMD with Kernel Learning",
      "text" : "In practice we use finite samples from distributions to estimate MMD distance. Given X = {x1, · · · , xn} ⇠ P and Y = {y1, · · · , yn} ⇠ Q, one estimator of Mk(P,Q) is\nˆM k (X,Y ) = 1 n\n2\nX i 6=i0 k(x i , x0 i ) 2 n 2 X i 6=j k(x i , y j ) + 1 n 2 X j 6=j0 k(y j , y0 j ).\nBecause of the sampling variance, ˆM(X,Y ) may not be zero even when P = Q. We then conduct hypothesis test with null hypothesis H0 : P = Q. For a given allowable probability of false rejection ↵,\nwe can only reject H0, which imply P 6= Q, if ˆM(X,Y ) > c↵ for some chose threshold c↵ > 0. Otherwise, Q passes the test and Q is indistinguishable from P under this test. Please refer to [11] for more details.\nIntuitively, if kernel k cannot result in high MMD distance M k (P,Q) when P 6= Q, ˆM k (P,Q) has more chance to be smaller than c\n↵ . Then we are unlikely to reject the null hypothesis H0 with finite samples, which implies Q is not distinguishable from P. Therefore, instead of training g\n✓ via (1) with a pre-specified kernel k as GMMN, we consider training g\n✓\nvia\nmin\n✓\nmax k2K M k (PX ,P✓), (2)\nwhich takes different possible characteristic kernels k 2 K into account. On the other hand, we could also view (2) as replacing the fixed kernel k in (1) with the adversarially learned kernel argmax\nk2K Mk(PX ,P✓) to have stronger signal where P 6= P✓ to train g✓. We refer interested readers to [16] for more rigorous discussions about testing power and increasing MMD distances.\nHowever, it is difficult to optimize over all characteristic kernels when we solve (2). By [11, 17] if f is a injective function and k is characteristic, then the resulted kernel ˜k = k f , where ˜k(x, x0) = k(f(x), f(x0)) is still characteristic. If we have a family of injective functions parameterized by , which is denoted as f , we are able to change the objective to be\nmin\n✓\nmax M k f (PX ,P✓), (3)\nIn this paper, we consider the case that combining Gaussian kernels with injective functions f , where ˜k(x, x0) = exp( kf (x) f (x)0k2). One example function class of f is {f |f\n(x) = x, > 0}, which is equivalent to the kernel bandwidth tuning. A more complicated realization will be discussed in Section 3. Next, we abuse the notation M\nf (P,Q) to be MMD distance given the composition kernel of Gaussian kernel and f\nin the following. Note that [18] considers the linear combination of characteristic kernels, which can also be incorporated into the discussed composition kernels. A more general kernel is studied in [19]."
    }, {
      "heading" : "2.2 Properties of MMD with Kernel Learning",
      "text" : "[8] discuss different distances between distributions adopted by existing deep learning algorithms, and show many of them are discontinuous, such as Jensen-Shannon divergence [5] and Total variation [7], except for Wasserstein distance. The discontinuity makes the gradient descent infeasible for training. From (3), we train g\n✓\nvia minimizing max M f (PX ,P✓). Next, we show max Mf (PX ,P✓) also\nenjoys the advantage of being a continuous and differentiable objective in ✓ under mild assumptions.\nAssumption 2. g : Z ⇥ Rm ! X is locally Lipschitz, where Z ✓ Rd. We will denote g ✓\n(z) the evaluation on (z, ✓) for convenience. Given f and a probability distribution P z\nover Z , g satisfies Assumption 2 if there are local Lipschitz constants L(✓, z) for f\ng, which is independent of , such that E\nz⇠Pz [L(✓, z)] < +1. Theorem 3. The generator function g\n✓ parameterized by ✓ is under Assumption 2. Let PX be a fixed distribution over X and Z be a random variable over the space Z . We denote P\n✓ the distribution of g\n✓\n(Z), then max M f (PX ,P✓) is continuous everywhere and differentiable almost everywhere\nin ✓.\nIf g ✓ is parameterized by a feed-forward neural network, it satisfies Assumption 2 and can be trained via gradient descent as well as propagation, since the objective is continuous and differentiable followed by Theorem 3. More technical discussions are shown in Appendix B.\nTheorem 4. (weak⇤ topology) Let {P n } be a sequence of distributions. Considering n ! 1, under mild Assumption, max M f (PX ,Pn)! 0() Pn D ! PX , where D ! means converging in distribution [3].\nTheorem 4 shows that max M f (PX ,Pn) is a sensible cost function to the distance between PX and P n . The distance is decreasing when P n\nis getting closer to PX , which benefits the supervision of the improvement during the training. All proofs are omitted to Appendix A. In the next section, we introduce a practical realization of training g\n✓ via optimizing min ✓ max M f (PX ,P✓)."
    }, {
      "heading" : "3 MMD GAN",
      "text" : "To approximate (3), we use neural networks to parameterized g ✓ and f with expressive power. For g\n✓ , the assumption is locally Lipschitz, where commonly used feed-forward neural networks satisfy this constraint. Also, the gradient 5\n✓\n(max f g ✓ ) has to be bounded, which can be done by clipping [8] or gradient penalty [20]. The non-trivial part is f\nhas to be injective. For an injective function f , there exists an function f 1 such that f 1(f(x)) = x, 8x 2 X and f 1(f(g(z))) = g(z), 8z 2 Z1, which can be approximated by an autoencoder. In the following, we denote = {\ne , d } to be the parameter of discriminator networks, which consists of an encoder f e , and train the corresponding decoder f d ⇡ f 1 to regularize f . The objective (3) is relaxed to be min\n✓\nmax M f e\n(P(X ),P(g ✓ (Z))) E y2X[g(Z)ky f d(f e(y))k2. (4)\nNote that we ignore the autoencoder objective when we train ✓, but we use (4) for a concise presentation. We note that the empirical study suggests autoencoder objective is not necessary to lead the successful GAN training as we will show in Section 5, even though the injective property is required in Theorem 1.\nThe proposed algorithm is similar to GAN [5], which aims to optimize two neural networks g ✓ and f in a minmax formulation, while the meaning of the objective is different. In [5], f e is a discriminator (binary) classifier to distinguish two distributions. In the proposed algorithm, distinguishing two distribution is still done by two-sample test via MMD, but with an adversarially learned kernel parametrized by f\ne . g✓ is then trained to pass the hypothesis test. More connection and difference with related works is discussed in Section 4. Because of the similarity of GAN, we call the proposed algorithm MMD GAN. We present an implementation with the weight clipping in Algorithm 1, but one can easily extend to other Lipschitz approximations, such as gradient penalty [20].\nAlgorithm 1: MMD GAN, our proposed algorithm. input :↵ the learning rate, c the clipping parameter, B the batch size, n\nc the number of iterations of discriminator per generator update.\ninitialize generator parameter ✓ and discriminator parameter ; while ✓ has not converged do\nfor t = 1, . . . , n c do Sample a minibatches {x\ni }B i=1 ⇠ P(X ) and {zj}Bj=1 ⇠ P(Z)\ng\nr\nM f e\n(P(X ),P(g ✓ (Z))) E y2X[g(Z)ky f d(f e(y))k2\n+ ↵ · RMSProp( , g )\nclip( , c, c) Sample a minibatches {x\ni }B i=1 ⇠ P(X ) and {zj}Bj=1 ⇠ P(Z)\ng ✓\nr ✓\nM f e\n(P(X ),P(g ✓ (Z))) ✓ ✓ ↵ · RMSProp(✓, g\n✓\n)\nEncoding Perspective of MMD GAN: Besides from using kernel selection to explain MMD GAN, the other way to see the proposed MMD GAN is viewing f\ne as a feature transformation function, and the kernel two-sample test is performed on this transformed feature space (i.e., the code space of the autoencoder). The optimization is finding a manifold with stronger signals for MMD two-sample test. From this perspective, [9] is the special case of MMD GAN if f\ne is the identity mapping function. In such circumstance, the kernel two-sample test is conducted in the original data space."
    }, {
      "heading" : "3.1 Feasible Set Reduction",
      "text" : "Theorem 5. For any f , there exists f 0 such that M f (Pr,P✓) = Mf 0 (Pr,P✓) and Ex[f (x)] ⌫ E z [f 0 (g ✓ (z))].\nWith Theorem 5, we could reduce the feasible set of during the optimization by solving\nmin\n✓\nmax M f (Pr,P✓) s.t. E[f (x)] ⌫ E[f (g✓(z))]\n1Note that injective is not necessary invertible.\nwhich the optimal solution is still equivalent to solving (2).\nHowever, it is hard to solve the constrained optimization problem with backpropagation. We relax the constraint by ordinal regression [21] to be\nmin\n✓\nmax M f (Pr,P✓) + min E[f (x)] E[f (g ✓ (z))], 0 ,\nwhich only penalizes the objective when the constraint is violated. In practice, we observe that reducing the feasible set makes the training faster and stabler."
    }, {
      "heading" : "4 Related Works",
      "text" : "There has been a recent surge on improving GAN [5]. We review some related works here.\nConnection with WGAN: If we composite f with linear kernel instead of Gaussian kernel, and restricting the output dimension h to be 1, we then have the objective\nmin\n✓\nmax kE[f (x)] E[f\n(g ✓ (z))]k2. (5) Parameterizing f and g ✓ with neural networks and assuming 9 0 2 such f 0 = f\n, 8 , recovers Wasserstein GAN (WGAN) [8] 2. If we treat f\n(x) as the data transform function, WGAN can be interpreted as first-order moment matching (linear kernel) while MMD GAN aims to match infinite order of moments with Gaussian kernel form Taylor expansion [9]. Theoretically, Wasserstein distance has similar theoretically guarantee as Theorem 1, 3 and 4. In practice, [22] show neural networks does not have enough capacity to approximate Wasserstein distance. In Section 5, we demonstrate matching high-order moments benefits the results. [23] also propose McGAN that matches second order moment from the primal-dual norm perspective. However, the proposed algorithm requires matrix (tensor) decompositions because of exact moment matching [24], which is hard to scale to higher order moment matching. On the other hand, by giving up exact moment matching, MMD GAN can match high-order moments with kernel tricks. More detailed discussions are in Appendix B.3.\nDifference from Other Works with Autoencoders: Energy-based GANs [7, 25] also utilizes the autoencoder (AE) in its discriminator from the energy model perspective, which minimizes the reconstruction error of real samples x while maximize the reconstruction error of generated samples g\n✓ (z). In contrast, MMD GAN uses AE to approximate invertible functions by minimizing the reconstruction errors of both real samples x and generated samples g\n✓ (z). Also, [8] show EBGAN approximates total variation, with the drawback of discontinuity, while MMD GAN optimizes MMD distance. The other line of works [2, 26, 9] aims to match the AE codespace f(x), and utilize the decoder f\ndec (·). [2, 26] match the distribution of f(x) and z via different distribution distances and generate data (e.g. image) by f\ndec (z). [9] use MMD to match f(x) and g(z), and generate data via f dec\n(g(z)). The proposed MMD GAN matches the f(x) and f(g(z)), and generates data via g(z) directly as GAN. [27] is similar to MMD GAN but it considers KL-divergence without showing continuity and weak⇤ topology guarantee as we prove in Section 2.\nOther GAN Works: In addition to the discussed works, there are several extended works of GAN. [28] proposes using the linear kernel to match first moment of its discriminator’s latent features. [14] considers the variance of empirical MMD score during the training. Also, [14] only improves the latent feature matching in [28] by using kernel MMD, instead of proposing an adversarial training framework as we studied in Section 2. [29] uses Wasserstein distance to match the distribution of autoencoder loss instead of data. One can consider to extend [29] to higher order matching based on the proposed MMD GAN. A parallel work [30] use energy distance, which can be treated as MMD GAN with different kernel. However, there are some potential problems of its critic. More discussion can be referred to [31]."
    }, {
      "heading" : "5 Experiment",
      "text" : "We train MMD GAN for image generation on the MNIST [32], CIFAR-10 [33], CelebA [13], and LSUN bedrooms [12] datasets, where the size of training instances are 50K, 50K, 160K, 3M\n2Theoretically, they are not equivalent but the practical neural network approximation results in the same algorithm.\nrespectively. All the samples images are generated from a fixed noise random vectors and are not cherry-picked.\nNetwork architecture: In our experiments, we follow the architecture of DCGAN [34] to design g ✓ by its generator and f by its discriminator except for expanding the output layer of f\nto be h dimensions.\nKernel designs: The loss function of MMD GAN is implicitly associated with a family of characteristic kernels. Similar to the prior MMD seminal papers [10, 9, 14], we consider a mixture of K RBF kernels k(x, x0) = P K\nq=1 k q (x, x 0 ) where k\nq is a Gaussian kernel with bandwidth parameter q. Tuning kernel bandwidth\nq optimally still remains an open problem. In this works, we fixed K = 5 and\nq\nto be {1, 2, 4, 8, 16} and left the f to learn the kernel (feature representation) under these q .\nHyper-parameters: We use RMSProp [35] with learning rate of 0.00005 for a fair comparison with WGAN as suggested in its original paper [8]. We ensure the boundedness of model parameters of discriminator by clipping the weights point-wisely to the range [ 0.01, 0.01] as required by Assumption 2. The dimensionality h of the latent space is manually set according to the complexity of the dataset. We thus use h = 16 for MNIST, h = 64 for CelebA, and h = 128 for CIFAR-10 and LSUN bedrooms. The batch size is set to be B = 64 for all datasets."
    }, {
      "heading" : "5.1 Qualitative Analysis",
      "text" : "We start with comparing MMD GAN with GMMN on two standard benchmarks, MNIST and CIFAR10. We consider two variants for GMMN. The first one is original GMMN, which trains the generator by minimizing the MMD distance on the original data space. We call it as GMMN-D. To compare with MMD GAN, we also pretrain an autoencoder for projecting data to a manifold, then fix the autoencoder as a feature transformation, and train the generator by minimizing the MMD distance in the code space. We call it as GMMN-C.\nThe results are pictured in Figure 1. Both GMMN-D and GMMN-C are able to generate meaningful digits on MNIST because of the simple data structure. By a closer look, nonetheless, the boundary and shape of the digits in Figure 1a and 1b are often irregular and non-smooth. In contrast, the sample\ndigits in Figure 1c are more natural with smooth outline and sharper strike. For CIFAR-10 dataset, both GMMN variants fail to generate meaningful images, but resulting some low level visual features. We observe similar cases in other complex large-scale datasets such as CelebA and LSUN bedrooms, thus results are omitted. On the other hand, the proposed MMD GAN successfully outputs natural images with sharp boundary and high diversity. The results in Figure 1 confirm the success of the proposed adversarial learned kernels to enrich statistical testing power, which is the key difference between GMMN and MMD GAN.\nIf we increase the batch size of GMMN to 1024, the image quality is improved, however, it is still not competitive to MMD GAN with B = 64. The images are put in Appendix C. This demonstrates that the proposed MMD GAN can be trained more efficiently than GMMN with smaller batch size.\nComparisons with GANs: There are several representative extensions of GANs. We consider recent state-of-art WGAN [8] based on DCGAN structure [34], because of the connection with MMD GAN discussed in Section 4. The results are shown in Figure 2. For MNIST, the digits generated from WGAN in Figure 2a are more unnatural with peculiar strikes. In Contrary, the digits from MMD GAN in Figure 2d enjoy smoother contour. Furthermore, both WGAN and MMD GAN generate diversified digits, avoiding the mode collapse problems appeared in the literature of training GANs. For CelebA, we can see the difference of generated samples from WGAN and MMD GAN. Specifically, we observe varied poses, expressions, genders, skin colors and light exposure in Figure 2b and 2e. By a closer look (view on-screen with zooming in), we observe that faces from WGAN have higher chances to be blurry and twisted while faces from MMD GAN are more spontaneous with sharp and acute outline of faces. As for LSUN dataset, we could not distinguish salient differences between the samples generated from MMD GAN and WGAN."
    }, {
      "heading" : "5.2 Quantitative Analysis",
      "text" : "To quantitatively measure the quality and diversity of generated samples, we compute the inception score [28] on CIFAR-10 images. The inception score is used for GANs to measure samples quality and diversity on the pretrained inception model [28]. Models that generate collapsed samples have a relatively low score. Table 1 lists the results for 50K samples generated by various unsupervised\ngenerative models trained on CIFAR-10 dataset. The inception scores of [36, 37, 28] are directly derived from the corresponding references.\nAlthough both WGAN and MMD GAN can generate sharp images as we show in Section 5.1, our score is better than other GAN techniques except for DFM [36]. This seems to confirm empirically that higher order of moment matching between the real data and fake sample distribution benefits generating more diversified sample images. Also note DFM appears compatible with our method and combing training techniques in DFM is a possible avenue for future work."
    }, {
      "heading" : "5.3 Stability of MMD GAN",
      "text" : "We further illustrate how the MMD distance correlates well with the quality of the generated samples. Figure 4 plots the evolution of the MMD GAN estimate the MMD distance during training for MNIST, CelebA and LSUN datasets. We report the average of the ˆM\nf (PX ,P✓) with moving average to smooth the graph to reduce the variance caused by mini-batch stochastic training. We observe during the whole training process, samples generated from the same noise vector across iterations, remain similar in nature. (e.g., face identity and bedroom style are alike while details and backgrounds will evolve.) This qualitative observation indicates valuable stability of the training process. The decreasing curve with the improving quality of images supports the weak⇤ topology shown in Theorem 4. Also, We can see from the plot that the model converges very quickly. In Figure 4b, for example, it converges shortly after tens of thousands of generator iterations on CelebA dataset."
    }, {
      "heading" : "5.4 Computation Issue",
      "text" : "We conduct time complexity analysis with respect to the batch size B. The time complexity of each iteration is O(B) for WGAN and O(KB2) for our proposed MMD GAN with a mixture of K RBF kernels. The quadratic complexity O(B2) of MMD GAN is introduced by computing kernel matrix, which is sometimes criticized for being inapplicable with large batch size in practice. However, we point that there are several recent works, such as EBGAN [7], also matching pairwise relation between samples of batch size, leading to O(B2) complexity as well.\nEmpirically, we find that under GPU environment, the highly parallelized matrix operation tremendously alleviated the quadratic time to almost linear time with modest B. Figure 3 compares the computational time per generator iterations versus different B on Titan X. When B = 64, which is adapted for training MMD GAN in our experiments setting, the time per iteration of WGAN and MMD GAN is 0.268 and 0.676 seconds, respectively. When B = 1024, which is used for training GMMN in its references [9], the time per iteration becomes 4.431 and 8.565 seconds, respectively. This result coheres our argument that the empirical computational time for MMD GAN is not quadratically expensive compared to WGAN with powerful GPU parallel computation."
    }, {
      "heading" : "5.5 Better Lipschitz Approximation and Necessity of Auto-Encoder",
      "text" : "Although we used weight-clipping for Lipschitz constraint in Assumption 2, one can also use other approximations, such as gradient penalty [20]. On the other hand, in Algorithm 1, we present an algorithm with auto-encoder to be consistent with the theory that requires f\nto be injective. However, we observe that it is not necessary in practice. We show some preliminary results of training MMD GAN with gradient penalty and without the auto-encoder in Figure 5. The preliminary study indicates that MMD GAN can generate satisfactory results with other Lipschitz constraint approximation. One potential future work is conducting more thorough empirical comparison studies between different approximations."
    }, {
      "heading" : "6 Discussion",
      "text" : "We introduce a new deep generative model trained via MMD with adversarially learned kernels. We further study its theoretical properties and propose a practical realization MMD GAN, which can be trained with much smaller batch size than GMMN and has competitive performances with state-of-theart GANs. We can view MMD GAN as the first practical step forward connecting moment matching network and GAN. One important direction is applying developed tools in moment matching [15] on general GAN works based the connections shown by MMD GAN. Also, in Section 4, we connect WGAN and MMD GAN by first-order and infinite-order moment matching. [24] shows finite-order moment matching (⇠ 5) achieves the best performance on domain adaption. One could extend MMD GAN to this by using polynomial kernels. Last, in theory, an injective mapping f\nis necessary for the theoretical guarantees. However, we observe that it is not mandatory in practice as we show in Section 5.5. One conjecture is it usually learns the injective mapping with high probability by parameterizing with neural networks, which worth more study as a future work."
    }, {
      "heading" : "Acknowledgments",
      "text" : "We thank the reviewers for their helpful comments. This work is supported in part by the National Science Foundation (NSF) under grants IIS-1546329 and IIS-1563887."
    } ],
    "references" : [ {
      "title" : "Deep boltzmann machines",
      "author" : [ "Ruslan Salakhutdinov", "Geoffrey Hinton" ],
      "venue" : "In AISTATS,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2009
    }, {
      "title" : "Auto-encoding variational bayes",
      "author" : [ "Diederik P Kingma", "Max Welling" ],
      "venue" : "In ICLR,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2013
    }, {
      "title" : "All of statistics: a concise course in statistical inference",
      "author" : [ "Larry Wasserman" ],
      "venue" : "Springer Science & Business Media,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2013
    }, {
      "title" : "Show, attend and tell: Neural image caption generation with visual attention",
      "author" : [ "Kelvin Xu", "Jimmy Ba", "Ryan Kiros", "Kyunghyun Cho", "Aaron Courville", "Ruslan Salakhudinov", "Rich Zemel", "Yoshua Bengio" ],
      "venue" : "In ICML,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2015
    }, {
      "title" : "Generative adversarial nets",
      "author" : [ "Ian J. Goodfellow", "Jean Pouget-Abadie", "Mehdi Mirza", "Bing Xu", "David Warde-Farley", "Sherjil Ozair", "Aaron C. Courville", "Yoshua Bengio" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2014
    }, {
      "title" : "f-gan: Training generative neural samplers using variational divergence minimization",
      "author" : [ "Sebastian Nowozin", "Botond Cseke", "Ryota Tomioka" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2016
    }, {
      "title" : "Energy-based Generative Adversarial Network",
      "author" : [ "J. Zhao", "M. Mathieu", "Y. LeCun" ],
      "venue" : "In ICLR,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2017
    }, {
      "title" : "Generative moment matching networks",
      "author" : [ "Yujia Li", "Kevin Swersky", "Richard Zemel" ],
      "venue" : "In ICML,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2015
    }, {
      "title" : "Training generative neural networks via maximum mean discrepancy optimization",
      "author" : [ "Gintare Karolina Dziugaite", "Daniel M. Roy", "Zoubin Ghahramani" ],
      "venue" : "In UAI,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 2015
    }, {
      "title" : "A kernel two-sample test",
      "author" : [ "Arthur Gretton", "Karsten M. Borgwardt", "Malte J. Rasch", "Bernhard Schölkopf", "Alexander Smola" ],
      "venue" : null,
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2012
    }, {
      "title" : "Lsun: Construction of a large-scale image dataset using deep learning with humans in the loop",
      "author" : [ "Fisher Yu", "Ari Seff", "Yinda Zhang", "Shuran Song", "Thomas Funkhouser", "Jianxiong Xiao" ],
      "venue" : "arXiv preprint arXiv:1506.03365,",
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 2015
    }, {
      "title" : "Deep learning face attributes in the wild",
      "author" : [ "Ziwei Liu", "Ping Luo", "Xiaogang Wang", "Xiaoou Tang" ],
      "venue" : "In CVPR,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2015
    }, {
      "title" : "Generative models and model criticism via optimized maximum mean discrepancy",
      "author" : [ "Dougal J. Sutherland", "Hsiao-Yu Fish Tung", "Heiko Strathmann", "Soumyajit De", "Aaditya Ramdas", "Alexander J. Smola", "Arthur Gretton" ],
      "venue" : "In ICLR,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 2017
    }, {
      "title" : "Kernel mean embedding of distributions: A review and beyonds",
      "author" : [ "Krikamol Muandet", "Kenji Fukumizu", "Bharath Sriperumbudur", "Bernhard Schölkopf" ],
      "venue" : "arXiv preprint arXiv:1605.09522,",
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 2016
    }, {
      "title" : "Kernel choice and classifiability for rkhs embeddings of probability distributions",
      "author" : [ "Kenji Fukumizu", "Arthur Gretton", "Gert R Lanckriet", "Bernhard Schölkopf", "Bharath K Sriperumbudur" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "16",
      "shortCiteRegEx" : "16",
      "year" : 2009
    }, {
      "title" : "Optimal kernel choice for large-scale two-sample tests",
      "author" : [ "A. Gretton", "B. Sriperumbudur", "D. Sejdinovic", "H. Strathmann", "S. Balakrishnan", "M. Pontil", "K. Fukumizu" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "17",
      "shortCiteRegEx" : "17",
      "year" : 2012
    }, {
      "title" : "Optimal kernel choice for large-scale two-sample tests",
      "author" : [ "Arthur Gretton", "Dino Sejdinovic", "Heiko Strathmann", "Sivaraman Balakrishnan", "Massimiliano Pontil", "Kenji Fukumizu", "Bharath K Sriperumbudur" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "18",
      "shortCiteRegEx" : "18",
      "year" : 2012
    }, {
      "title" : "Deep kernel learning",
      "author" : [ "Andrew Gordon Wilson", "Zhiting Hu", "Ruslan Salakhutdinov", "Eric P Xing" ],
      "venue" : "In AISTATS,",
      "citeRegEx" : "19",
      "shortCiteRegEx" : "19",
      "year" : 2016
    }, {
      "title" : "Improved training of wasserstein gans",
      "author" : [ "Ishaan Gulrajani", "Faruk Ahmed", "Martin Arjovsky", "Vincent Dumoulin", "Aaron Courville" ],
      "venue" : "arXiv preprint arXiv:1704.00028,",
      "citeRegEx" : "20",
      "shortCiteRegEx" : "20",
      "year" : 2017
    }, {
      "title" : "Support vector learning for ordinal regression",
      "author" : [ "Ralf Herbrich", "Thore Graepel", "Klaus Obermayer" ],
      "venue" : null,
      "citeRegEx" : "21",
      "shortCiteRegEx" : "21",
      "year" : 1999
    }, {
      "title" : "Generalization and equilibrium in generative adversarial nets (gans)",
      "author" : [ "Sanjeev Arora", "Rong Ge", "Yingyu Liang", "Tengyu Ma", "Yi Zhang" ],
      "venue" : "arXiv preprint arXiv:1703.00573,",
      "citeRegEx" : "22",
      "shortCiteRegEx" : "22",
      "year" : 2017
    }, {
      "title" : "Mcgan: Mean and covariance feature matching gan",
      "author" : [ "Youssef Mroueh", "Tom Sercu", "Vaibhava Goel" ],
      "venue" : "arxiv pre-print",
      "citeRegEx" : "23",
      "shortCiteRegEx" : "23",
      "year" : 2017
    }, {
      "title" : "Central moment discrepancy (cmd) for domain-invariant representation learning",
      "author" : [ "Werner Zellinger", "Thomas Grubinger", "Edwin Lughofer", "Thomas Natschläger", "Susanne Saminger-Platz" ],
      "venue" : "arXiv preprint arXiv:1702.08811,",
      "citeRegEx" : "24",
      "shortCiteRegEx" : "24",
      "year" : 2017
    }, {
      "title" : "Generative adversarial networks as variational training of energy based models",
      "author" : [ "Shuangfei Zhai", "Yu Cheng", "Rogério Schmidt Feris", "Zhongfei Zhang" ],
      "venue" : null,
      "citeRegEx" : "25",
      "shortCiteRegEx" : "25",
      "year" : 2016
    }, {
      "title" : "Adversarial generator-encoder networks",
      "author" : [ "Dmitry Ulyanov", "Andrea Vedaldi", "Victor Lempitsky" ],
      "venue" : "arXiv preprint arXiv:1704.02304,",
      "citeRegEx" : "27",
      "shortCiteRegEx" : "27",
      "year" : 2017
    }, {
      "title" : "Improved techniques for training gans",
      "author" : [ "Tim Salimans", "Ian Goodfellow", "Wojciech Zaremba", "Vicki Cheung", "Alec Radford", "Xi Chen" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "28",
      "shortCiteRegEx" : "28",
      "year" : 2016
    }, {
      "title" : "Began: Boundary equilibrium generative adversarial networks",
      "author" : [ "David Berthelot", "Tom Schumm", "Luke Metz" ],
      "venue" : "arXiv preprint arXiv:1703.10717,",
      "citeRegEx" : "29",
      "shortCiteRegEx" : "29",
      "year" : 2017
    }, {
      "title" : "The cramer distance as a solution to biased wasserstein gradients",
      "author" : [ "Marc G Bellemare", "Ivo Danihelka", "Will Dabney", "Shakir Mohamed", "Balaji Lakshminarayanan", "Stephan Hoyer", "Rémi Munos" ],
      "venue" : "arXiv preprint arXiv:1705.10743,",
      "citeRegEx" : "30",
      "shortCiteRegEx" : "30",
      "year" : 2017
    }, {
      "title" : "Notes on the cramer gan",
      "author" : [ "Arthur Gretton" ],
      "venue" : "https://medium.com/towards-data-science/ notes-on-the-cramer-gan-752abd505c00,",
      "citeRegEx" : "31",
      "shortCiteRegEx" : "31",
      "year" : 2017
    }, {
      "title" : "Gradient-based learning applied to document recognition",
      "author" : [ "Yann LeCun", "Léon Bottou", "Yoshua Bengio", "Patrick Haffner" ],
      "venue" : "Proceedings of the IEEE,",
      "citeRegEx" : "32",
      "shortCiteRegEx" : "32",
      "year" : 1998
    }, {
      "title" : "Learning multiple layers of features from tiny images",
      "author" : [ "Alex Krizhevsky", "Geoffrey Hinton" ],
      "venue" : null,
      "citeRegEx" : "33",
      "shortCiteRegEx" : "33",
      "year" : 2009
    }, {
      "title" : "Unsupervised representation learning with deep convolutional generative adversarial networks",
      "author" : [ "Alec Radford", "Luke Metz", "Soumith Chintala" ],
      "venue" : "In ICLR,",
      "citeRegEx" : "34",
      "shortCiteRegEx" : "34",
      "year" : 2016
    }, {
      "title" : "Lecture 6.5-rmsprop: Divide the gradient by a running average of its recent magnitude. COURSERA: Neural networks for machine",
      "author" : [ "Tijmen Tieleman", "Geoffrey Hinton" ],
      "venue" : null,
      "citeRegEx" : "35",
      "shortCiteRegEx" : "35",
      "year" : 2012
    }, {
      "title" : "Improving generative adversarial networks with denoising feature matching",
      "author" : [ "D Warde-Farley", "Y Bengio" ],
      "venue" : "In ICLR,",
      "citeRegEx" : "36",
      "shortCiteRegEx" : "36",
      "year" : 2017
    }, {
      "title" : "Adversarially learned inference",
      "author" : [ "Vincent Dumoulin", "Ishmael Belghazi", "Ben Poole", "Alex Lamb", "Martin Arjovsky", "Olivier Mastropietro", "Aaron Courville" ],
      "venue" : "In ICLR,",
      "citeRegEx" : "37",
      "shortCiteRegEx" : "37",
      "year" : 2017
    }, {
      "title" : "Hilbert space embeddings and metrics on probability measures",
      "author" : [ "Bharath K. Sriperumbudur", "Arthur Gretton", "Kenji Fukumizu", "Bernhard Schölkopf", "Gert R.G. Lanckriet" ],
      "venue" : null,
      "citeRegEx" : "38",
      "shortCiteRegEx" : "38",
      "year" : 2010
    } ],
    "referenceMentions" : [ {
      "referenceID" : 0,
      "context" : "Deep generative model [1, 2] uses deep learning to approximate the distribution of complex datasets with promising results.",
      "startOffset" : 22,
      "endOffset" : 28
    }, {
      "referenceID" : 1,
      "context" : "Deep generative model [1, 2] uses deep learning to approximate the distribution of complex datasets with promising results.",
      "startOffset" : 22,
      "endOffset" : 28
    }, {
      "referenceID" : 2,
      "context" : "However, modeling arbitrary density is a statistically challenging task [3].",
      "startOffset" : 72,
      "endOffset" : 75
    }, {
      "referenceID" : 3,
      "context" : "In many applications, such as caption generation [4], accurate density estimation is not even necessary since we are only interested in sampling from the approximated distribution.",
      "startOffset" : 49,
      "endOffset" : 52
    }, {
      "referenceID" : 4,
      "context" : "Rather than estimating the density of PX , Generative Adversarial Network (GAN) [5] starts from a base distribution PZ over Z , such as Gaussian distribution, then trains a transformation network g✓ such that P",
      "startOffset" : 80,
      "endOffset" : 83
    }, {
      "referenceID" : 7,
      "context" : "Instead of training an auxiliary network f for measuring the distance between PX and P✓, Generative moment matching network (GMMN) [9, 10] uses kernel maximum mean discrepancy (MMD) [11], which is the centerpiece of nonparametric two-sample test, to determine the distribution distances.",
      "startOffset" : 131,
      "endOffset" : 138
    }, {
      "referenceID" : 8,
      "context" : "Instead of training an auxiliary network f for measuring the distance between PX and P✓, Generative moment matching network (GMMN) [9, 10] uses kernel maximum mean discrepancy (MMD) [11], which is the centerpiece of nonparametric two-sample test, to determine the distribution distances.",
      "startOffset" : 131,
      "endOffset" : 138
    }, {
      "referenceID" : 9,
      "context" : "Instead of training an auxiliary network f for measuring the distance between PX and P✓, Generative moment matching network (GMMN) [9, 10] uses kernel maximum mean discrepancy (MMD) [11], which is the centerpiece of nonparametric two-sample test, to determine the distribution distances.",
      "startOffset" : 182,
      "endOffset" : 186
    }, {
      "referenceID" : 9,
      "context" : "[11] shows even the simple Gaussian kernel enjoys the strong theoretical guarantees (Theorem 1).",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 10,
      "context" : "There is no promising empirical results comparable with GAN on challenging benchmarks [12, 13].",
      "startOffset" : 86,
      "endOffset" : 94
    }, {
      "referenceID" : 11,
      "context" : "There is no promising empirical results comparable with GAN on challenging benchmarks [12, 13].",
      "startOffset" : 86,
      "endOffset" : 94
    }, {
      "referenceID" : 7,
      "context" : "it also requires larger batch size than GAN needs for training, which is considered to be less efficient [9, 10, 14, 8] In this work, we try to improve GMMN and consider using MMD with adversarially learned kernels instead of fixed Gaussian kernels to have better hypothesis testing power.",
      "startOffset" : 105,
      "endOffset" : 119
    }, {
      "referenceID" : 8,
      "context" : "it also requires larger batch size than GAN needs for training, which is considered to be less efficient [9, 10, 14, 8] In this work, we try to improve GMMN and consider using MMD with adversarially learned kernels instead of fixed Gaussian kernels to have better hypothesis testing power.",
      "startOffset" : 105,
      "endOffset" : 119
    }, {
      "referenceID" : 12,
      "context" : "it also requires larger batch size than GAN needs for training, which is considered to be less efficient [9, 10, 14, 8] In this work, we try to improve GMMN and consider using MMD with adversarially learned kernels instead of fixed Gaussian kernels to have better hypothesis testing power.",
      "startOffset" : 105,
      "endOffset" : 119
    }, {
      "referenceID" : 13,
      "context" : "The unified view shows more connections between moment matching and GAN, which can potentially inspire new algorithms based on well-developed tools in statistics [15].",
      "startOffset" : 162,
      "endOffset" : 166
    }, {
      "referenceID" : 4,
      "context" : "Instead, Generative Adversarial Network (GAN) [5] trains a generator g",
      "startOffset" : 46,
      "endOffset" : 49
    }, {
      "referenceID" : 4,
      "context" : "To measure the similarity between PX and P✓ via their samples {x}n i=1 and {g✓(zj)}j=1 during the training, [5] trains the discriminator f parameterized by for help.",
      "startOffset" : 108,
      "endOffset" : 111
    }, {
      "referenceID" : 9,
      "context" : "One way to conduct two-sample test is via kernel maximum mean discrepancy (MMD) [11].",
      "startOffset" : 80,
      "endOffset" : 84
    }, {
      "referenceID" : 9,
      "context" : "[11] Given a kernel k, if k is a characteristic kernel, then M",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 7,
      "context" : "Based on Theorem 1, [9, 10] propose generative moment-matching network (GMMN), which trains g",
      "startOffset" : 20,
      "endOffset" : 27
    }, {
      "referenceID" : 8,
      "context" : "Based on Theorem 1, [9, 10] propose generative moment-matching network (GMMN), which trains g",
      "startOffset" : 20,
      "endOffset" : 27
    }, {
      "referenceID" : 14,
      "context" : "We refer interested readers to [16] for more rigorous discussions about testing power and increasing MMD distances.",
      "startOffset" : 31,
      "endOffset" : 35
    }, {
      "referenceID" : 9,
      "context" : "By [11, 17] if f is a injective function and k is characteristic, then the resulted kernel  ̃ k = k f , where  ̃ k(x, x0) = k(f(x), f(x0)) is still characteristic.",
      "startOffset" : 3,
      "endOffset" : 11
    }, {
      "referenceID" : 15,
      "context" : "By [11, 17] if f is a injective function and k is characteristic, then the resulted kernel  ̃ k = k f , where  ̃ k(x, x0) = k(f(x), f(x0)) is still characteristic.",
      "startOffset" : 3,
      "endOffset" : 11
    }, {
      "referenceID" : 16,
      "context" : "Note that [18] considers the linear combination of characteristic kernels, which can also be incorporated into the discussed composition kernels.",
      "startOffset" : 10,
      "endOffset" : 14
    }, {
      "referenceID" : 17,
      "context" : "A more general kernel is studied in [19].",
      "startOffset" : 36,
      "endOffset" : 40
    }, {
      "referenceID" : 4,
      "context" : "2 Properties of MMD with Kernel Learning [8] discuss different distances between distributions adopted by existing deep learning algorithms, and show many of them are discontinuous, such as Jensen-Shannon divergence [5] and Total variation [7], except for Wasserstein distance.",
      "startOffset" : 216,
      "endOffset" : 219
    }, {
      "referenceID" : 6,
      "context" : "2 Properties of MMD with Kernel Learning [8] discuss different distances between distributions adopted by existing deep learning algorithms, and show many of them are discontinuous, such as Jensen-Shannon divergence [5] and Total variation [7], except for Wasserstein distance.",
      "startOffset" : 240,
      "endOffset" : 243
    }, {
      "referenceID" : 2,
      "context" : "Considering n ! 1, under mild Assumption, max M f (PX ,Pn)! 0() Pn D ! PX , where D ! means converging in distribution [3].",
      "startOffset" : 119,
      "endOffset" : 122
    }, {
      "referenceID" : 18,
      "context" : "✓ ) has to be bounded, which can be done by clipping [8] or gradient penalty [20].",
      "startOffset" : 77,
      "endOffset" : 81
    }, {
      "referenceID" : 4,
      "context" : "The proposed algorithm is similar to GAN [5], which aims to optimize two neural networks g",
      "startOffset" : 41,
      "endOffset" : 44
    }, {
      "referenceID" : 4,
      "context" : "In [5], f e is a discriminator (binary) classifier to distinguish two distributions.",
      "startOffset" : 3,
      "endOffset" : 6
    }, {
      "referenceID" : 18,
      "context" : "We present an implementation with the weight clipping in Algorithm 1, but one can easily extend to other Lipschitz approximations, such as gradient penalty [20].",
      "startOffset" : 156,
      "endOffset" : 160
    }, {
      "referenceID" : 7,
      "context" : "From this perspective, [9] is the special case of MMD GAN if f e is the identity mapping function.",
      "startOffset" : 23,
      "endOffset" : 26
    }, {
      "referenceID" : 19,
      "context" : "We relax the constraint by ordinal regression [21] to be",
      "startOffset" : 46,
      "endOffset" : 50
    }, {
      "referenceID" : 4,
      "context" : "4 Related Works There has been a recent surge on improving GAN [5].",
      "startOffset" : 63,
      "endOffset" : 66
    }, {
      "referenceID" : 7,
      "context" : "If we treat f (x) as the data transform function, WGAN can be interpreted as first-order moment matching (linear kernel) while MMD GAN aims to match infinite order of moments with Gaussian kernel form Taylor expansion [9].",
      "startOffset" : 218,
      "endOffset" : 221
    }, {
      "referenceID" : 20,
      "context" : "In practice, [22] show neural networks does not have enough capacity to approximate Wasserstein distance.",
      "startOffset" : 13,
      "endOffset" : 17
    }, {
      "referenceID" : 21,
      "context" : "[23] also propose McGAN that matches second order moment from the primal-dual norm perspective.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 22,
      "context" : "However, the proposed algorithm requires matrix (tensor) decompositions because of exact moment matching [24], which is hard to scale to higher order moment matching.",
      "startOffset" : 105,
      "endOffset" : 109
    }, {
      "referenceID" : 6,
      "context" : "Difference from Other Works with Autoencoders: Energy-based GANs [7, 25] also utilizes the autoencoder (AE) in its discriminator from the energy model perspective, which minimizes the reconstruction error of real samples x while maximize the reconstruction error of generated samples g",
      "startOffset" : 65,
      "endOffset" : 72
    }, {
      "referenceID" : 23,
      "context" : "Difference from Other Works with Autoencoders: Energy-based GANs [7, 25] also utilizes the autoencoder (AE) in its discriminator from the energy model perspective, which minimizes the reconstruction error of real samples x while maximize the reconstruction error of generated samples g",
      "startOffset" : 65,
      "endOffset" : 72
    }, {
      "referenceID" : 1,
      "context" : "The other line of works [2, 26, 9] aims to match the AE codespace f(x), and utilize the decoder f",
      "startOffset" : 24,
      "endOffset" : 34
    }, {
      "referenceID" : 7,
      "context" : "The other line of works [2, 26, 9] aims to match the AE codespace f(x), and utilize the decoder f",
      "startOffset" : 24,
      "endOffset" : 34
    }, {
      "referenceID" : 1,
      "context" : "[2, 26] match the distribution of f(x) and z via different distribution distances and generate data (e.",
      "startOffset" : 0,
      "endOffset" : 7
    }, {
      "referenceID" : 7,
      "context" : "[9] use MMD to match f(x) and g(z), and generate data via f",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 24,
      "context" : "[27] is similar to MMD GAN but it considers KL-divergence without showing continuity and weak⇤ topology guarantee as we prove in Section 2.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 25,
      "context" : "[28] proposes using the linear kernel to match first moment of its discriminator’s latent features.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 12,
      "context" : "[14] considers the variance of empirical MMD score during the training.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 12,
      "context" : "Also, [14] only improves the latent feature matching in [28] by using kernel MMD, instead of proposing an adversarial training framework as we studied in Section 2.",
      "startOffset" : 6,
      "endOffset" : 10
    }, {
      "referenceID" : 25,
      "context" : "Also, [14] only improves the latent feature matching in [28] by using kernel MMD, instead of proposing an adversarial training framework as we studied in Section 2.",
      "startOffset" : 56,
      "endOffset" : 60
    }, {
      "referenceID" : 26,
      "context" : "[29] uses Wasserstein distance to match the distribution of autoencoder loss instead of data.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 26,
      "context" : "One can consider to extend [29] to higher order matching based on the proposed MMD GAN.",
      "startOffset" : 27,
      "endOffset" : 31
    }, {
      "referenceID" : 27,
      "context" : "A parallel work [30] use energy distance, which can be treated as MMD GAN with different kernel.",
      "startOffset" : 16,
      "endOffset" : 20
    }, {
      "referenceID" : 28,
      "context" : "More discussion can be referred to [31].",
      "startOffset" : 35,
      "endOffset" : 39
    }, {
      "referenceID" : 29,
      "context" : "5 Experiment We train MMD GAN for image generation on the MNIST [32], CIFAR-10 [33], CelebA [13], and LSUN bedrooms [12] datasets, where the size of training instances are 50K, 50K, 160K, 3M (2)Theoretically, they are not equivalent but the practical neural network approximation results in the same algorithm.",
      "startOffset" : 64,
      "endOffset" : 68
    }, {
      "referenceID" : 30,
      "context" : "5 Experiment We train MMD GAN for image generation on the MNIST [32], CIFAR-10 [33], CelebA [13], and LSUN bedrooms [12] datasets, where the size of training instances are 50K, 50K, 160K, 3M (2)Theoretically, they are not equivalent but the practical neural network approximation results in the same algorithm.",
      "startOffset" : 79,
      "endOffset" : 83
    }, {
      "referenceID" : 11,
      "context" : "5 Experiment We train MMD GAN for image generation on the MNIST [32], CIFAR-10 [33], CelebA [13], and LSUN bedrooms [12] datasets, where the size of training instances are 50K, 50K, 160K, 3M (2)Theoretically, they are not equivalent but the practical neural network approximation results in the same algorithm.",
      "startOffset" : 92,
      "endOffset" : 96
    }, {
      "referenceID" : 10,
      "context" : "5 Experiment We train MMD GAN for image generation on the MNIST [32], CIFAR-10 [33], CelebA [13], and LSUN bedrooms [12] datasets, where the size of training instances are 50K, 50K, 160K, 3M (2)Theoretically, they are not equivalent but the practical neural network approximation results in the same algorithm.",
      "startOffset" : 116,
      "endOffset" : 120
    }, {
      "referenceID" : 31,
      "context" : "Network architecture: In our experiments, we follow the architecture of DCGAN [34] to design g",
      "startOffset" : 78,
      "endOffset" : 82
    }, {
      "referenceID" : 8,
      "context" : "Similar to the prior MMD seminal papers [10, 9, 14], we consider a mixture of K RBF kernels k(x, x0) = P",
      "startOffset" : 40,
      "endOffset" : 51
    }, {
      "referenceID" : 7,
      "context" : "Similar to the prior MMD seminal papers [10, 9, 14], we consider a mixture of K RBF kernels k(x, x0) = P",
      "startOffset" : 40,
      "endOffset" : 51
    }, {
      "referenceID" : 12,
      "context" : "Similar to the prior MMD seminal papers [10, 9, 14], we consider a mixture of K RBF kernels k(x, x0) = P",
      "startOffset" : 40,
      "endOffset" : 51
    }, {
      "referenceID" : 32,
      "context" : "Hyper-parameters: We use RMSProp [35] with learning rate of 0.",
      "startOffset" : 33,
      "endOffset" : 37
    }, {
      "referenceID" : 31,
      "context" : "We consider recent state-of-art WGAN [8] based on DCGAN structure [34], because of the connection with MMD GAN discussed in Section 4.",
      "startOffset" : 66,
      "endOffset" : 70
    }, {
      "referenceID" : 25,
      "context" : "2 Quantitative Analysis To quantitatively measure the quality and diversity of generated samples, we compute the inception score [28] on CIFAR-10 images.",
      "startOffset" : 129,
      "endOffset" : 133
    }, {
      "referenceID" : 25,
      "context" : "The inception score is used for GANs to measure samples quality and diversity on the pretrained inception model [28].",
      "startOffset" : 112,
      "endOffset" : 116
    }, {
      "referenceID" : 33,
      "context" : "The inception scores of [36, 37, 28] are directly derived from the corresponding references.",
      "startOffset" : 24,
      "endOffset" : 36
    }, {
      "referenceID" : 34,
      "context" : "The inception scores of [36, 37, 28] are directly derived from the corresponding references.",
      "startOffset" : 24,
      "endOffset" : 36
    }, {
      "referenceID" : 25,
      "context" : "The inception scores of [36, 37, 28] are directly derived from the corresponding references.",
      "startOffset" : 24,
      "endOffset" : 36
    }, {
      "referenceID" : 33,
      "context" : "1, our score is better than other GAN techniques except for DFM [36].",
      "startOffset" : 64,
      "endOffset" : 68
    }, {
      "referenceID" : 6,
      "context" : "However, we point that there are several recent works, such as EBGAN [7], also matching pairwise relation between samples of batch size, leading to O(B2) complexity as well.",
      "startOffset" : 69,
      "endOffset" : 72
    }, {
      "referenceID" : 7,
      "context" : "When B = 1024, which is used for training GMMN in its references [9], the time per iteration becomes 4.",
      "startOffset" : 65,
      "endOffset" : 68
    }, {
      "referenceID" : 18,
      "context" : "5 Better Lipschitz Approximation and Necessity of Auto-Encoder Although we used weight-clipping for Lipschitz constraint in Assumption 2, one can also use other approximations, such as gradient penalty [20].",
      "startOffset" : 202,
      "endOffset" : 206
    }, {
      "referenceID" : 18,
      "context" : "(a) Cifar10, Giter = 300K (b) CelebA, Giter = 300K Figure 5: MMD GAN results using gradient penalty [20] and without auto-encoder reconstruction loss during training.",
      "startOffset" : 100,
      "endOffset" : 104
    } ],
    "year" : 2017,
    "abstractText" : "Generative moment matching network (GMMN) is a deep generative model that differs from Generative Adversarial Network (GAN) by replacing the discriminator in GAN with a two-sample test based on kernel maximum mean discrepancy (MMD). Although some theoretical guarantees of MMD have been studied, the empirical performance of GMMN is still not as competitive as that of GAN on challenging and large benchmark datasets. The computational efficiency of GMMN is also less desirable in comparison with GAN, partially due to its requirement for a rather large batch size during the training. In this paper, we propose to improve both the model expressiveness of GMMN and its computational efficiency by introducing adversarial kernel learning techniques, as the replacement of a fixed Gaussian kernel in the original GMMN. The new approach combines the key ideas in both GMMN and GAN, hence we name it MMD GAN. The new distance measure in MMD GAN is a meaningful loss that enjoys the advantage of weak⇤ topology and can be optimized via gradient descent with relatively small batch sizes. In our evaluation on multiple benchmark datasets, including MNIST, CIFAR-10, CelebA and LSUN, the performance of MMD GAN significantly outperforms GMMN, and is competitive with other representative GAN works.",
    "creator" : null
  }
}