{
  "name" : "1415db70fe9ddb119e23e9b2808cde38.pdf",
  "metadata" : {
    "source" : "META",
    "title" : "Global Belief Recursive Neural Networks",
    "authors" : [ "Romain Paulus", "Richard Socher", "Christopher D. Manning" ],
    "emails" : [ "romain@metamind.io", "richard@metamind.io", "manning@stanford.edu" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "Models of natural language need the ability to compose the meaning of words and phrases in order to understand complex utterances such as facts, multi-word entities, sentences or stories. There has recently been a lot of work extending single word semantic vector spaces [27, 11, 15] to compositional models of bigrams [16, 29] or phrases of arbitrary length [25, 28, 24, 10]. Work in this area so far has focused on computing the meaning of longer phrases in purely feedforward types of architectures in which the meaning of the shorter constituents that are being composed is not altered. However, a full treatment of semantic interpretation cannot be achieved without taking into consideration that the meaning of words and phrases can also change once the sentence context is observed. Take for instance the sentence in Fig. 1: The Android’s screen is better than the iPhone’s. All current recursive deep learning sentiment models [26] would attempt to classify the phrase The Android’s screen or than the iPhone’s, both of which are simply neutral. The sentiment of the overall sentence is undefined; it depends on which of the entities the user of the sentiment analysis cares about. Generally, for many analyses of social media text, users are indeed most interested in the sentiment directed towards a specific entity or phrase.\nIn order to solve the contextual classification problem in general and aspect-specific sentiment classification in particular, we introduce global belief recursive neural networks (GB-RNN). These models generalize purely feedforward recursive neural networks (RNNs) by including a feedbackward step at inference time. The backward computation uses the representations from both steps in its recursion and allows all phrases, to update their prediction based on the global context of the sentence. Unlike recurrent neural networks or window-based methods [5] the important context can be many\n∗Part of this research was performed while the author was at Stanford University.\nwords away from the phrase that is to be labeled. This will allow models to correctly classify that in the sentence of Fig. 1, Android is described with positive sentiment and iOS was not. Neither was possible to determine only from their respective phrases in isolation.\nIn order to validate the GB-RNN’s ability to contextually disambiguate sentiment on real text, we use the Twitter dataset and annotations from Semeval Challenge 2013 Task 2.1 The GB-RNN outperforms both the standard RNN and all other baselines, as well the winner of the Sentiment competition of SemEval 2013, showing that it can successfully make use of surrounding context."
    }, {
      "heading" : "2 Related Work",
      "text" : "Neural word vectors One common way to represent words is to use distributional word vectors [27] learned via dimensionality reduction of large co-occurrence matrices over documents (as in latent semantic analysis [13]), local context windows [15, 18] or combinations of both [11]. Words with similar meanings are close to each other in the vector space. Since unsupervised word vectors computed from local context windows do not always encode task-specific information, such as sentiment, word vectors can also be fine-tuned to such specific tasks [5, 24]. We introduce a hybrid approach where some dimensions are obtained from an unsupervised model and others are learned for the supervised task. We show that this performs better than both the purely supervised and unsupervised semantic word vectors.\nRecursive Neural Networks The idea of recursive neural networks (RNNs) for natural language processing (NLP) is to train a deep learning model that can be applied to inputs of any length. Unlike computer vision tasks, where it is easy to resize an image to a fixed number of pixels, natural sentences do not have a fixed size input. However, phrases and sentences have a grammatical structure that can be parsed as a binary tree [22].\nFollowing this tree structure, we can assign a fixed-length vector to each word at the leaves of the tree, and combine word and phrase pairs recursively to create intermediate node vectors of the same length, eventually having one final vector representing the whole sentence [19, 25]. Multiple recursive combination functions have been explored, from linear transformation matrices to tensor products [26]. In this work, we use the simple single matrix RNN to combine node vectors at each recursive step.\nBidirectional-recurrent and bidirectional-recursive neural networks. Recurrent neural networks are a special case of recursive neural networks that operate on chains and not trees. Unlike recursive neural networks, they don’t require a tree structure and are usually applied to time series. In a recurrent neural network, every node is combined with a summarized representation of the past nodes [8], and then the resulting combination will be forwarded to the next node. Bidirectional recurrent neural network architectures have also been explored [21] and usually compute representations independently from both ends of a time series.\nBidirectional recursive models [12, 14], developed in parallel with ours, extend the definition of the recursive neural netword by adding a backward propagation step, where information also flows from the tree root back to the leaves. We compare our model to theirs theoretically in the model section, and empirically in the experiments.\n1http://www.cs.york.ac.uk/semeval-2013/task2/\n[20] unfold the same autoencoder multiple times which gives it more representational power with the same number of parameters. Our model is different in that it takes into consideration more information at each step and can eventually make better local predictions by using global context.\nSentiment analysis. Sentiment analysis has been the subject of research for some time [4, 2, 3, 6, 1, 23]. Most approaches in sentiment analysis use “bag of words” representations that do not take the phrase structure into account but learn from word-level features. We explore our model’s ability to determine contextual sentiment on Twitter, a social media platform."
    }, {
      "heading" : "3 Global Belief Recursive Neural Networks",
      "text" : "In this section, we introduce a new model to compute context-dependent compositional vector representations of variable length phrases. These vectors are trained to be useful as features to classify each phrase and word. Fig. 2 shows an example phrase computation that we will describe in detail below. This section begins by motivating compositionality and context-dependence, followed by a definition of standard recursive neural networks. Next, we introduce our novel global belief model and hybrid unsupervised-supervised word vectors."
    }, {
      "heading" : "3.1 Context-Dependence as Motivation for Global Belief",
      "text" : "A common simplifying assumption when mapping sentences into a feature vector is that word order does not matter (“bag of words”). However, this will prevent any detailed understanding of language as exemplified in Fig. 1, where the overall sentiment of the phrase “Android beats iOS”, is unclear. Instead, we need an understanding of each phrase which leads us to deep recursive models.\nThe first step for mapping a sentence into a vector space is to parse them into a binary tree structure that captures the grammatical relationships between words. Such an input dependent binary tree then determines the architecture of a recursive neural network which will compute the hidden vectors in a bottom-up fashion starting with the word vectors. The resulting phrase vectors are given as features to a classifier. This standard RDL architecture works well for classifying the inherent or contextindependent label of a phrase. For instance, it can correctly classify that a not so beautiful day is negative in sentiment. However, not all phrases have an inherent sentiment as shown in Fig. 1.\nThe GB-RNN addresses this issue by propagating information from the root node back to the leaf nodes as described below. There are other ways context can be incorporated such as with bi-directional recurrent neural networks or with window-based methods. Both of these methods, however, cannot incorporate information from words further away from the phrase to be labeled."
    }, {
      "heading" : "3.2 Standard Recursive Neural Networks",
      "text" : "We first describe a simple recursive neural network that can be used for context-independent phraselevel classification. It can also be seen as the first step of a GB-RNN.\nAssume, for now, that each word vector a ∈ Rn is obtained by sampling each element from a uniform distribution: ai ∼ U(−0.001, 0.001). All these vectors are columns of a large embedding matrix L ∈ Rn×|V |, where |V | is the size of the vocabulary. All word vectors are learned together with the model.\nFor the example word vector sequence (abc) of Fig. 2, the RNN equations become:\np1 = f\n( W [ b c ]) , p2 = f ( W [ a p1 ]) , (1)\nwhere W ∈ Rn×2n is the matrix governing the composition and f the non-linear activation function. Each node vector is the given as input to a softmax classifier for a classification task such as sentiment analysis."
    }, {
      "heading" : "3.3 GB-RNN: Global Belief Recursive Neural Networks",
      "text" : "Our goal is to include contextual information in the recursive node vector representations. One simple solution would be to just include the k context words to the left and right of each pair as in [25]. However, this will only work if the necessary context is at most k words away. Furthermore, in order to capture more complex linguistic phenomena it may be necessary to allow for multiple words to compose the contextual shift in meaning. Instead, we will use the feedforward nodes from a standard RNN architecture and simply move back down the tree. This can also be interpreted as unfolding the tree and moving up its branches.\nHence, we keep the same Eq. 1 for computing the forward node vectors, but we introduce new feedbackward vectors, denoted with a down arrow ↓, at every level of the parse tree. Unlike the feedforward vectors, which were computed with a bottom-up recursive function, feedbackward vectors are computed with a top-down recursive function. The backwards pass starts at the root node and propagates all the way down to the single word vectors. At the root note, in our example the node p2, we have:\np↓2 = f (V p2) , (2)\nwhere V ∈ Vnd×n so that all ↓-node vectors are nd-dimensional. Starting from p↓2, we recursively get ↓-node vectors for every node as we go down the tree:[\na↓ p↓1\n] = f ( W ↓ [ p2 p↓2 ]) , [ b↓ c↓ ] = f ( W ↓ [ p1 p↓1 ]) (3)\nwhere all ↓-vectors, are nd-dimensional and hence W ↓ ∈ R(n+nd)×(n+nd) is a new de-composition matrix. Figure 2 step 2 illustrates this top-down recursive computation on our example. Once we have both feedforward and feedbackward vectors for a given node, we concatenate them and employ the standard softmax classifier to make the final prediction. For instance, the classification for word\na becomes: ya = softmax ( Wc [ a a↓ ]) , where we fold the bias into the C-class classifier weights Wc ∈ RC×(n+1).\nAt the root node, the equation for x↓root could be replaced by simply copying x ↓ root = xroot. But there are two advantages of introducing a transform matrix V . First, it helps clearly differentiating features computed during the forward step and the backward step in multiplication with W ↓. Second, it allows to use a different dimension for the x↓ vectors, which reduces the number of parameters in the W ↓ and Wclass matrices, and adds more flexibility to the model. It also performs better empirically."
    }, {
      "heading" : "3.4 Hybrid Word Vector Representations",
      "text" : "There are two ways to initialize the word vectors that are given as inputs to the RNN models. The simplest one is to initialize them to small random numbers as mentioned above and backpropagate error signals into them in order to have them capture the necessary information for the task at hand. This has the advantage of not requiring any other pre-training method and the vectors are sure to capture domain knowledge. However, the vectors are more likely to overfit and less likely to generalize well to words that have not been in the (usually smaller) labeled training set. Another approach\nis to use unsupervised methods that learn semantic word vectors such as [18]. One then has the option to backpropagate task specific errors into these vectors or keep them at their initialization. Backpropagating into them still has the potential disadvantage of hurting generalization apart from slowing down training since it increases the number of parameters by a large amount (there are usually 100, 000× 50 many parameters in the embedding matrix L). Without propagating information however one has to hope that the unsupervised method really captures all the necessary semantic information which is often not the case for sentiment (which suffers from the antonym problem).\nIn this paper we propose to combine both ideas by representing each word as a concatenation of both unsupervised vectors that are kept at their initialization during training and adding a small additional vector into which we propagate the task specific error signal. This vector representation applies only to the feedforward word vectors and shold not be confused with the combination of the feedwordard and feedbackward node vectors in the softmax.\nFigure 3.4 shows the resulting word vectors trained on unlabeled documents on one part (the first 100 dimensions), and trained on labeled examples on the other part (the remaining dimensions)."
    }, {
      "heading" : "3.5 Training",
      "text" : "The GB-RNN is trained by using backpropagation through structure [9]. We train the parameters by optimizing the regularized cross-entropy error for labeled node vectors with mini-batched AdaGrad [7]. Since we don’t have labels for every node of the training trees, we decided that unlabeled nodes do not add an additional error during training. For all models, we use a development set to cross-validate over regularization of the different weights, word vector size, mini-batch size, dropout probability and activation function (rectified linear or logistic function).\nWe also applied the dropout technique to improve training with high dimensional word vectors. Node vector units are randomly set to zero with a probability of 0.5 at each training step. Our experiments show that applying dropout in this way helps differentiating word vector units and hidden units, and leads to better performance. The high-dimensional hybrid word vectors that we introduced previously have obtained a higher accuracy than other word vectors with the use of dropout."
    }, {
      "heading" : "3.6 Comparison to Other Models",
      "text" : "The idea of unfolding of neural networks is commonly used in autoencoders as well as in a recursive setting [23], in this setting the unfolding is only used during training and not at inference time to update the beliefs about the inputs.\nIrsoy and Cardie [12] introduced a bidirectional RNN similar to ours. It employs the same standard feedforward RNN, but a different computation for the backward ↓ vectors. In practice, their model is defined by the same forward equations as ours. However, equation 3 which computes the backward vectors is instead: [\nb↓ c↓\n] = f ([ V b+W ↓lbp ↓ 1\nV c+W ↓rbp ↓ 1\n]) (4)\nCorrect FUSION’s 5th General Meeting is tonight at 7 in ICS 213! Come out and carve pumpkins mid-quarter with us!\nCorrect I would rather eat my left foot then to be taking the SATs tomorrow Correct Special THANKS to EVERYONE for coming out to Taboo Tuesday With DST tonight! It was FUN&educational!!! :) @XiEtaDST Correct Tough loss for @statebaseball today. Good luck on Monday with selection Sunday Correct I got the job at Claytons!(: I start Monday doing Sheetrock(: #MoneyMakin Correct St Pattys is no big deal for me, no fucks are given, but Cinco De Mayo on the other hand .. thats my\nWhere W ↓lb and W ↓ rb are two matrices with dimensions nd × nd. For a better comparison with our model we rewrite Eq. 3 and make explicit the 4 blocks of W ↓:\nLet W ↓ =\n[ W ↓lf W ↓ lb\nW ↓rf W ↓ rb\n] , then\n[ b↓\nc↓\n] = f ([ W ↓lfp1 +W ↓ lbp ↓ 1\nW ↓rfp1 +W ↓ rbp ↓ 1\n]) , (5)\nwhere the dimensions of W ↓lf and W ↓ rf are nd×n, and the dimensions of W ↓ ld and W ↓ rd are nd×nd.\nA closer comparison between Eqs. 4 and 5 reveals that both use a left and right forward transformation W ↓lfp1 and W ↓ rfp1, but the other parts of the sums differ. In the bidirectional-RNN, the transformation of any children is defined by the forward parent and independent on its position (left or right node). Whereas our GB-RNN makes uses of both the forward and backward parent node. The intuition behind our choice is that using both nodes helps to push the model to disentangled the children from their backward parent vector. We also note that our model does not use the forward node vector for computing the backward node vector, but we find this not necessary since the softmax function already combines the two vectors.\nOur model also has n · nd more parameters to compute the feedbackward vectors than the bidirectional-RNN. The W ↓ matrix of our model has 2n2d + 2n · nd parameters, while the other model has a total of 2n2d + n · nd parameters with the W ↓ lf , W ↓ rf and V matrices. We show in the next section that GB-RNN outperforms the bidirectional RNN in our experiments."
    }, {
      "heading" : "4 Experiments",
      "text" : "We present a qualitative and quantitative analysis of the GB-RNN on a contextual sentiment classification task. The main dataset is provided by the SemEval 2013, Task 2 competition [17]. We outperform the winners of the 2013 challenge, as well as several baseline and model ablations."
    }, {
      "heading" : "4.1 Evaluation Dataset",
      "text" : "The SemEval competition dataset is composed of tweets labeled for 3 different sentiment classes: positive, neutral and negative. The tweets in this dataset were split into a train (7862 labeled phrases), development (7862) and development-test (7862) set. The final test set is composed of 10681 examples. Fig. 4 shows example GB-RNN predictions on phrases marked for classification in this dataset. The development dataset consists only of tweets whereas the final evaluation dataset included also short text messages (SMS in the tables below).\nTweets were parsed using the Stanford Parser [22] which includes tokenizing of negations (e.g., don’t becomes two tokens do and n’t). We constrained the parser to keep each phrase labeled by the dataset inside its own subtree, so that each labeled example is represented by a single node and can be classified easily."
    }, {
      "heading" : "4.2 Comparison with Competition Systems",
      "text" : "The first comparison is with several highly tuned systems from the SemEval 2013, Task 2 competition. The competition was scored by an average of positive and negative class F1 scores. Table 1 lists results for several methods, together with the resources and features used by each method. Most systems used a considerable amount of hand-crafted features. In contrast, the GB-RNN only needs a parser for the tree structure, unsupervised word vectors and training data. Since the competition allowed for external data we outline below the additional training data we use. Our best model is an ensemble of the top 5 GB-RNN models trained independently. Their predictions were then averaged to produce the final output."
    }, {
      "heading" : "4.3 Comparison with Baselines",
      "text" : "Next we compare our single best model to several baselines and model ablations. We used the same hybrid word vectors with dropout training for the RNN, the bidirectional RNN and the GB-RNN. The best models were selected by cross-validating on the dev set for several hyper-parameters (word vectors dimension, hidden node vector dimension, number of training epochs, regularization parameters, activation function, training batch size and dropout probability) and we kept the models with the highest cross-validation accuracy. Table 2 shows these results. The most important comparison is against the purely feedforward RNN which does not take backward sentence context into account. This model performs over 5% worse than the GB-RNN.\nFor the logistic regression and Bigram Naive Bayes classification, each labeled phrase was taken as a separate example, removing the surrounding context. Another set of baselines used a context window for classification as well as the entire tweet as input to the classifier.\nOptimal performance for the single best GB-RNN was achieved by using vector sizes of 130 dimensions (100 pre-trained, fixed word vectors and 30 trained on sentiment data), a mini-batch size of 30, dropout with p = 0.5 and sigmoid non-linearity. In table 3, we show that the concatenation of fixed, unsupervised vectors with additional randomly initialized, supervised vectors performs better than both methods."
    }, {
      "heading" : "4.4 Model Analysis: Additional Training Data",
      "text" : "Because the competition allowed the usage of arbitrary resources we included as training data labeled unigrams and bigrams extracted from the NRC-Canada system’s sentiment lexicon. Adding these additional training examples increased accuracy by 2%. Although this lexicon helps reduc-\ning the number of unknown tokens, it does not do a good job for training recursive composition functions, because each example is short.\nWe also included our own dataset composed 176,311 noisily labeled tweets (using heuristics such as smiley faces) as well as the movie reviews dataset from [26]. In both datasets the labels only denote the context-independent sentiment of a phrase or full sentence. Hence, we trained the final model in two steps: train the standard RNN, then train the full GB-RNN model on the smaller context-specific competition data. Training the GB-RNN jointly in this fashion gave a 1% accuracy improvement."
    }, {
      "heading" : "5 Conclusion",
      "text" : "We introduced global belief recursive neural networks, applied to the task of contextual sentiment analysis. The idea of propagating beliefs through neural networks is a powerful and important piece for interpreting natural language. The applicability of this idea is more general than RNNs and can be helpful for a variety of NLP tasks such as word-sense disambiguation."
    }, {
      "heading" : "Acknowledgments",
      "text" : "We thank the anonymous reviewers for their valuable comments."
    } ],
    "references" : [ {
      "title" : "From tweets to polls: Linking text sentiment to public opinion time series",
      "author" : [ "B.R. Routledge B. O’Connor", "R. Balasubramanyan", "N.A. Smith" ],
      "venue" : "International AAAI Conference on Weblogs and Social Media,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2010
    }, {
      "title" : "Robust sentiment detection on twitter from biased and noisy data",
      "author" : [ "L. Barbosa", "J. Feng" ],
      "venue" : "COLING ’10 Proceedings of the 23rd International Conference on Computational Linguistics: Posters,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2010
    }, {
      "title" : "Sentiment knowledge discovery in twitter streaming data",
      "author" : [ "A. Bifet", "E. Frank" ],
      "venue" : "Proceedings of the 13th international conference on Discovery science,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2010
    }, {
      "title" : "Twitter power: Tweets as electronic word of mouth",
      "author" : [ "K. Sobel B.J. Jansen", "M. Zhang", "A. Chowdury" ],
      "venue" : "Journal of the American Society for Information Science and Technology,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2009
    }, {
      "title" : "Natural Language Processing (Almost) from Scratch",
      "author" : [ "R. Collobert", "J. Weston", "L. Bottou", "M. Karlen", "K. Kavukcuoglu", "P. Kuksa" ],
      "venue" : null,
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2011
    }, {
      "title" : "Enhanced sentiment learning using twitter hashtags and smileys",
      "author" : [ "O. Tsur D. Davidov", "A. Rappoport" ],
      "venue" : "Association for Computational Linguistics,",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2010
    }, {
      "title" : "Adaptive subgradient methods for online learning and stochastic optimization",
      "author" : [ "J. Duchi", "E. Hazan", "Y. Singer" ],
      "venue" : null,
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2011
    }, {
      "title" : "Distributed representations, simple recurrent networks, and grammatical structure",
      "author" : [ "J.L. Elman" ],
      "venue" : "Machine Learning,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 1991
    }, {
      "title" : "Learning task-dependent distributed representations by backpropagation through structure",
      "author" : [ "C. Goller", "A. Küchler" ],
      "venue" : "In Proceedings of the International Conference on Neural Networks,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 1996
    }, {
      "title" : "Multi-step regression learning for compositional distributional semantics",
      "author" : [ "E. Grefenstette", "G. Dinu", "Y.-Z. Zhang", "M. Sadrzadeh", "M. Baroni" ],
      "venue" : "In IWCS,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 2013
    }, {
      "title" : "Improving Word Representations via Global Context and Multiple Word Prototypes",
      "author" : [ "E.H. Huang", "R. Socher", "C.D. Manning", "A.Y. Ng" ],
      "venue" : "In ACL,",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2012
    }, {
      "title" : "Bidirectional recursive neural networks for token-level labeling with structure",
      "author" : [ "O. Irsoy", "C. Cardie" ],
      "venue" : "NIPS Deep Learning Workshop,",
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 2013
    }, {
      "title" : "A solution to Plato’s problem: the Latent Semantic Analysis theory of acquisition, induction and representation of knowledge",
      "author" : [ "T.K. Landauer", "S.T. Dumais" ],
      "venue" : "Psychological Review,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 1997
    }, {
      "title" : "The inside-outside recursive neural network model for dependency parsing",
      "author" : [ "P. Le", "W. Zuidema" ],
      "venue" : null,
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 2014
    }, {
      "title" : "Linguistic regularities in continuous spaceword representations",
      "author" : [ "T. Mikolov", "W. Yih", "G. Zweig" ],
      "venue" : "In HLT-NAACL,",
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 2013
    }, {
      "title" : "Composition in distributional models of semantics",
      "author" : [ "J. Mitchell", "M. Lapata" ],
      "venue" : "Cognitive Science,",
      "citeRegEx" : "16",
      "shortCiteRegEx" : "16",
      "year" : 2010
    }, {
      "title" : "Semeval-2013 task 2: Sentiment analysis in twitter",
      "author" : [ "Z. Kozareva P. Nakov" ],
      "venue" : "Proceedings of the Seventh International Workshop on Semantic Evaluation (SemEval",
      "citeRegEx" : "17",
      "shortCiteRegEx" : "17",
      "year" : 2013
    }, {
      "title" : "Glove: Global vectors for word representation",
      "author" : [ "J. Pennington", "R. Socher", "C.D. Manning" ],
      "venue" : null,
      "citeRegEx" : "18",
      "shortCiteRegEx" : "18",
      "year" : 2014
    }, {
      "title" : "Recursive distributed representations",
      "author" : [ "J.B. Pollack" ],
      "venue" : "Artificial Intelligence,",
      "citeRegEx" : "19",
      "shortCiteRegEx" : "19",
      "year" : 1990
    }, {
      "title" : "Discriminative recurrent sparse auto-encoders",
      "author" : [ "J.T. Rolfe", "Y. LeCun" ],
      "venue" : null,
      "citeRegEx" : "20",
      "shortCiteRegEx" : "20",
      "year" : 2013
    }, {
      "title" : "Bidirectional recurrent neural networks",
      "author" : [ "M. Schuster", "K.K. Paliwal" ],
      "venue" : "Signal Processing, IEEE Transactions,",
      "citeRegEx" : "21",
      "shortCiteRegEx" : "21",
      "year" : 1997
    }, {
      "title" : "Parsing With Compositional Vector Grammars",
      "author" : [ "R. Socher", "J. Bauer", "C.D. Manning", "A.Y. Ng" ],
      "venue" : "In ACL,",
      "citeRegEx" : "22",
      "shortCiteRegEx" : "22",
      "year" : 2013
    }, {
      "title" : "Dynamic Pooling and Unfolding Recursive Autoencoders for Paraphrase Detection",
      "author" : [ "R. Socher", "E.H. Huang", "J. Pennington", "A.Y. Ng", "C.D. Manning" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "23",
      "shortCiteRegEx" : "23",
      "year" : 2011
    }, {
      "title" : "Semantic Compositionality Through Recursive Matrix-Vector Spaces",
      "author" : [ "R. Socher", "B. Huval", "C.D. Manning", "A.Y. Ng" ],
      "venue" : "In EMNLP,",
      "citeRegEx" : "24",
      "shortCiteRegEx" : "24",
      "year" : 2012
    }, {
      "title" : "Learning continuous phrase representations and syntactic parsing with recursive neural networks",
      "author" : [ "R. Socher", "C.D. Manning", "A.Y. Ng" ],
      "venue" : "In Proceedings of the NIPS-2010 Deep Learning and Unsupervised Feature Learning Workshop,",
      "citeRegEx" : "25",
      "shortCiteRegEx" : "25",
      "year" : 2010
    }, {
      "title" : "Recursive deep models for semantic compositionality over a sentiment treebank",
      "author" : [ "R. Socher", "A. Perelygin", "J. Wu", "J. Chuang", "C. Manning", "A. Ng", "C. Potts" ],
      "venue" : "In EMNLP,",
      "citeRegEx" : "26",
      "shortCiteRegEx" : "26",
      "year" : 2013
    }, {
      "title" : "From frequency to meaning: Vector space models of semantics",
      "author" : [ "P.D. Turney", "P. Pantel" ],
      "venue" : "Journal of Artificial Intelligence Research,",
      "citeRegEx" : "27",
      "shortCiteRegEx" : "27",
      "year" : 2010
    }, {
      "title" : "Compositional matrix-space models for sentiment analysis",
      "author" : [ "A. Yessenalina", "C. Cardie" ],
      "venue" : "In EMNLP,",
      "citeRegEx" : "28",
      "shortCiteRegEx" : "28",
      "year" : 2011
    }, {
      "title" : "Estimating linear models for compositional distributional semantics",
      "author" : [ "F.M. Zanzotto", "I. Korkontzelos", "F. Fallucchi", "S. Manandhar" ],
      "venue" : "In COLING,",
      "citeRegEx" : "29",
      "shortCiteRegEx" : "29",
      "year" : 2010
    } ],
    "referenceMentions" : [ {
      "referenceID" : 26,
      "context" : "There has recently been a lot of work extending single word semantic vector spaces [27, 11, 15] to compositional models of bigrams [16, 29] or phrases of arbitrary length [25, 28, 24, 10].",
      "startOffset" : 83,
      "endOffset" : 95
    }, {
      "referenceID" : 10,
      "context" : "There has recently been a lot of work extending single word semantic vector spaces [27, 11, 15] to compositional models of bigrams [16, 29] or phrases of arbitrary length [25, 28, 24, 10].",
      "startOffset" : 83,
      "endOffset" : 95
    }, {
      "referenceID" : 14,
      "context" : "There has recently been a lot of work extending single word semantic vector spaces [27, 11, 15] to compositional models of bigrams [16, 29] or phrases of arbitrary length [25, 28, 24, 10].",
      "startOffset" : 83,
      "endOffset" : 95
    }, {
      "referenceID" : 15,
      "context" : "There has recently been a lot of work extending single word semantic vector spaces [27, 11, 15] to compositional models of bigrams [16, 29] or phrases of arbitrary length [25, 28, 24, 10].",
      "startOffset" : 131,
      "endOffset" : 139
    }, {
      "referenceID" : 28,
      "context" : "There has recently been a lot of work extending single word semantic vector spaces [27, 11, 15] to compositional models of bigrams [16, 29] or phrases of arbitrary length [25, 28, 24, 10].",
      "startOffset" : 131,
      "endOffset" : 139
    }, {
      "referenceID" : 24,
      "context" : "There has recently been a lot of work extending single word semantic vector spaces [27, 11, 15] to compositional models of bigrams [16, 29] or phrases of arbitrary length [25, 28, 24, 10].",
      "startOffset" : 171,
      "endOffset" : 187
    }, {
      "referenceID" : 27,
      "context" : "There has recently been a lot of work extending single word semantic vector spaces [27, 11, 15] to compositional models of bigrams [16, 29] or phrases of arbitrary length [25, 28, 24, 10].",
      "startOffset" : 171,
      "endOffset" : 187
    }, {
      "referenceID" : 23,
      "context" : "There has recently been a lot of work extending single word semantic vector spaces [27, 11, 15] to compositional models of bigrams [16, 29] or phrases of arbitrary length [25, 28, 24, 10].",
      "startOffset" : 171,
      "endOffset" : 187
    }, {
      "referenceID" : 9,
      "context" : "There has recently been a lot of work extending single word semantic vector spaces [27, 11, 15] to compositional models of bigrams [16, 29] or phrases of arbitrary length [25, 28, 24, 10].",
      "startOffset" : 171,
      "endOffset" : 187
    }, {
      "referenceID" : 25,
      "context" : "All current recursive deep learning sentiment models [26] would attempt to classify the phrase The Android’s screen or than the iPhone’s, both of which are simply neutral.",
      "startOffset" : 53,
      "endOffset" : 57
    }, {
      "referenceID" : 4,
      "context" : "Unlike recurrent neural networks or window-based methods [5] the important context can be many",
      "startOffset" : 57,
      "endOffset" : 60
    }, {
      "referenceID" : 26,
      "context" : "Neural word vectors One common way to represent words is to use distributional word vectors [27] learned via dimensionality reduction of large co-occurrence matrices over documents (as in latent semantic analysis [13]), local context windows [15, 18] or combinations of both [11].",
      "startOffset" : 92,
      "endOffset" : 96
    }, {
      "referenceID" : 12,
      "context" : "Neural word vectors One common way to represent words is to use distributional word vectors [27] learned via dimensionality reduction of large co-occurrence matrices over documents (as in latent semantic analysis [13]), local context windows [15, 18] or combinations of both [11].",
      "startOffset" : 213,
      "endOffset" : 217
    }, {
      "referenceID" : 14,
      "context" : "Neural word vectors One common way to represent words is to use distributional word vectors [27] learned via dimensionality reduction of large co-occurrence matrices over documents (as in latent semantic analysis [13]), local context windows [15, 18] or combinations of both [11].",
      "startOffset" : 242,
      "endOffset" : 250
    }, {
      "referenceID" : 17,
      "context" : "Neural word vectors One common way to represent words is to use distributional word vectors [27] learned via dimensionality reduction of large co-occurrence matrices over documents (as in latent semantic analysis [13]), local context windows [15, 18] or combinations of both [11].",
      "startOffset" : 242,
      "endOffset" : 250
    }, {
      "referenceID" : 10,
      "context" : "Neural word vectors One common way to represent words is to use distributional word vectors [27] learned via dimensionality reduction of large co-occurrence matrices over documents (as in latent semantic analysis [13]), local context windows [15, 18] or combinations of both [11].",
      "startOffset" : 275,
      "endOffset" : 279
    }, {
      "referenceID" : 4,
      "context" : "Since unsupervised word vectors computed from local context windows do not always encode task-specific information, such as sentiment, word vectors can also be fine-tuned to such specific tasks [5, 24].",
      "startOffset" : 194,
      "endOffset" : 201
    }, {
      "referenceID" : 23,
      "context" : "Since unsupervised word vectors computed from local context windows do not always encode task-specific information, such as sentiment, word vectors can also be fine-tuned to such specific tasks [5, 24].",
      "startOffset" : 194,
      "endOffset" : 201
    }, {
      "referenceID" : 21,
      "context" : "However, phrases and sentences have a grammatical structure that can be parsed as a binary tree [22].",
      "startOffset" : 96,
      "endOffset" : 100
    }, {
      "referenceID" : 18,
      "context" : "Following this tree structure, we can assign a fixed-length vector to each word at the leaves of the tree, and combine word and phrase pairs recursively to create intermediate node vectors of the same length, eventually having one final vector representing the whole sentence [19, 25].",
      "startOffset" : 276,
      "endOffset" : 284
    }, {
      "referenceID" : 24,
      "context" : "Following this tree structure, we can assign a fixed-length vector to each word at the leaves of the tree, and combine word and phrase pairs recursively to create intermediate node vectors of the same length, eventually having one final vector representing the whole sentence [19, 25].",
      "startOffset" : 276,
      "endOffset" : 284
    }, {
      "referenceID" : 25,
      "context" : "Multiple recursive combination functions have been explored, from linear transformation matrices to tensor products [26].",
      "startOffset" : 116,
      "endOffset" : 120
    }, {
      "referenceID" : 7,
      "context" : "In a recurrent neural network, every node is combined with a summarized representation of the past nodes [8], and then the resulting combination will be forwarded to the next node.",
      "startOffset" : 105,
      "endOffset" : 108
    }, {
      "referenceID" : 20,
      "context" : "Bidirectional recurrent neural network architectures have also been explored [21] and usually compute representations independently from both ends of a time series.",
      "startOffset" : 77,
      "endOffset" : 81
    }, {
      "referenceID" : 11,
      "context" : "Bidirectional recursive models [12, 14], developed in parallel with ours, extend the definition of the recursive neural netword by adding a backward propagation step, where information also flows from the tree root back to the leaves.",
      "startOffset" : 31,
      "endOffset" : 39
    }, {
      "referenceID" : 13,
      "context" : "Bidirectional recursive models [12, 14], developed in parallel with ours, extend the definition of the recursive neural netword by adding a backward propagation step, where information also flows from the tree root back to the leaves.",
      "startOffset" : 31,
      "endOffset" : 39
    }, {
      "referenceID" : 19,
      "context" : "[20] unfold the same autoencoder multiple times which gives it more representational power with the same number of parameters.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 3,
      "context" : "Sentiment analysis has been the subject of research for some time [4, 2, 3, 6, 1, 23].",
      "startOffset" : 66,
      "endOffset" : 85
    }, {
      "referenceID" : 1,
      "context" : "Sentiment analysis has been the subject of research for some time [4, 2, 3, 6, 1, 23].",
      "startOffset" : 66,
      "endOffset" : 85
    }, {
      "referenceID" : 2,
      "context" : "Sentiment analysis has been the subject of research for some time [4, 2, 3, 6, 1, 23].",
      "startOffset" : 66,
      "endOffset" : 85
    }, {
      "referenceID" : 5,
      "context" : "Sentiment analysis has been the subject of research for some time [4, 2, 3, 6, 1, 23].",
      "startOffset" : 66,
      "endOffset" : 85
    }, {
      "referenceID" : 0,
      "context" : "Sentiment analysis has been the subject of research for some time [4, 2, 3, 6, 1, 23].",
      "startOffset" : 66,
      "endOffset" : 85
    }, {
      "referenceID" : 22,
      "context" : "Sentiment analysis has been the subject of research for some time [4, 2, 3, 6, 1, 23].",
      "startOffset" : 66,
      "endOffset" : 85
    }, {
      "referenceID" : 24,
      "context" : "One simple solution would be to just include the k context words to the left and right of each pair as in [25].",
      "startOffset" : 106,
      "endOffset" : 110
    }, {
      "referenceID" : 17,
      "context" : "is to use unsupervised methods that learn semantic word vectors such as [18].",
      "startOffset" : 72,
      "endOffset" : 76
    }, {
      "referenceID" : 8,
      "context" : "The GB-RNN is trained by using backpropagation through structure [9].",
      "startOffset" : 65,
      "endOffset" : 68
    }, {
      "referenceID" : 6,
      "context" : "We train the parameters by optimizing the regularized cross-entropy error for labeled node vectors with mini-batched AdaGrad [7].",
      "startOffset" : 125,
      "endOffset" : 128
    }, {
      "referenceID" : 22,
      "context" : "The idea of unfolding of neural networks is commonly used in autoencoders as well as in a recursive setting [23], in this setting the unfolding is only used during training and not at inference time to update the beliefs about the inputs.",
      "startOffset" : 108,
      "endOffset" : 112
    }, {
      "referenceID" : 11,
      "context" : "Irsoy and Cardie [12] introduced a bidirectional RNN similar to ours.",
      "startOffset" : 17,
      "endOffset" : 21
    }, {
      "referenceID" : 16,
      "context" : "The main dataset is provided by the SemEval 2013, Task 2 competition [17].",
      "startOffset" : 69,
      "endOffset" : 73
    }, {
      "referenceID" : 21,
      "context" : "Tweets were parsed using the Stanford Parser [22] which includes tokenizing of negations (e.",
      "startOffset" : 45,
      "endOffset" : 49
    }, {
      "referenceID" : 25,
      "context" : "We also included our own dataset composed 176,311 noisily labeled tweets (using heuristics such as smiley faces) as well as the movie reviews dataset from [26].",
      "startOffset" : 155,
      "endOffset" : 159
    } ],
    "year" : 2014,
    "abstractText" : "Recursive Neural Networks have recently obtained state of the art performance on several natural language processing tasks. However, because of their feedforward architecture they cannot correctly predict phrase or word labels that are determined by context. This is a problem in tasks such as aspect-specific sentiment classification which tries to, for instance, predict that the word Android is positive in the sentence Android beats iOS. We introduce global belief recursive neural networks (GB-RNNs) which are based on the idea of extending purely feedforward neural networks to include one feedbackward step during inference. This allows phrase level predictions and representations to give feedback to words. We show the effectiveness of this model on the task of contextual sentiment analysis. We also show that dropout can improve RNN training and that a combination of unsupervised and supervised word vector representations performs better than either alone. The feedbackward step improves F1 performance by 3% over the standard RNN on this task, obtains state-of-the-art performance on the SemEval 2013 challenge and can accurately predict the sentiment of specific entities.",
    "creator" : null
  }
}