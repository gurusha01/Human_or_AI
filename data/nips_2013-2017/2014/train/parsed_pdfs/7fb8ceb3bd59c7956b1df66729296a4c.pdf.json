{
  "name" : "7fb8ceb3bd59c7956b1df66729296a4c.pdf",
  "metadata" : {
    "source" : "META",
    "title" : "Algorithm selection by rational metareasoning as a model of human strategy selection",
    "authors" : [ "Falk Lieder", "Helen Wills" ],
    "emails" : [ "falk.lieder@berkeley.edu", "dillonplunkett@berkeley.edu", "jhamrick@berkeley.edu", "russell@cs.berkeley.edu", "nickjhay@berkeley.edu", "griffiths@berkeley.edu" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "To solve complex problems in real-time, intelligent agents have to make efficient use of their finite computational resources. Although there are general purpose algorithms, particular problems can often be solved more efficiently by specialized algorithms. The human mind can take advantage of this fact: People appear to have a toolbox of cognitive strategies [1] from which they choose adaptively [2, 3]. How these choices are made is an important, open question in cognitive science [4]. At an abstract level, choosing a cognitive strategy is equivalent to the algorithm selection problem in computer science [5]: given a set of possible inputs I, a set of possible algorithms A, and a performance metric, find the selection mapping from I toA that maximizes the expected performance. Here, we draw on a theoretical framework from artificial intelligence–rational metareasoning [6]– and Bayesian machine learning to develop a mathematical theory of how people should choose between cognitive strategies and test its predictions in a behavioral experiment.\nIn the first section, we apply rational metareasoning to the algorithm selection problem and derive how the optimal algorithm selection mapping can be efficiently approximated by model-based learning when a small number of features is predictive of the algorithm’s runtime and accuracy. In Section 2, we evaluate the performance of our solution against state-of-the-art methods for sorting\nalgorithm selection. In Sections 3 and 4, we apply our theory to cognitive modeling and report a behavioral experiment demonstrating that people quickly learn to adaptively choose between cognitive strategies in a manner predicted by our model but inconsistent with previous theories. We conclude with future directions at the interface of psychology and artificial intelligence."
    }, {
      "heading" : "2 Algorithm selection by rational metareasoning",
      "text" : "Metareasoning is the problem of deciding which computations to perform given a problem and a computational architecture [6]. Algorithm selection is a special case of metareasoning in which the choice is limited to a few sequences of computations that generate complete results. According to rational metareasoning [6], the optimal solution maximizes the value of computation (VOC). The VOC is the expected utility of acting after having performed the computation (and additional computations) minus the expected utility of acting immediately. In the general case, determining the VOC requires solving a Markov decision problem [7]. Yet, in the special case of algorithm selection, the hard problem of planning which computations to perform how often and in which order reduces to the simpler one-shot choice between a small number algorithms. We can therefore use the following approximation to the VOC from [6] as the performance metric to be maximized:\nVOC(a; i) ≈ EP (S|a,i) [S]− EP (T |a,i) [TC(T )] (1) m(i) = argmax\na∈A VOC(a; i), (2)\nwhere a ∈ A is one of the available algorithms, i ∈ I is the input, S and T are the score and runtime of algorithm a on input i, and TC(T ) is the opportunity cost of running the algorithm for T units of time. The score S can be binary (correct vs. incorrect output) or numeric (e.g., error penalty). The selection mapping m defined in Equation 2 depends on the conditional distributions of score and runtime (P (S|a, i) and P (T |a, i)). These distributions are generally unknown, but they can be learned. Learning an approximation to the VOC from experience, i.e. meta-level learning [6], is a hard technical challenge [8], but it is tractable in the special case of algorithm selection.\nLearning the conditional distributions of score and runtime separately for every possible input is generally intractable. However, in many domains the inputs are structured and can be approximately represented by a small number of features. Concretely, the effect of the input on score and runtime is mediated by its features f = (f1(i), · · · , fN (i)):\nP (S|a, i) = P (S|f , a) = P (S|f1(i), · · · , fN (i), a) (3) P (T |a, i) = P (T |f , a) = P (T |f1(i), · · · , fN (i), a). (4)\nIf the features are observable and the distributions P (S|f1(i), · · · , fN (i), a) and P (T |f1(i), · · · , fN (i), a) have been learned, then one can very efficiently compute an estimate of the expected value of applying the algorithm to a novel input. To learn the distributions P (S|f1(i), · · · , fN (i), a) and P (T |f1(i), · · · , fN (i), a) from examples, we assume simple parametric forms for these distributions and estimate their parameters from the scores and runtimes of the algorithms on previous problem instances.\nAs a first approximation, we assume that the runtime of an algorithm on problems with features f is normally distributed with mean µ(f ; a) and standard deviation σ(f ; a). We further assumed that the mean is a 2nd order polynomial in the extended features f̃ = (f1(i), · · · , fN (i), log(f1(i)), · · · , log(fN (i))) and that the variance is independent of the mean:\nP (T |f ; a, α) = N (µT (f ; a, α), σT (a)) (5)\nµT (f ; a, α) = 2∑ k1=0 · · · 2− ∑N−1 i=1 ki∑ kN=0 αk1,··· ,kN ;a · f̃ k1 1 · . . . · f̃ kN N (6) P (σT (a)) = Gamma(σ−1T ; 0.01, 0.01), (7)\nwhere α are the regression coefficients. Similarly, we model the probability that the algorithm returns the correct answer by a logistic function of a second order polynomial of the extended features:\nP (S = 1|a, f , β) = 1 1 + exp (∑2 k1=0 · · · ∑2−∑N−1i=1 ki kN=0 βk1,··· ,kN ;a · f̃ k1 1 · . . . · f̃ kN N ) , (8)\nwith regression coefficients β. The conditional distribution of a continuous score can be modeled analogously to Equation 5, and we use γ to denote its regression coefficients.\nIf the time cost is a linear function of the algorithm’s runtime, i.e. TC(t) = c · t for some constant c, then the value of applying the algorithm depends only on the expectations of the runtime and score distributions. For linear scores\nEP (S,T |a,i) [S − TC(T )] = µS(f(i); a, γ)− c · µT (f(i); a, α), (9)\nand for binary scores\nEP (S,T |a,i) [S − TC(T )] = EP (β|s,a,i) [P (S = 1; i, β)]− c · µT (f(i); a, α). (10)\nWe approximated EP (β|s,a,i) [P (S = 1; i, β)] according to Equation 10 in [9].\nThus, the algorithm selection mapping m can be learned by estimating the parameters α and β or γ. Our method estimates α by Bayesian linear regression. When the score is binary, β is estimated by variational Bayesian logistic regression [9], and when the score is continuous, γ is estimated by Bayesian linear regression. For Bayesian linear regression, we use conjugate Gaussian priors with mean zero and unit variance, so that the posterior distributions can be computed very efficiently by analytic update equations. Given the posterior distributions on the parameters, we compute the expected VOC by marginalization. When the score is continuous µS(f(i); a, γ) is linear in γ and µT (f(i); a, α) is linear in α. Thus integrating out α and γ with respect to the posterior yields\nVOC(a; i) = µS ( f(i); a, µγ|i,s ) − c · µT ( f(i); a, µα|i,t ) , (11)\nwhere µα and µγ are posterior means of α and γ respectively. This implies the following simple solution to the algorithm selection problem:\na(i; c) = argmax a∈A\n( µS(f(i); a, µγ|itrain,strain ) − c · µT (f(i); a, µα|itrain,ttrain)). (12)\nFor binary scores, the runtime component is predicted in exactly the same way, and a variational approximation to the posterior predictive density can be used for the score component [9].\nTo discover the best model of an algorithm’s runtime and score, our method performs feature selection by Bayesian model choice [10]. We consider all possible combinations of the regressors defined above. To efficiently find the optimal set of features in this exponential large model space, we exploit that all models are nested within the full model. This allows us to efficiently compute Bayes factors using Savage-Dickey ratios [11]."
    }, {
      "heading" : "3 Performance evaluation against methods for selecting sorting algorithms",
      "text" : "Our goal was to evaluate rational metareasoning not only against existing methods but also against human performance. To facilitate the comparison with how people choose between cognitive strategies, we chose to evaluate our method in the domain of sorting. Algorithm selection is relevant to sorting, because there are many sorting algorithms with very different characteristics. In sorting, the input i is the sequence to be sorted. Conventional sorting algorithms are guaranteed to return the elements in correct order. Thus, the critical difference between them is in their runtimes, and runtime depends primarily on the number of elements to be sorted and their presortedness. The number of elements determines the relative importance of the coefficients of low (e.g., constant and linear) versus high order terms (e.g., n2, or n · log(n)) whose weights differ between algorithms. Presortedness is important because it determines the relative performance of algorithms that exploit pre-existing order, e.g., insertion sort, versus algorithms that do not, e.g., quicksort.\nAccording to recent reviews [12, 13], there are two key methods for sorting algorithm selection: Guo’s decision-tree method [14] and Lagoudakis et al.’s recursive algorithm selection method [15]. We thus evaluated the performance of rational metareasoning against these two approaches."
    }, {
      "heading" : "3.1 Evaluation against Guo’s method",
      "text" : "Guo’s method learns a decision-tree, i.e. a sequence of logical rules that are applied to the list’s features to determine the sorting algorithm [14]. Guo’s method and our method represent inputs by\nthe same pair of features: f1 = |i|, the length of the list to be sorted, and f2, a measure of presortedness. Concretely, f2 estimates the number of inversions from the number of runs in the sequence, i.e. f2 = f12 · RUNS(i), where RUNS(i) = |{m : im > im+1}|. This measure of presortedness can be computed much more efficiently than the number of inversions.\nOur method learns the conditional distributions of runtime and score given these two features, and uses them to approximate the conditional distributions given the input (Equations 3–4). We verified that our method can learn how runtime depends on sequence length and presortedness (data not shown). Next, we subjected our method to Guo’s performance evaluation [14]. We thus evaluated rational metareasoning on the problem of choosing between insertion sort, shell sort, heapsort, merge sort, and quicksort. We matched our training sets to Guo’s DSort4 in the number of lists (i.e. 1875) and the distributions of length and presortedness. We provided the run-time of all algorithms rather than the index of the fastest algorithm. Otherwise, the training sets were equivalent. For each of Guo’s four test sets, we trained and evaluated rational metareasoning on 100 randomly generated pairs of training and test sets. The first test set mimicked Guo’s Dsort5 problem set [14]. It comprised 1000 permutations of the numbers 1 to 1000. Of the 1000 sequences, 950 were random permutations and 50 were nearly-sorted. The nearly-sorted lists were created by applying 10 random pair-wise permutations to the numbers 1–1000. The sequences contained between 1 and 520 runs (mean=260, SD=110). The second test set comprised 1000 nearly-sorted lists of length 1000. Each list was created by applying 10 different random pair-wise permutations to the numbers 1 to 1000. The third test set comprised 100 lists in reverse order. The fourth test set comprised 1000 random permutations.\nTable 1 compares how frequently rational metareasoning chose the best algorithm on each test set to the results reported by Guo [14]. We estimated our method’s expected performance θ by its average performance and 95% credible intervals. Credible intervals (CI) were computed by Bayesian inference with a uniform prior, and they comprise the values with highest posterior density whose total probability is 0.95. In brief, rational metareasoning significantly outperformed Guo’s decision-tree method on all four test sets. The performance gain was highest on random permutations: rational metareasoning chose the best algorithm 99.99% rather than only 85.3% of the time."
    }, {
      "heading" : "3.2 Evaluation against Lagoudakis et al.’s method",
      "text" : "Depending on a list’s length Lagoudakis et al.’s method chooses either insertion sort, merge sort, or quicksort [15]. If merge sort or quicksort is chosen the same decision rule is applied to each of the two sublists it creates. The selection mapping from lengths to algorithms is determined by minimizing the expected runtime [15]. We evaluated rational metareasoning against Lagoudakis et al.’s recursive method on 21 versions of Guo’s Dsort5 test set [14] with 0%, 5%, · · · , 100% nearlysorted sequences. To accommodate differences in implementation and architecture, we recomputed Lagoudakis et al.’s solution for the runtimes measured on our system. Rational metareasoning chose between the five algorithms used by Guo and was trained on Guo’s Dsort4 [14]. We compare the performance of the two methods in terms of their runtime, because none of the numerous choices of recursive algorithm selection corresponds to our method’s algorithm choice.\nOn average, our implementation of Lagoudakis et al.’s method took 102.5±0.83 seconds to sort the 21 test sets, whereas rational metareasoning finished in only 27.96± 0.02 seconds. Rational metareasoning was thus significantly faster (p < 10−15). Next, we restricted the sorting algorithms available to rational metareasoning to those used by Lagoudakis et al.’s method. The runtime increased to 47.90 ± 0.02 seconds, but rational metareasoning remained significantly faster than Lagoudakis\net al.’s method (p < 10−15). These comparisons highlight two advantages of our method: i) it can exploit presortedness, and ii) it can be used with arbitrarily many algorithms of any kind."
    }, {
      "heading" : "3.3 Discussion",
      "text" : "Rational metareasoning outperformed two state-of-the-art methods for sorting algorithm selection. Our results in the domain of sorting should be interpreted as a lower bound on the performance gain that rational metareasoning can achieve on harder problems such as combinatorial optimization, planning, and search, where the runtimes of different algorithms are more variable [12]. Future research might explore the application of our theory to these harder problems, take into account heavy-tailed runtime distributions, use better representations, and incorporate active learning.\nOur results show that rational metareasoning is not just theoretically sound, but it is also competitive. We can therefore use it as a normative model of human strategy selection learning."
    }, {
      "heading" : "4 Rational metareasoning as a model of human strategy selection",
      "text" : "Most previous theories of how humans learn when to use which cognitive strategy assume basic model-free reinforcement learning [16–18]. The REinforcement Learning among Cognitive Strategies model (RELACS [17]) and the Strategy Selection Learning model (SSL [18]) each postulate that people learn just one number for each cognitive strategy: the expected reward of applying it to an unknown problem and the sum of past rewards, respectively. These theories therefore predict that people cannot learn to instantly adapt their strategy to the characteristics of a new problem. By contrast, the Strategy Choice And Discovery Simulation (SCADS [16]) postulates that people separately learn about a strategy’s performance on particular types of problems and its overall performance and integrate the resulting predictions by multiplication.\nOur theory makes critically different assumptions about the mental representation of problems and each strategy’s performance than the three previous psychological theories. First, rational metareasoning assumes that problems are represented by multiple features that can be continuous or binary. Second, rational metareasoning postulates that people maintain separate representations of a strategy’s execution time and the quality of its solution. Third, rational metareasoning can discover non-additive interactions between features. Furthermore, rational metareasoning postulates that learning, prediction, and strategy choice are more rational than previously modeled. Since our model formalizes substantially different assumptions about mental representation and information processing, determining which theory best explains human behavior will teach us more about how the human brain represents and solves strategy selection problems.\nTo understand when and how the predictions of our theory differ from the predictions of the three existing psychological theories, we performed computer simulations of how people would choose between sorting strategies. In order to apply the psychological theories to the selection among sorting strategies, we had to define the reward (r). We considered three notions of reward: i) correctness (r ∈ {−0.1,+0.1}; these numbers are based on the SCADS model [16]), ii) correctness minus time cost (r − c · t, where t is the execution time and c is a constant), and iii) reward rate (r/t). We evaluated all nine combinations of the three theories with the three notions of reward. We provided the SCADS model with reasonable problem types: short lists (length ≤ 16), long lists (length ≥ 32), nearly-sorted lists (less than 10% inversions), and random lists (more than 25% inversions). We evaluated the performance of these nine models against the rational metareasoning in the selection between seven sorting algorithms: insertion sort, selection sort, bubble sort, shell sort, heapsort, merge sort, and quicksort. To do so, we trained each model on 1000 randomly generated lists, fixed the learned parameters and evaluated how many lists each model could sort per second. Training and test lists were generated by sampling. Sequence lengths were sampled from a Uniform({2, · · · , u}) distribution where u was 10, 100, 1000, or 10000 with equal probability. The fraction of inversions between subsequent numbers was drawn from a Beta(2, 1) distribution. We performed 100 trainand-test episodes. Sorting time was measured by selection time plus execution time. We estimated the expected sorting speed for each model by averaging. We found that while rational metareasoning achieved 88.1± 0.7% of the highest possible sorting speed, none of the nine alternative models achieved more than 30% of the maximal sorting speed. Thus, the time invested in metareasoning was more than offset by the time saved with the chosen strategy."
    }, {
      "heading" : "5 How do people choose cognitive strategies?",
      "text" : "Given that rational metareasoning outperformed the nine psychological models in strategy selection, we asked whether the mind is more adaptive than those theories assume. To answer this question, we designed an experiment for which rational metareasoning predicts distinctly different choices."
    }, {
      "heading" : "5.1 Pilot studies and simulations",
      "text" : "To design an experiment that could distinguish between our competing hypotheses, we ran two pilot studies measuring the execution time characteristics of cocktail sort (CS) respectively merge sort (MS). For each pilot study we recruited 100 participants on Amazon Mechanical Turk. In the first pilot study, the interface shown in Figure 1(a) required participants to follow the step-by-step instructions of the cocktail sort algorithm. In the second pilot study, participants had to execute merge sort with the computer interface shown in Figure 1(b). We measured their sorting times for lists of varying length and presortedness. Then, based on this data, we estimated how long comparisons and moves take using each strategy. This led to the following sorting time models:\nTCS = t̂CS + εCS, t̂CS = 19.59 + 0.19 · ncomparisons + 0.31 · nmoves, εCS ∼ N (0, 0.21 · t̂2CS) (13) TMS = t̂MS + εMS, t̂MS = 13.98 + 1.10 · ncomparisons + 0.52 · nmoves, εMS ∼ N (0, 0.15 · t̂2MS) (14)\nWe then used these sorting time models to simulate 104 candidate strategy selection experiments according to each of the 10 models. We found several potential experiments for which rational metareasoning makes qualitatively different predictions than all of the alternative psychological theories, and we chose the one that achieved the best compromise between discriminability and duration.\nAccording to the two runtime models (Equations 13–14) and how many comparisons and moves each algorithm would perform, people should choose merge sort for long and nearly inversely sorted sequences and cocktail sort for sequences that are either nearly-sorted or short. For the chosen experimental design, the three existing psychological theories predicted that people would fail to learn this contingency; see Figure 2. By contrast, rational metareasoning predicted that adaptive strategy selection would be evident from the choices of more than 70% of our participants. Therefore, the chosen experimental design was well suited to discriminate rational metareasoning from previous theories. The next section describes the strategy choice experiment in detail."
    }, {
      "heading" : "5.2 Methods",
      "text" : "The experiment was run online1 with 100 participants recruited on Amazon Mechanical Turk and it paid $1.25. The experiment comprised three stages: training, choice, and execution. In the training stage, each participant was taught to sort lists of numbers by executing the two contrasting strategies tested in the pilot studies: cocktail sort and merge sort. On each of the 11 training trials, the participant was instructed which strategy to use. The interface enforced that he or she correctly performed each step of that strategy. The interfaces were the same as in the pilot studies (see Figure 1). For both strategies, the chosen lists comprised nearly reversely sorted lists of length 4, 8, and 16 and nearly-sorted lists of length 16 and 32. For the cocktail sort strategy, each participant was also trained on a nearly inversely sorted list with 32 elements. Participants first practiced cocktail sort for five trials and then practiced merge sort. The last two trials contrasted the two strategies on long, nearly-sorted sequences with identical length. Nearly-sorted lists were created by inserting a randomly selected element at a different random location of an ascending list. Nearly inversely sorted lists were created applying the same procedure to a descending list. In the choice phase, participants were shown 18 test lists. For each list, they were asked to choose which sorting strategy they would use, if they had to sort this sequence. Participants were told that they would have to sort one randomly selected list with the strategy they chose for it. The test lists comprised six instances of each of three kinds of sequences: long and nearly inversely sorted, long and nearly-sorted, and short and nearly-sorted. The order of these sequences was randomized across participants. In the execution phase, one of the 12 short lists was randomly selected, and the participant had to sort it using the strategy he or she had previously chosen for that list.\nTo derive theoretical predictions, we gave each model the same information as our participants.\n1http://cocosci.berkeley.edu/mturk/falk/StrategyChoice/consent.html"
    }, {
      "heading" : "5.3 Results",
      "text" : "Our participants took 24.7 ± 6.7 minutes to complete the experiment (mean ± standard deviation). The median number of errors per training sequence was 2.45, and 95% of our participants made between 0.73 and 12.55 errors per training sequence. In the choice phase, 83% of our participants were more likely to choose merge sort when it was the superior strategy (compared to trials when it was not). We can thus be 95% confident that the population frequency of this adaptive strategy choice pattern lies between 74.9% and 89.4%; see Figure 2b). This adaptive choice pattern was significantly more frequent than could be expected, if strategy choice was independent of the lists’ features (p < 10−11). This is consistent with our model’s predictions but inconsistent with the predictions of the RELACS, SSL, and SCADS models. Only rational metareasoning correctly predicted that the frequency of the adaptive strategy choice pattern would be above chance (p < 10−5 for our model and p ≥ 0.46 for all other models). Figure 2(b) compares the proportion of participants exhibiting this pattern with the models’ predictions. The non-overlapping credible intervals suggest that we can be 95% confident that the choices of people and rational metareasoning are more adaptive than those predicted by the three previous theories (all p < 0.001). Yet we can also be 95% confident that, at least in our experiment, people choose their strategy even more adaptively than rational metareasoning (p ≤ 0.02). On average, our participants chose merge sort for 4.9 of the 6 long and nearly inversely sorted sequences (81.67% of the time, 95% credible interval: [77.8%; 93.0%]), but for only 1.79 of the 6 nearly-sorted long sequences (29.83% of the time, 95% credible interval: [12.9%, 32.4%]), and for only 1.62 of the 6 nearly-sorted short sequences (27.00% of the time, 95% credible interval: [16.7%, 40.4%]); see Figure 2(a). Thus, when merge sort was superior, our participants chose it significantly more often than cocktail sort (p < 10−10). But, when merge sort was inferior, they chose cocktail sort more often than merge sort (p < 10−7)."
    }, {
      "heading" : "5.4 Discussion",
      "text" : "We evaluated our rational metareasoning model of human strategy selection against nine models instantiating three psychological theories. While those nine models completely failed to predict our participants’ adaptive strategy choices, the predictions of rational metareasoning were qualitatively correct, and its choices came close to human performance. The RELACS and the SSL model failed, because they do not represent problem features and do not learn about how those features affect each strategy’s performance. The model-free learning assumed by SSL and RELACS was maladaptive because cocktail sort was faster for most training sequences, but was substantially slower for the\nlong, nearly inversely sorted test sequences. The SCADS model failed mainly because its suboptimal learning mechanism was fooled by the slight imbalance between the training examples for cocktail sort and merge sort, but also because it can neither extrapolate nor capture the non-additive interaction between length and presortedness. Instead human-like adaptive strategy selection can be achieved by learning to predict each strategy’s execution time and accuracy given features of the problem. To further elucidate the human mind’s strategy selection learning algorithm, future research will evaluate our theory against an instance-based learning model [19].\nOur participants outperformed the RELACS, SSL, and SCADS models, as well as rational metareasoning in our strategy selection task. This suggests that neither psychology nor AI can yet fully account for people’s adaptive strategy selection. People’s superior performance could be enabled by a more powerful representation of the sequences, perhaps one that includes reverse-sortedness, or the ability to choose strategies based on mental simulations of their execution on the presented list. These are just two of many possibilities and more experiments are needed to unravel people’s superior performance. In contrast to the sorting strategies in our experiment, most cognitive strategies operate on internal representations. However, there are two reasons to expect our conclusions to transfer: First, the metacognitive principles of strategy selection might be domain general. Second, the strategies people use to order things mentally might be based on their sorting strategies in the same way in which mental arithmetic is based on calculating with fingers or on paper."
    }, {
      "heading" : "6 Conclusions",
      "text" : "Since neither psychology nor AI can yet fully account for people’s adaptive strategy selection, further research into how people learn to select cognitive strategies may yield not only a better understanding of human intelligence, but also better solutions to the algorithm selection problem in computer science and artificial intelligence. Our results suggest that reasoning about which strategy to use might contribute to people’s adaptive intelligence and can save more time than it takes. Since our framework is very general, it can be applied to strategy selection in all areas of human cognition including judgment and decision-making [1, 3], as well as to the discovery of novel strategies [2]. Future research will investigate human strategy selection learning in more ecological domains such as mental arithmetic, decision-making, and problem solving where people have to trade off speed versus accuracy. In conclusion, rational metareasoning is a promising theoretical framework for reverse-engineering people’s capacity for adaptive strategy selection.\nAcknowledgments. This work was supported by ONR MURI N00014-13-1-0341."
    } ],
    "references" : [ {
      "title" : "Bounded rationality: The adaptive toolbox",
      "author" : [ "G. Gigerenzer", "R. Selten" ],
      "venue" : null,
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2002
    }, {
      "title" : "Strategic development",
      "author" : [ "R.S. Siegler" ],
      "venue" : "Trends in Cognitive Sciences, vol. 3, pp. 430–435, Nov. 1999.",
      "citeRegEx" : "2",
      "shortCiteRegEx" : null,
      "year" : 1999
    }, {
      "title" : "Adaptive strategy selection in decision making",
      "author" : [ "J.W. Payne", "J.R. Bettman", "E.J. Johnson" ],
      "venue" : "Journal of Experimental Psychology: Learning, Memory, and Cognition, vol. 14, no. 3, p. 534, 1988.",
      "citeRegEx" : "3",
      "shortCiteRegEx" : null,
      "year" : 1988
    }, {
      "title" : "Strategy selection: An introduction to the modeling challenge",
      "author" : [ "J.N. Marewski", "D. Link" ],
      "venue" : "Wiley Interdisciplinary Reviews: Cognitive Science, vol. 5, no. 1, pp. 39–59, 2014.",
      "citeRegEx" : "4",
      "shortCiteRegEx" : null,
      "year" : 2014
    }, {
      "title" : "The algorithm selection problem",
      "author" : [ "J.R. Rice" ],
      "venue" : "Advances in Computers, vol. 15, pp. 65–118, 1976.",
      "citeRegEx" : "5",
      "shortCiteRegEx" : null,
      "year" : 1976
    }, {
      "title" : "Principles of metareasoning",
      "author" : [ "S. Russell", "E. Wefald" ],
      "venue" : "Artificial Intelligence, vol. 49, no. 1-3, pp. 361– 395, 1991.",
      "citeRegEx" : "6",
      "shortCiteRegEx" : null,
      "year" : 1991
    }, {
      "title" : "Selecting computations: Theory and applications",
      "author" : [ "N. Hay", "S. Russell", "D. Tolpin", "S. Shimony" ],
      "venue" : "Uncertainty in Artificial Intelligence: Proceedings of the Twenty-Eighth Conference (N. de Freitas and K. Murphy, eds.), (P.O. Box 866 Corvallis, Oregon 97339 USA), AUAI Press, 2012.",
      "citeRegEx" : "7",
      "shortCiteRegEx" : null,
      "year" : 2012
    }, {
      "title" : "Meta-level reinforcement learning",
      "author" : [ "D. Harada", "S. Russell" ],
      "venue" : "NIPS’98 Workshop on Abstraction and Hierarchy in Reinforcement Learning, 1998.",
      "citeRegEx" : "8",
      "shortCiteRegEx" : null,
      "year" : 1998
    }, {
      "title" : "A variational approach to Bayesian logistic regression models and their extensions",
      "author" : [ "T. Jaakkola", "M. Jordan" ],
      "venue" : "Sixth International Workshop on Artificial Intelligence and Statistics, 1997.",
      "citeRegEx" : "9",
      "shortCiteRegEx" : null,
      "year" : 1997
    }, {
      "title" : "Bayes factors",
      "author" : [ "R.E. Kass", "A.E. Raftery" ],
      "venue" : "Journal of the American Statistical Association, vol. 90, pp. 773–795, June 1995.",
      "citeRegEx" : "10",
      "shortCiteRegEx" : null,
      "year" : 1995
    }, {
      "title" : "Efficient posterior probability mapping using Savage-Dickey ratios",
      "author" : [ "W.D. Penny", "G.R. Ridgway" ],
      "venue" : "PLoS ONE, vol. 8, no. 3, pp. e59655+, 2013.",
      "citeRegEx" : "11",
      "shortCiteRegEx" : null,
      "year" : 2013
    }, {
      "title" : "Algorithm selection for combinatorial search problems: A survey",
      "author" : [ "L. Kotthoff" ],
      "venue" : "AI Magazine, 2014.",
      "citeRegEx" : "12",
      "shortCiteRegEx" : null,
      "year" : 2014
    }, {
      "title" : "Cross-disciplinary perspectives on meta-learning for algorithm selection",
      "author" : [ "K.A. Smith-Miles" ],
      "venue" : "ACM Comput. Surv., vol. 41, Jan. 2009.",
      "citeRegEx" : "13",
      "shortCiteRegEx" : null,
      "year" : 2009
    }, {
      "title" : "Algorithm selection for sorting and probabilistic inference: a machine learning-based approach",
      "author" : [ "H. Guo" ],
      "venue" : "PhD thesis, Kansas State University,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 2003
    }, {
      "title" : "Selecting the right algorithm",
      "author" : [ "M.G. Lagoudakis", "M.L. Littman", "R. Parr" ],
      "venue" : "Proceedings of the 2001 AAAI Fall Symposium Series: Using Uncertainty within Computation, Cape Cod, MA, 2001.",
      "citeRegEx" : "15",
      "shortCiteRegEx" : null,
      "year" : 2001
    }, {
      "title" : "SCADS: A model of children’s strategy choices and strategy discoveries",
      "author" : [ "J. Shrager", "R.S. Siegler" ],
      "venue" : "Psychological Science, vol. 9, pp. 405–410, Sept. 1998.",
      "citeRegEx" : "16",
      "shortCiteRegEx" : null,
      "year" : 1998
    }, {
      "title" : "On adaptation, maximization, and reinforcement learning among cognitive strategies",
      "author" : [ "I. Erev", "G. Barron" ],
      "venue" : "Psychological review, vol. 112, pp. 912–931, Oct. 2005.",
      "citeRegEx" : "17",
      "shortCiteRegEx" : null,
      "year" : 2005
    }, {
      "title" : "SSL: A theory of how people learn to select strategies",
      "author" : [ "J. Rieskamp", "P.E. Otto" ],
      "venue" : "Journal of Experimental Psychology: General, vol. 135, pp. 207–236, May 2006.",
      "citeRegEx" : "18",
      "shortCiteRegEx" : null,
      "year" : 2006
    }, {
      "title" : "Instance-based learning: Integrating sampling and repeated decisions from experience",
      "author" : [ "C. Gonzalez", "V. Dutt" ],
      "venue" : "Psychological Review, vol. 118, no. 4, pp. 523–551, 2011. 9",
      "citeRegEx" : "19",
      "shortCiteRegEx" : null,
      "year" : 2011
    } ],
    "referenceMentions" : [ {
      "referenceID" : 0,
      "context" : "The human mind can take advantage of this fact: People appear to have a toolbox of cognitive strategies [1] from which they choose adaptively [2, 3].",
      "startOffset" : 104,
      "endOffset" : 107
    }, {
      "referenceID" : 1,
      "context" : "The human mind can take advantage of this fact: People appear to have a toolbox of cognitive strategies [1] from which they choose adaptively [2, 3].",
      "startOffset" : 142,
      "endOffset" : 148
    }, {
      "referenceID" : 2,
      "context" : "The human mind can take advantage of this fact: People appear to have a toolbox of cognitive strategies [1] from which they choose adaptively [2, 3].",
      "startOffset" : 142,
      "endOffset" : 148
    }, {
      "referenceID" : 3,
      "context" : "How these choices are made is an important, open question in cognitive science [4].",
      "startOffset" : 79,
      "endOffset" : 82
    }, {
      "referenceID" : 4,
      "context" : "At an abstract level, choosing a cognitive strategy is equivalent to the algorithm selection problem in computer science [5]: given a set of possible inputs I, a set of possible algorithms A, and a performance metric, find the selection mapping from I toA that maximizes the expected performance.",
      "startOffset" : 121,
      "endOffset" : 124
    }, {
      "referenceID" : 5,
      "context" : "Here, we draw on a theoretical framework from artificial intelligence–rational metareasoning [6]– and Bayesian machine learning to develop a mathematical theory of how people should choose between cognitive strategies and test its predictions in a behavioral experiment.",
      "startOffset" : 93,
      "endOffset" : 96
    }, {
      "referenceID" : 5,
      "context" : "Metareasoning is the problem of deciding which computations to perform given a problem and a computational architecture [6].",
      "startOffset" : 120,
      "endOffset" : 123
    }, {
      "referenceID" : 5,
      "context" : "According to rational metareasoning [6], the optimal solution maximizes the value of computation (VOC).",
      "startOffset" : 36,
      "endOffset" : 39
    }, {
      "referenceID" : 6,
      "context" : "In the general case, determining the VOC requires solving a Markov decision problem [7].",
      "startOffset" : 84,
      "endOffset" : 87
    }, {
      "referenceID" : 5,
      "context" : "We can therefore use the following approximation to the VOC from [6] as the performance metric to be maximized: VOC(a; i) ≈ EP (S|a,i) [S]− EP (T |a,i) [TC(T )] (1)",
      "startOffset" : 65,
      "endOffset" : 68
    }, {
      "referenceID" : 5,
      "context" : "meta-level learning [6], is a hard technical challenge [8], but it is tractable in the special case of algorithm selection.",
      "startOffset" : 20,
      "endOffset" : 23
    }, {
      "referenceID" : 7,
      "context" : "meta-level learning [6], is a hard technical challenge [8], but it is tractable in the special case of algorithm selection.",
      "startOffset" : 55,
      "endOffset" : 58
    }, {
      "referenceID" : 8,
      "context" : "(10) We approximated EP (β|s,a,i) [P (S = 1; i, β)] according to Equation 10 in [9].",
      "startOffset" : 80,
      "endOffset" : 83
    }, {
      "referenceID" : 8,
      "context" : "When the score is binary, β is estimated by variational Bayesian logistic regression [9], and when the score is continuous, γ is estimated by Bayesian linear regression.",
      "startOffset" : 85,
      "endOffset" : 88
    }, {
      "referenceID" : 8,
      "context" : "For binary scores, the runtime component is predicted in exactly the same way, and a variational approximation to the posterior predictive density can be used for the score component [9].",
      "startOffset" : 183,
      "endOffset" : 186
    }, {
      "referenceID" : 9,
      "context" : "To discover the best model of an algorithm’s runtime and score, our method performs feature selection by Bayesian model choice [10].",
      "startOffset" : 127,
      "endOffset" : 131
    }, {
      "referenceID" : 10,
      "context" : "This allows us to efficiently compute Bayes factors using Savage-Dickey ratios [11].",
      "startOffset" : 79,
      "endOffset" : 83
    }, {
      "referenceID" : 11,
      "context" : "According to recent reviews [12, 13], there are two key methods for sorting algorithm selection: Guo’s decision-tree method [14] and Lagoudakis et al.",
      "startOffset" : 28,
      "endOffset" : 36
    }, {
      "referenceID" : 12,
      "context" : "According to recent reviews [12, 13], there are two key methods for sorting algorithm selection: Guo’s decision-tree method [14] and Lagoudakis et al.",
      "startOffset" : 28,
      "endOffset" : 36
    }, {
      "referenceID" : 13,
      "context" : "According to recent reviews [12, 13], there are two key methods for sorting algorithm selection: Guo’s decision-tree method [14] and Lagoudakis et al.",
      "startOffset" : 124,
      "endOffset" : 128
    }, {
      "referenceID" : 14,
      "context" : "’s recursive algorithm selection method [15].",
      "startOffset" : 40,
      "endOffset" : 44
    }, {
      "referenceID" : 13,
      "context" : "a sequence of logical rules that are applied to the list’s features to determine the sorting algorithm [14].",
      "startOffset" : 103,
      "endOffset" : 107
    }, {
      "referenceID" : 13,
      "context" : "Next, we subjected our method to Guo’s performance evaluation [14].",
      "startOffset" : 62,
      "endOffset" : 66
    }, {
      "referenceID" : 13,
      "context" : "The first test set mimicked Guo’s Dsort5 problem set [14].",
      "startOffset" : 53,
      "endOffset" : 57
    }, {
      "referenceID" : 13,
      "context" : "Table 1 compares how frequently rational metareasoning chose the best algorithm on each test set to the results reported by Guo [14].",
      "startOffset" : 128,
      "endOffset" : 132
    }, {
      "referenceID" : 14,
      "context" : "’s method chooses either insertion sort, merge sort, or quicksort [15].",
      "startOffset" : 66,
      "endOffset" : 70
    }, {
      "referenceID" : 14,
      "context" : "The selection mapping from lengths to algorithms is determined by minimizing the expected runtime [15].",
      "startOffset" : 98,
      "endOffset" : 102
    }, {
      "referenceID" : 13,
      "context" : "’s recursive method on 21 versions of Guo’s Dsort5 test set [14] with 0%, 5%, · · · , 100% nearlysorted sequences.",
      "startOffset" : 60,
      "endOffset" : 64
    }, {
      "referenceID" : 13,
      "context" : "Rational metareasoning chose between the five algorithms used by Guo and was trained on Guo’s Dsort4 [14].",
      "startOffset" : 101,
      "endOffset" : 105
    }, {
      "referenceID" : 11,
      "context" : "Our results in the domain of sorting should be interpreted as a lower bound on the performance gain that rational metareasoning can achieve on harder problems such as combinatorial optimization, planning, and search, where the runtimes of different algorithms are more variable [12].",
      "startOffset" : 278,
      "endOffset" : 282
    }, {
      "referenceID" : 16,
      "context" : "The REinforcement Learning among Cognitive Strategies model (RELACS [17]) and the Strategy Selection Learning model (SSL [18]) each postulate that people learn just one number for each cognitive strategy: the expected reward of applying it to an unknown problem and the sum of past rewards, respectively.",
      "startOffset" : 68,
      "endOffset" : 72
    }, {
      "referenceID" : 17,
      "context" : "The REinforcement Learning among Cognitive Strategies model (RELACS [17]) and the Strategy Selection Learning model (SSL [18]) each postulate that people learn just one number for each cognitive strategy: the expected reward of applying it to an unknown problem and the sum of past rewards, respectively.",
      "startOffset" : 121,
      "endOffset" : 125
    }, {
      "referenceID" : 15,
      "context" : "By contrast, the Strategy Choice And Discovery Simulation (SCADS [16]) postulates that people separately learn about a strategy’s performance on particular types of problems and its overall performance and integrate the resulting predictions by multiplication.",
      "startOffset" : 65,
      "endOffset" : 69
    }, {
      "referenceID" : 15,
      "context" : "1}; these numbers are based on the SCADS model [16]), ii) correctness minus time cost (r − c · t, where t is the execution time and c is a constant), and iii) reward rate (r/t).",
      "startOffset" : 47,
      "endOffset" : 51
    }, {
      "referenceID" : 18,
      "context" : "To further elucidate the human mind’s strategy selection learning algorithm, future research will evaluate our theory against an instance-based learning model [19].",
      "startOffset" : 159,
      "endOffset" : 163
    }, {
      "referenceID" : 0,
      "context" : "Since our framework is very general, it can be applied to strategy selection in all areas of human cognition including judgment and decision-making [1, 3], as well as to the discovery of novel strategies [2].",
      "startOffset" : 148,
      "endOffset" : 154
    }, {
      "referenceID" : 2,
      "context" : "Since our framework is very general, it can be applied to strategy selection in all areas of human cognition including judgment and decision-making [1, 3], as well as to the discovery of novel strategies [2].",
      "startOffset" : 148,
      "endOffset" : 154
    }, {
      "referenceID" : 1,
      "context" : "Since our framework is very general, it can be applied to strategy selection in all areas of human cognition including judgment and decision-making [1, 3], as well as to the discovery of novel strategies [2].",
      "startOffset" : 204,
      "endOffset" : 207
    } ],
    "year" : 2014,
    "abstractText" : "Selecting the right algorithm is an important problem in computer science, because the algorithm often has to exploit the structure of the input to be efficient. The human mind faces the same challenge. Therefore, solutions to the algorithm selection problem can inspire models of human strategy selection and vice versa. Here, we view the algorithm selection problem as a special case of metareasoning and derive a solution that outperforms existing methods in sorting algorithm selection. We apply our theory to model how people choose between cognitive strategies and test its prediction in a behavioral experiment. We find that people quickly learn to adaptively choose between cognitive strategies. People’s choices in our experiment are consistent with our model but inconsistent with previous theories of human strategy selection. Rational metareasoning appears to be a promising framework for reverse-engineering how people choose among cognitive strategies and translating the results into better solutions to the algorithm selection problem.",
    "creator" : null
  }
}