{
  "name" : "fe8c15fed5f808006ce95eddb7366e35.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Generating Long-term Trajectories Using Deep Hierarchical Networks",
    "authors" : [ "Stephan Zheng", "Yisong Yue" ],
    "emails" : [ "stzheng@caltech.edu", "yyue@caltech.edu", "plucey@stats.com" ],
    "sections" : [ {
      "heading" : null,
      "text" : "1 Introduction\nModeling long-term behavior is a key challenge in many learning problems that require complex decision-making. Consider a sports player determining a movement trajectory to achieve a certain strategic position. The space of such trajectories is prohibitively large, and precludes conventional approaches, such as those based on simple Markovian dynamics.\nMany decision problems can be naturally modeled as requiring high-level, long-term macro-goals, which span time horizons much longer than the timescale of low-level micro-actions (cf. He et al. [8], Hausknecht and Stone [7]). A natural example for such macro-micro behavior occurs in spatiotemporal games, such as basketball where players execute complex trajectories. The micro-actions of each agent are to move around the court and, if they have the ball, dribble, pass or shoot the ball. These micro-actions operate at the centisecond scale, whereas their macro-goals, such as \"maneuver behind these 2 defenders towards the basket\", span\nmultiple seconds. Figure 1 depicts an example from a professional basketball game, where the player must make a sequence of movements (micro-actions) in order to reach a specific location on the basketball court (macro-goal).\nIntuitively, agents need to trade-off between short-term and long-term behavior: often sequences of individually reasonable micro-actions do not form a cohesive trajectory towards a macro-goal. For instance, in Figure 1 the player (green) takes a highly non-linear trajectory towards his macro-goal of positioning near the basket. As such, conventional approaches are not well suited for these settings, as they generally use a single (low-level) state-action policy, which is only successful when myopic or short-term decision-making leads to the desired behavior.\n30th Conference on Neural Information Processing Systems (NIPS 2016), Barcelona, Spain.\nIn this paper, we propose a novel class of hierarchical policy models, which we instantiate using recurrent neural networks, that can simultaneously reason about both macro-goals and micro-actions. Our model utilizes an attention mechanism through which the macro-policy guides the micro-policy. Our model is further distinguished from previous work on hierarchical policies by dynamically predicting macro-goals instead of following fixed goals, which gives additional flexibility to our model class that can be fitted to data (rather than having the macro-goals be specifically hand-crafted).\nWe showcase our approach in a case study on learning to imitate demonstrated behavior in professional basketball. Our primary result is that our approach generates significantly more realistic player trajectories compared to non-hierarchical baselines, as judged by professional sports analysts. We also provide a comprehensive qualitative and quantitive analysis, e.g., showing that incorporating macro-goals can actually improve 1-step micro-action prediction accuracy."
    }, {
      "heading" : "2 Related Work",
      "text" : "The reinforcement learning community has largely focused on non-hierarchical policies such as those based on Markovian or linear dynamics (cf. Ziebart et al. [17], Mnih et al. [11], Hausknecht and Stone [7]). By and large, such policy classes are shown to be effective only when the optimal action can be found via short-term planning. Previous research has instead focused on issues such as how to perform effective exploration, plan over parameterized action spaces, or deal with non-convexity issues from using deep neural networks. In contrast, we focus on developing hierarchical policies that can effectively generate realistic long-term plans in complex settings such as basketball gameplay.\nThe use of hierarchical models to decompose macro-goals from micro-actions is relatively common in the planning community (cf. Sutton et al. [14], He et al. [8], Bai et al. [1]). For instance, the winning team in 2015 RoboCup Simulation Challenge (Bai et al. [1]) used a manually constructed hierarchical policy to solve MDPs with a set of fixed sub-tasks, while Konidaris et al. [10] segmented demonstrations to construct a hierarchy of static macro-goals. In contrast, we study how one can learn a hierarchical policy from a large amount of expert demonstrations that can adapt its policy in non-Markovian environments with dynamic macro-goals.\nOur approach shares affinity with behavioral cloning. One difference with previous work is that we do not learn a reward function that induces such behavior (cf. Muelling et al. [12]). Another related line of research aims to develop efficient policies for factored MDPs (Guestrin et al. [6]), e.g. by learning value functions over factorized state spaces for multi-agent systems. It may be possible that such approaches are also applicable for learning our hierarchical policy.\nAttention models for deep networks have mainly been applied to natural language processing, image recognition and combinations thereof (Xu et al. [15]). In contrast to previous work which focuses on attention models of the input, our attention model is applied to the output by integrating control from both the macro-policy and the micro-policy.\nRecent work on generative models for sequential data (Chung et al. [4]), such as handwriting generation, have combined latent variables with an RNN’s hidden state to capture temporal variability in the input. In our work, we instead aim to learn semantically meaningful latent variables that are external to the RNN and reason about long-term behavior and goals.\nOur model shares conceptual similarities to the Dual Process framework (Evans and Stanovich [5]), which decomposes cognitive processes into fast, unconscious behavior (System 1) and slow, conscious behavior (System 2). This separation reflects our policy decomposition into a macro and micro part. Other related work in neuroscience and cognitive science include hierarchical models of learning by imitation (Byrne and Russon [2])."
    }, {
      "heading" : "3 Long-Term Trajectory Planning",
      "text" : "We are interested in learning policies that can produce high quality trajectories, where quality is some global measure of the trajectory (e.g., realistic trajectories as in Figure 1). We first set notation:\n• At time t, an agent i is in state sit ∈ S and takes action ait ∈ A. The full state and action are st = { sit } players i, at = { ait }\nplayers i. The history of events is ht = {(su, au)}0≤u<t. • Macro policies also use a goal space G, e.g. regions in the court that a player should reach.\n• Let π(st, ht) denote a policy that maps state and history to a distribution over actions P (at|st, ht). If π is deterministic, the distribution is peaked around a specific action. We also abuse notation to sometimes refer to π as deterministically taking the most probable action π(st, ht) = argmaxa∈AP (a|st, ht) – this usage should be clear from context.\nOur main research question is how to design a policy class that can capture the salient properties of how expert agents execute trajectories. In particular, we present a general policy class that utilizes a goal space G to guide its actions to create such trajectory histories. We show in Section 4 how to instantiate this policy class as a hierarchical network that uses an attention mechanism to combine macro-goals and micro-actions. In our case study on modeling basketball behavior (Section 5.1), we train such a policy to imitate expert demonstrations using a large dataset of tracked basketball games.\n3.1 Incorporating Macro-Goals\nOur main modeling assumption is that a policy should simultaneously optimize behavior hierarchically on multiple well-separated timescales. We consider two distinct timescales (macro and micro-level), although our approach could in principle be generalized to even more timescales. During an episode [t0, t1], an agent i executes a sequence of micro-actions ( ait ) t≥0 that leads to a macrogoal git ∈ G. We do not assume that the start and end times of an episode are fixed. For instance, macro-goals can change before they are reached. We finally assume that macro-goals are relatively static on the timescale of the micro-actions, that is: dgit/dt 1. Figure 2 depicts an example of an agent with two unique macro-goals over a 50-frame trajectory. At every timestep t, the agent executes a micro-action ait, while the macro-goals git change more slowly.\nWe model the interaction between a micro-action ait and a macro-goal g i t through a raw micro-action uit ∈ A that is independent of the macro-goal. The micro-policy is then defined as: ait = πmicro(st, ht) = argmaxaP micro(a|st, ht) (1)\nPmicro(ait|st, ht) = ∫ dudgP (ait|u, g, st, ht)P (u, g|st, ht). (2)\nHere, we model the conditional distribution P (ait|u, g, st, ht) as a non-linear function of u, g: P (ait|uit, git, st, ht) = ψ(uit, φ(git)), (3)\nwhere φ, ψ are transfer and synthesis functions respectively that we make explicit in Section 4. Note that (3) does not explicitly depend on st, ht: although it is straightforward to generalize, this did not make a significant difference in our experiments. This decomposition is shown in Figure 3 and can be generalized to multiple scales l using multiple macro-goals gl and transfer functions φl."
    }, {
      "heading" : "4 Hierarchical Policy Network",
      "text" : "Figure 3 depicts a high-level overview of our hierarchical policy class for generating long-term spatiotemporal trajectories. Both the raw micro-policy and macro-policy are instantiated as recurrent\nconvolutional neural networks, and the raw action and macro-goals are combined via an attention mechanism, which we elaborate on below.\nDiscretization and deep neural architecture. In general, when using continuous latent variables g, learning the model (1) is intractable, and one must resort to approximation methods. We choose to discretize the state-action and latent spaces. In the basketball setting, a state sit ∈ S is naturally represented as a 1-hot occupancy vector of the basketball court. We then pose goal states git as sub-regions of the court that i wants to reach, defined at a coarser resolution than S. As such, we instantiate the macro and micro-policies as convolutional recurrent neural networks, which can capture both predictive spatial patterns and non-Markovian temporal dynamics.\nAttention mechanism for integrating macro-goals and micro-actions. We model (3) as an attention, i.e. φ computes a softmax density φ(git), over the output action spaceA and ψ is an element-wise (Hadamard) product. Suppressing indices i, t and s, h for clarity, the distribution (3) becomes\nφk(g) = exphφ(g)k∑ j exphφ(g)j , P (ak|u, g) ∝ P raw(uk|s, h) · φk(g), k = 1 . . . |A|, (4)\nwhere hφ(g) is computed by a neural network that takes Pmacro(g) as an input. Intuitively, this structure captures the trade-off between the macro- and raw micro-policy. On the one hand, the raw micro-policy πraw aims for short-term optimality. On the other hand, the macro-policy πmacro can attend via φ to sequences of actions that lead to a macro-goal and bias the agent towards good long-term behavior. The difference between u and φ(g) thus reflects the trade-off that the hierarchical policy learns between actions that are good for either short-term or long-term goals.\nMulti-stage learning. Given a set D of sequences of state-action tuples (st, ât), where the ât are 1-hot labels (omitting the index i for clarity), the hierarchical policy network can be trained via\nθ∗ = argmin θ ∑ D T∑ t=1 Lt(st, ht, ât; θ). (5)\nGiven the hierarchical structure of our model class, we decompose the loss Lt (omitting the index t):\nL(s, h, â; θ) = Lmacro (s, h, g; θ) + Lmicro (s, h, â; θ) +R(θ), (6)\nLmicro(s, h, â; θ) = A∑ k=1 âk log [P raw(uk|s, h; θ) · φk(g; θ)] , (7)\nwhere Rt(θ) regularizes the model weights θ and k indexes A discrete action-values. Although we have ground truths ât for the observable micro-actions, in general we may not have labels for the macro-goals gt that induce optimal long-term planning. As such, one would have to appeal to separate solution methods to compute the posterior P (gt|st, ht) which minimizes Lt,macro (st, ht, gt; θ). To reduce complexity and given the non-convexity of (7), we instead follow a multi-stage learning approach with a set of weak labels ĝt, φ̂t for the macro-goals gt and attention masks φt = φ(gt). We assume access to such weak labels and only use them in the initial training phases. Here, we first train the raw micro-policy, macro-policy and attention individually, freezing the other parts of the network. The policies πmicro, πmacro and attention φ can be trained using standard cross-entropy minimization with the labels ât, ĝt and φ̂t, respectively. In the final stage we fine-tune the entire network on objective (5), using only Lt,micro andR. We found this approach capable of finding a good initialization for fine-tuning and generating high-quality long-term trajectories.1 Another advantage of this approach is that the network can be trained using gradient descent during all stages."
    }, {
      "heading" : "5 Case Study on Modeling Basketball Behavior",
      "text" : "We applied our approach to modeling basketball behavior data. In particular, we focus on imitating the players’ movements, which is a challenging problem in the spatiotemporal planning setting.\n1As ut and φ(gt) enter symmetrically into the objective (7), it is hypothetically possible that the network converges to a symmetric phase where the predictions ut and φ(gt) become identical along the entire trajectory. However, our experiments suggest that our multi-stage learning approach separates timescales well between the micro- and macro policy and prevents the network from settling in such a redundant symmetric phase."
    }, {
      "heading" : "5.1 Experimental Setup",
      "text" : "We validated the hierarchical policy network (HPN) by learning a movement policy of individual basketball players that predicts as the micro-action the instantaneous velocity vit = πmicro(st, ht).\nTraining data. We trained the HPN on a large dataset of tracking data from professional basketball games (Yue et al. [16]). The dataset consists of possessions of variable length: each possession is a sequence of tracking coordinates sit = ( xit, y i t ) for each player i, recorded at 25 Hz, where one team has continuous possession of the ball. Since possessions last between 50 and 300 frames, we sub-sampled every 4 frames and used a fixed input sequence length of 50 to make training feasible. Spatially, we discretized the left half court using 400×380 cells of size 0.25ft× 0.25ft. For simplicity, we modeled every player identically using a single policy network. The resulting input data for each possession is grouped into 4 channels: the ball, the player’s location, his teammates, and the opposing team. After this pre-processing, we extracted 130,000 tracks for training and 13,000 as a holdout set.\nLabels. We extracted micro-action labels v̂it = sit+1 − sit as 1-hot vectors in a grid of 17× 17 unit cells. Additionally, we constructed a set of weak macro-labels ĝt, φ̂t by heuristically segmenting each track using its stationary points. The labels ĝt were defined as the next stationary point. For φ̂t, we used 1-hot velocity vectors vit,straight along the straight path from the player’s location s i t to the macro-goal git. We refer to the supplementary material for additional details.\nModel hyperparameters. To generate smooth rollouts while sub-sampling every 4 frames, we simultaneously predicted the next 4 micro-actions at, . . . , at+3. A more general approach would model the dependency between look-ahead predictions as well, e.g. P (πt+∆+1|πt+∆). However, we found that this variation did not outperform baseline models. We selected a network architecture to balance performance and feasible training-time. The macro and micro-policy use GRU memory cells Chung et al. [3] and a memory-less 2-layer fully-connected network as the transfer function φ, as depicted in Figure 4. We refer to the supplementary material for more details.\nBaselines. We compared the HPN against two natural baselines.\n1. A policy with only a raw micro-policy and memory (GRU-CNN) and without memory (CNN). 2. A hierarchical policy network H-GRU-CNN-CC without an attention mechanism, which\ninstead learns the final output from a concatenation of the raw micro- and macro-policy.\nRollout evaluation. To evaluate the quality of our model, we generated rollouts (st;h0,r0) with burnin period r0, These are generated by 1) feeding a ground truth sequence of states h0,r0 = (s0, . . . , sr0) to the policy network and 2) for t > r0, predicting at as the mode of the network output (1) and updating the game-state st → st+1, using ground truth locations for the other agents."
    }, {
      "heading" : "5.2 How Realistic are the Generated Trajectories?",
      "text" : "The most holistic way to evaluate the trajectory rollouts is via visual analysis. Simply put, would a basketball expert find the rollouts by HPN more realistic than those by the baselines? We begin by first visually analyzing some rollouts, and then present our human preference study results.\nVisualization. Figure 5 depicts example rollouts for our HPN approach and one example rollout for a baseline. Every rollout consists of two parts: 1) an initial ground truth phase from the holdout set and 2) a continuation by either the HPN or ground truth. We note a few salient properties. First, the HPN does not memorize tracks, as the rollouts differ from the tracks it has trained on. Second, the HPN generates rollouts with a high dynamic range, e.g. they have realistic curves, sudden changes of directions and move over long distances across the court towards macro-goals. For instance, HPN tracks do not move towards macro-goals in unrealistic straight lines, but often take a curved route, indicating that the policy balances moving towards macro-goals with short-term responses to the current state (see also Figure 6b). In contrast, the baseline model often generates more constrained behavior, such as moving in straight lines or remaining stationary for long periods of time.\nHuman preference study. Our primary empirical result is a preference study eliciting judgments on the relative quality of rollout trajectories between HPN and baselines or ground truth. We recruited seven experts (professional sports analysts) and eight knowledgeable non-experts (e.g., college basketball players) as judges.\n(a) Predicted distributions for attention masks φ(g) (left column), velocity (micro-action) πmicro (middle) and weighted velocity φ(g) πmicro (right) for basketball players. The center corresponds to 0 velocity. (b) Rollout tracks and predicted macro-goals gt (blue boxes). The HPN starts the rollout after 20 frames. Macro-goal box intensity corresponds to relative prediction frequency during the trajectory.\nFigure 6: Left: Visualizing how the attention mask generated from the macro-policy interacts with the micropolicy πmicro. Row 1 and 2: the micro-policy πmicro decides to stay stationary, but the attention φ goes to the left. The weighted result φ πmicro is to move to the left, with a magnitude that is the average. Row 3) πmicro wants to go straight down, while φ boosts the velocity so the agent bends to the bottom-left. Row 4) πmicro goes straight up, while φ goes left: the agent goes to the top-left. Row 5) πmicro remains stationary, but φ prefers to move in any direction. As a result, the agent moves down. Right: The HPN dynamically predicts macro-goals and guides the micro-policy in order to reach them. The macro-goal predictions are stable over a large number of timesteps. The HPN sometimes predicts inconsistent macro-goals. For instance, in the bottom right frame, the agent moves to the top-left, but still predicts the macro-goal to be in the bottom-left sometimes.\nBecause all the learned policies perform better with a “burn-in” period, we first animated with the ground truth for 20 frames (after subsampling), and then extrapolated with a policy for 30 frames. During extrapolation, the other nine players do not animate.2 For each test case, the judges were shown an animation of two rollout extrapolations of a specific player’s movement: one generated by the HPN, the other by a baseline or ground truth. The judges then chose which rollout looked more realistic. Please see the supplementary material for details of the study.\nTable 1 shows the preference study results. We tested 25 scenarios (some corresponding to scenarios in Figure 6b). HPN won the vast majority of comparisons against the baselines using expert judges, with slightly weaker but still very positive results using non-expert judgments. HPN was also competitive with ground truth. These results suggest that HPN can generate high-quality player trajectories that are significant improvements over baselines, and approach the ground truth quality in this comparison setting."
    }, {
      "heading" : "5.3 Analyzing Macro- and Micro-policy Integration",
      "text" : "Our model integrates the macro- and micro-policy by converting the macro-goal into an attention mask on the micro-action output space, which intuitively guides the micro-policy towards the macro-goal. We now inspect our macro-policy and attention mechanism to verify this behavior.\nFigure 6a depicts how the macro-policy πmacro guides the micro-policy πmicro through the attention φ, by attending to the direction in which the agent can reach the predicted macro-goal. The attention model and micro-policy differ in semantic behavior: the attention favors a wider range of velocities and larger magnitudes, while the micro-policy favors smaller velocities.\n2We chose this preference study design to focus the qualitative comparison on the plausibility of individual movements (e.g. how players might practice alone), as opposed to strategically coordinated team movements.\nFigure 6b depicts predicted macro-goals by HPN along with rollout tracks. In general, we see that the rollouts are guided towards the predicted macro-goals. However, we also observe that the HPN makes some inconsistent macro-goal predictions, which suggests there is still room for improvement."
    }, {
      "heading" : "5.4 Benchmark Analysis",
      "text" : "We finally evaluated using a number of benchmark experiments, with results shown in Table 2. These experiments measure quantities that are related to overall quality, albeit not holistically. We first evaluated the 4-step look-ahead accuracy of the HPN for micro-actions ait+∆,∆ = 0, 1, 2, 3. On this benchmark, the HPN outperforms all baseline policy networks when not using weak labels φ̂ to train the attention mechanism, which suggests that using a hierarchical model can noticeably improve the short-term prediction accuracy over non-hierarchical baselines.\nWe also report the prediction accuracy on weak labels ĝ, φ̂, although they were only used during pretraining, and we did not fine-tune for accuracy on them. Using weak labels one can tune the network for both long-term and short-term planning, whereas all non-hierarchical baselines are optimized for short-term planning only. Including the weak labels φ̂ can lower the accuracy on short-term prediction, but increases the quality of the on-policy rollouts. This trade-off can be empirically set by tuning the number of weak labels used during pre-training."
    }, {
      "heading" : "6 Limitations and Future Work",
      "text" : "We have presented a hierarchical memory network for generating long-term spatiotemporal trajectories. Our approach simultaneously models macro-goals and micro-actions and integrates them using a novel attention mechanism. We demonstrated significant improvement over non-hierarchical baselines in a case study on modeling basketball player behavior.\nThere are several notable limitations to our HPN model. First, we did not consider all aspects of basketball gameplay, such as passing and shooting. We also modeled all players using a single policy whereas in reality player behaviors vary (although the variability can be low-dimensional (Yue et al. [16])). We only modeled offensive players: an interesting direction is modeling defensive players and integrating adversarial reinforcement learning (Panait and Luke [13]) into our approach. These issues limited the scope of our preference study, and it would be interesting to consider extended settings.\nIn order to focus on the HPN model class, we only used the imitation learning setting. More broadly, many planning problems require collecting training data via exploration (Mnih et al. [11]), which can be more challenging. One interesting scenario is having two adversarial policies learn to be strategic against each other through repeatedly game-play in a basketball simulator. Furthermore, in general it can be difficult to acquire the appropriate weak labels to initialize the macro-policy training.\nFrom a technical perspective, using attention in the output space may be applicable to other architectures. More sophisticated applications may require multiple levels of output attention masking.\nAcknowledgments. This research was supported in part by NSF Award #1564330, and a GPU donation (Tesla K40 and Titan X) by NVIDIA."
    } ],
    "references" : [ {
      "title" : "Online planning for large markov decision processes with hierarchical decomposition",
      "author" : [ "Aijun Bai", "Feng Wu", "Xiaoping Chen" ],
      "venue" : "ACM Transactions on Intelligent Systems and Technology (TIST),",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2015
    }, {
      "title" : "Learning by imitation: A hierarchical approach",
      "author" : [ "Richard W Byrne", "Anne E Russon" ],
      "venue" : "Behavioral and brain sciences,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 1998
    }, {
      "title" : "Gated feedback recurrent neural networks",
      "author" : [ "Junyoung Chung", "Çaglar Gülçehre", "Kyunghyun Cho", "Yoshua Bengio" ],
      "venue" : "In Proceedings of the 32nd International Conference on Machine Learning, ICML 2015,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2015
    }, {
      "title" : "A recurrent latent variable model for sequential data",
      "author" : [ "Junyoung Chung", "Kyle Kastner", "Laurent Dinh", "Kratarth Goel", "Aaron C Courville", "Yoshua Bengio" ],
      "venue" : "Advances in Neural Information Processing Systems",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2015
    }, {
      "title" : "Dual-Process Theories of Higher Cognition Advancing the Debate",
      "author" : [ "Jonathan St B.T. Evans", "Keith E. Stanovich" ],
      "venue" : "Perspectives on Psychological Science,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2013
    }, {
      "title" : "Efficient Solution Algorithms for Factored MDPs",
      "author" : [ "Carlos Guestrin", "Daphne Koller", "Ronald Parr", "Shobha Venkataraman" ],
      "venue" : "J. Artif. Int. Res.,",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2003
    }, {
      "title" : "PUMA: Planning Under Uncertainty with Macro-Actions",
      "author" : [ "Ruijie He", "Emma Brunskill", "Nicholas Roy" ],
      "venue" : "In Twenty-Fourth AAAI Conference on Artificial Intelligence,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 2010
    }, {
      "title" : "Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift",
      "author" : [ "Sergey Ioffe", "Christian Szegedy" ],
      "venue" : null,
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2015
    }, {
      "title" : "Robot learning from demonstration by constructing skill trees",
      "author" : [ "George Konidaris", "Scott Kuindersma", "Roderic Grupen", "Andrew Barto" ],
      "venue" : "The International Journal of Robotics Research,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 2012
    }, {
      "title" : "Human-level control through deep reinforcement learning",
      "author" : [ "Volodymyr Mnih", "Koray Kavukcuoglu", "David Silver", "Andrei A. Rusu", "Joel Veness", "Marc G. Bellemare", "Alex Graves", "Martin Riedmiller", "Andreas K. Fidjeland", "Georg Ostrovski", "Stig Petersen", "Charles Beattie", "Amir Sadik", "Ioannis Antonoglou", "Helen King", "Dharshan Kumaran", "Daan Wierstra", "Shane Legg", "Demis Hassabis" ],
      "venue" : "doi: 10.1038/nature14236",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2015
    }, {
      "title" : "Learning strategies in table tennis using inverse reinforcement learning",
      "author" : [ "Katharina Muelling", "Abdeslam Boularias", "Betty Mohler", "Bernhard Schölkopf", "Jan Peters" ],
      "venue" : "Biological Cybernetics,",
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 2014
    }, {
      "title" : "Cooperative multi-agent learning: The state of the art",
      "author" : [ "Liviu Panait", "Sean Luke" ],
      "venue" : "Autonomous Agents and Multi-Agent Systems,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2005
    }, {
      "title" : "Between MDPs and semi-MDPs: A framework for temporal abstraction in reinforcement learning",
      "author" : [ "Richard S. Sutton", "Doina Precup", "Satinder Singh" ],
      "venue" : "Artificial Intelligence,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 1999
    }, {
      "title" : "Show, Attend and Tell: Neural Image Caption Generation with Visual Attention",
      "author" : [ "Kelvin Xu", "Jimmy Ba", "Ryan Kiros", "Kyunghyun Cho", "Aaron Courville", "Ruslan Salakhutdinov", "Richard Zemel", "Yoshua Bengio" ],
      "venue" : null,
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 2015
    }, {
      "title" : "Maximum entropy inverse reinforcement learning",
      "author" : [ "Brian D Ziebart", "Andrew L Maas", "J Andrew Bagnell", "Anind K Dey" ],
      "venue" : "In AAAI,",
      "citeRegEx" : "17",
      "shortCiteRegEx" : "17",
      "year" : 2008
    } ],
    "referenceMentions" : [ {
      "referenceID" : 0,
      "context" : "[1]) used a manually constructed hierarchical policy to solve MDPs with a set of fixed sub-tasks, while Konidaris et al.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 8,
      "context" : "[10] segmented demonstrations to construct a hierarchy of static macro-goals.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 3,
      "context" : "[4]), such as handwriting generation, have combined latent variables with an RNN’s hidden state to capture temporal variability in the input.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 4,
      "context" : "Our model shares conceptual similarities to the Dual Process framework (Evans and Stanovich [5]), which decomposes cognitive processes into fast, unconscious behavior (System 1) and slow, conscious behavior (System 2).",
      "startOffset" : 92,
      "endOffset" : 95
    }, {
      "referenceID" : 1,
      "context" : "Other related work in neuroscience and cognitive science include hierarchical models of learning by imitation (Byrne and Russon [2]).",
      "startOffset" : 128,
      "endOffset" : 131
    }, {
      "referenceID" : 7,
      "context" : "Batch-normalization \"bn\" (Ioffe and Szegedy [9]) is applied to stabilize training.",
      "startOffset" : 44,
      "endOffset" : 47
    }, {
      "referenceID" : 2,
      "context" : "[3] and a memory-less 2-layer fully-connected network as the transfer function φ, as depicted in Figure 4.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 11,
      "context" : "We only modeled offensive players: an interesting direction is modeling defensive players and integrating adversarial reinforcement learning (Panait and Luke [13]) into our approach.",
      "startOffset" : 158,
      "endOffset" : 162
    } ],
    "year" : 2016,
    "abstractText" : "We study the problem of modeling spatiotemporal trajectories over long time horizons using expert demonstrations. For instance, in sports, agents often choose action sequences with long-term goals in mind, such as achieving a certain strategic position. Conventional policy learning approaches, such as those based on Markov decision processes, generally fail at learning cohesive long-term behavior in such high-dimensional state spaces, and are only effective when fairly myopic decisionmaking yields the desired behavior. The key difficulty is that conventional models are “single-scale” and only learn a single state-action policy. We instead propose a hierarchical policy class that automatically reasons about both long-term and shortterm goals, which we instantiate as a hierarchical neural network. We showcase our approach in a case study on learning to imitate demonstrated basketball trajectories, and show that it generates significantly more realistic trajectories compared to non-hierarchical baselines as judged by professional sports analysts.",
    "creator" : "LaTeX with hyperref package"
  }
}