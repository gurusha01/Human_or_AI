{
  "name" : "b51a15f382ac914391a58850ab343b00.pdf",
  "metadata" : {
    "source" : "META",
    "title" : "Phased Exploration with Greedy Exploitation in Stochastic Combinatorial Partial Monitoring Games",
    "authors" : [ "Sougata Chaudhuri", "Ambuj Tewari" ],
    "emails" : [ "sougata@umich.edu", "tewaria@umich.edu" ],
    "sections" : [ {
      "heading" : null,
      "text" : "Partial monitoring games are repeated games where the learner receives feedback that might be different from adversary’s move or even the reward gained by the learner. Recently, a general model of combinatorial partial monitoring (CPM) games was proposed [1], where the learner’s action space can be exponentially large and adversary samples its moves from a bounded, continuous space, according to a fixed distribution. The paper gave a confidence bound based algorithm (GCB) that achieves O(T 2/3 log T ) distribution independent and O(log T ) distribution dependent regret bounds. The implementation of their algorithm depends on two separate offline oracles and the distribution dependent regret additionally requires existence of a unique optimal action for the learner. Adopting their CPM model, our first contribution is a Phased Exploration with Greedy Exploitation (PEGE) algorithmic framework for the problem. Different algorithms within the framework achieve O(T 2/3 √ log T ) distribution independent and O(log2 T ) distribution dependent regret respectively. Crucially, our framework needs only the simpler “argmax” oracle from GCB and the distribution dependent regret does not require existence of a unique optimal action. Our second contribution is another algorithm, PEGE2, which combines gap estimation with a PEGE algorithm, to achieve an O(log T ) regret bound, matching the GCB guarantee but removing the dependence on size of the learner’s action space. However, like GCB, PEGE2 requires access to both offline oracles and the existence of a unique optimal action. Finally, we discuss how our algorithm can be efficiently applied to a CPM problem of practical interest: namely, online ranking with feedback at the top."
    }, {
      "heading" : "1 Introduction",
      "text" : "Partial monitoring (PM) games are repeated games played between a learner and an adversary over discrete time points. At every time point, the learner and adversary each simultaneously select an action, from their respective action sets, and the learner gains a reward, which is a function of the two actions. In PM games, the learner receives limited feedback, which might neither be adversary’s move (full information games) nor the reward gained (bandit games). In stochastic PM games, adversary generates actions which are independent and identically distributed according to a distribution fixed before the start of the game and unknown to the learner. The learner’s objective is to develop a learning strategy that incurs low regret over time, based on the feedback received during the course of the game. Regret is defined as the difference between cumulative reward of the learner’s strategy and the best fixed learner’s action in hindsight. The usual learning strategies in online games combine some form of exploration (getting feedback on certain learner’s actions) and exploitation (playing the perceived optimal action based on current estimates).\n30th Conference on Neural Information Processing Systems (NIPS 2016), Barcelona, Spain.\nStarting with early work in the 2000s [2, 3], the study of finite PM games reached a culmination point with a comprehensive and complete classification [4]. We refer the reader to these works for more references and also note that newer results continue to appear [5]. Finite PM games restrict both the learner’s and adversary’s action spaces to be finite, with a very general feedback model. All finite partial monitoring games can be classified into one of four categories, with minimax regret Θ(T ), Θ(T 2/3), Θ(T 1/2) and Θ(1). The classification is governed by global and local observability properties pertaining to a game [4]. Another line of work has extended traditional multi-armed bandit problem (MAB) [6] to include combinatorial action spaces for learner (CMAB) [7, 8]. The combinatorial action space can be exponentially large, rendering traditional MAB algorithms designed for small finite action spaces, impractical with regret bounds scaling with size of action space. The CMAB algorithms exploit a finite subset of base actions, which are specific to the structure of problem at hand, leading to practical algorithms and regret bounds that do not scale with, or scale very mildly with, the size of the learner’s action space.\nWhile finite PM and CMAB problems have witnessed a lot of activity, there is only one paper [1] on combinatorial partial monitoring (CPM) games, to the best of our knowledge. In that paper, the authors combined the combinatorial aspect of CMAB with the limited feedback aspect of finite PM games, to develop a CPM model. The model extended PM games to include combinatorial action spaces for learner, which might be exponentially large, and infinite action spaces for the adversary. Neither of these situations can be handled by generic algorithms for finite PM games. Specifically, the model considered an action space X for the learner, that has a small subset of actions defining a global observable set (see Assumption 2 in Section 2). The adversary’s action space is a continuous, bounded vector space with the adversary sampling moves from a fixed distribution over the vector space. The reward function considered is a general non-linear function of learner’s and adversary’s actions, with some restrictions (see Assumptions 1 & 3 in Section 2). The model incorporated a linear feedback mechanism where the feedback received is a linear transformation of adversary’s move. Inspired by the classic confidence bound algorithms for MABs, such as UCB [6], the authors proposed a Global Confidence Bound (GCB) algorithm that enjoyed two types of regret bound. The first one was a distribution independent O(T 2/3 log T ) regret bound and the second one was a distribution dependent O(log T ) regret bound. A distribution dependent regret bound involves factors specific to the adversary’s fixed distribution, while distribution independent means the regret bound holds over all possible distributions in a broad class of distributions. Both bounds also had a logarithmic dependence on |X |. The algorithm combined online estimation with two offline computational oracles. The first oracle finds the action(s) achieving maximum value of reward function over X , for a particular adversary action (argmax oracle), and the second oracle finds the action(s) achieving second maximum value of reward function over X , for a particular adversary action (arg-secondmax oracle). Moreover, the distribution dependent regret bound requires existence of a unique optimal learner action. The inspiration for the CPM model came from various applications like crowdsourcing and matching problems like matching products with customers.\nOur Contributions. We adopt the CPM model proposed earlier [1]. However, instead of using upper confidence bound techniques, our work is motivated by another classic technique developed for MABs, namely that of forced exploration. This technique was already used in the classic paper of Robbins [9] and has also been called “forcing with certainty equivalence” in the control theory literature [10]. We develop a Phased Exploration with Greedy Exploitation (PEGE) algorithmic framework (Section 3) borrowing the PEGE terminology from work on linearly parameterized bandits [11]. When the framework is instantiated with different parameters, it achieves O(T 2/3 √ log T ) distribution independent and O(log2 T ) distribution dependent regret. Significantly, the framework combines online estimation with only the argmax oracle from GCB, which is a practical advantage over requiring an additional arg-secondmax oracle. Moreover, the distribution dependent regret does not require existence of unique optimal action. Uniqueness of optimal action can be an unreasonable assumption, especially in the presence of a combinatorial action space. Our second contribution is another algorithm PEGE2 (Section 4) that combines a PEGE algorithm with Gap estimation, to achieve a distribution dependent O(log T ) regret bound, thus matching the GCB regret guarantee in terms of T and gap. Here, gap refers to the difference between expected reward of optimal and second optimal learner’s actions. However, like GCB, PEGE2 does require access to both the oracles, existence of unique optimal action for O(log T ) regret and its regret is never larger than O(T 2/3 log T ) when there is no unique optimal action. A crucial advantage of PEGE and PEGE2 over GCB is that all our regret bounds are independent of |X |, only depending on the size of the\nsmall global observable set. Thus, though we have adopted the CPM model [1], our regret bounds are meaningful for countably infinite or even continuous learner’s action space, whereas GCB regret bound has an explicit logarithmic dependence on |X |. We provide a detailed comparison of our work with the GCB algorithm in Section 5. Finally, we discuss how our algorithms can be efficiently applied in the CPM problem of online ranking with feedback restricted to top ranked items (Section 6), a problem already considered [12] but analyzed in a non-stochastic setting."
    }, {
      "heading" : "2 Preliminaries and Assumptions",
      "text" : "The online game is played between a learner and an adversary, over discrete rounds indexed by t = 1, 2, . . .. The learner’s action set is denoted as X which can be exponentially large. The adversary’s action set is the infinite set [0, 1]n. The adversary fixes a distribution p on [0, 1]n before start of the game (adversary’s strategy), with p unknown to the learner. At each round of the game, adversary samples θ(t) ∈ [0, 1]n according to p, with Eθ(t)∼p[θ(t)] = θ∗p. The learner chooses x(t) ∈ X and gets reward r(x(t), θ(t)). However, the learner might not get to know either θ(t) (as in a full information game) or r(x(t), θ(t)) (as in a bandit game). In fact, the learner receives, as feedback, a linear transformation of θ(t).That is, every action x ∈ X has an associated transformation matrix Mx ∈ Rmx×n. On playing action x(t), the learner receives a feedback Mx(t) · θ(t) ∈ Rmx . Note that the game with the defined feedback mechanism subsumes full information and bandit games. Mx = In×n, ∀x makes it a full information game since Mx · θ = θ. If r(x, θ) = x · θ, then Mx = x ∈ Rn makes it a bandit game. The dimension n, action space X , reward function r(·, ·) and transformation matrices Mx, ∀x ∈ X are known to the learner. The goal of the learner is to minimize the expected regret, which, for a given time horizon T , is:\nR(T ) = T ·max x∈X E[r(x, θ)]− T∑ t=1 E[r(x(t), θ(t))] (1)\nwhere the expectation in the first term is taken over θ, w.r.t. distribution p, and the second expectation is taken over θ and possible randomness in the learner’s algorithm.\nAssumption 1. (Restriction on Reward Function) The first assumption is that Eθ∼p[r(x, θ)] = r̄(x, θ∗p), for some function r̄(·, ·). That is, the expected reward is a function of x and θ∗p, which is always satisfied if r(x, θ) is a linear function of θ, or if distribution p happens to be any distribution with support [0, 1]n and fully parameterized by its mean θ∗p . With this assumption, the expected regret becomes:\nR(T ) = T · r̄(x∗, θ∗p)− T∑ t=1 E[r̄(x(t), θ∗p)]. (2)\nFor distribution dependent regret bounds, we define gaps in expected rewards: Let x∗ ∈ S(θ∗p) = argmaxx∈X r̄(x, θ ∗ p). Then ∆x = r̄(x\n∗, θ∗p) − r̄(x, θ∗p) , ∆max = max{∆x : x ∈ X} and ∆ = min{∆x : x ∈ X ,∆x > 0}. Assumption 2. (Existence of Global Observable Set) The second assumption is on the existence of a global observable set, which is a subset of learner’s action set and is required for estimating an adversary’s move θ. The global observable set is defined as follows: for a set of actions σ = {x1, x2, . . . , x|σ|} ⊆ X , let their transformation matrices be stacked in a top down fashion to obtain a R ∑|σ| i=1 mxi×n dimensional matrix Mσ . σ is said to be a global observable set if Mσ has full column rank, i.e., rank(Mσ) = n. Then, the Moore-Penrose pseudoinverse M+σ satisfies M + σ Mσ = In×n. Without the assumption on the existence of global observable set, it might be the case that even if the learner plays all actions in X on same θ, the learner might not be able to recover θ (as M+σ Mσ = In×n will not hold without full rank assumption). In that case, learner might not be able to distinguish between θ∗p1 and θ ∗ p2 , corresponding to two different adversary’s strategies. Then, with non-zero probability, the learner can suffer Ω(T ) regret and no learner strategy can guarantee a sub-linear in T regret (the intuition forms the base of the global observability condition in [2]). Note that the size of the global observable set is small, i.e., |σ| ≤ n. A global observable set can be found by including an action x in σ if it strictly increases the rank of Mσ , till the rank reaches n. There can, of course, be more than one global observable set.\nAssumption 3. (Lipschitz Continuity of Expected Reward Function) The third assumption is on the Lipschitz continuity of expected reward function in its second argument. More precisely, it is assumed that ∃ R > 0 such that ∀ x ∈ X , for any θ1 and θ2, |r̄(x, θ1)− r̄(x, θ2)| ≤ R‖θ1 − θ2‖2. This assumption is reasonable since otherwise, a small error in estimation of mean reward vector θ∗p can introduce a large change in expected reward, leading to difficulty in controlling regret over time. The Lipschitz condition holds trivially for expected reward functions which are linear in second argument. The continuity assumption, along with the fact that adversary’s moves are in [0, 1]n, implies boundedness of expected reward for any learner’s action and any adversary’s action. We denote Rmax = maxx∈X ,θ∈[0,1]n r̄(x, θ).\nThe three assumptions above will be made throughout. However, the fourth assumption will only be made in a subset of our results.\nAssumption 4. (Unique Optimal Action) The optimal action x∗ = argmaxx∈X r̄(x, θ∗p) is unique. Denote a second best action (which may not be unique) by x∗− = argmaxx∈X ,x 6=x∗ r̄(x, θ ∗ p). Note that ∆ = r̄(x∗, θ∗p)− r̄(x∗−, θ∗p)."
    }, {
      "heading" : "3 Phased Exploration with Greedy Exploitation",
      "text" : "Algorithm 1 (PEGE) uses the classic idea of doing exploration in phases that are successively further apart from each other. In between exploration phases, we select action greedily by completely trusting the current estimates. The constant β controls how much we explore in a given phase and the constant α along with the function C(·) determines how much we exploit. This idea is classic in the bandit literature [9–11] but has not been applied to the CPM framework to the best of our knowledge.\nAlgorithm 1 The PEGE Algorithmic Framework 1: Inputs: α, β and function C(·) (to determine amount of exploration/exploitation in each phase)."
    }, {
      "heading" : "2: For b = 1, 2, . . . ,",
      "text" : ""
    }, {
      "heading" : "3: Exploration",
      "text" : "4: For i = 1 to |σ| (σ is global observable set) 5: For j = 1 to bβ 6: Let tj,i = t and θ(tj,i, b) = θ(t) where t is current time point 7: Play xi ∈ σ and get feedback Mxi · θ(tj,i, b) ∈ Rmxi . 8: End For 9: End For 10: Estimation 11: θ̃j,i = M+σ (Mx1 · θ(tj,1, i), . . . ,Mx|σ| · θ(tj,|σ|, i)) ∈ Rn.\n12: θ̂(b) =\n∑b i=1 ∑iβ j=1 θ̃j,i∑b\nj=1 j β\n∈ Rn.\n13: x(b) ∈ argmaxx∈X r̄(x, θ̂(b)). 14: Exploitation 15: For i = 1 to exp(C(bα)) 16: Play x(b). 17: End For 18: End For\nIt is easy to see that the estimators in Algorithm 1 have the following properties: Ep[θ̃j,i] = M+σ (Mx1 · θ∗p, . . . ,Mx|σ| · θ∗p) = M+σ Mσ · θ∗p = θ∗p and hence Ep[θ̂] = θ∗p. Using the fact that M+σ = (M > σ Mσ) −1M>σ , we also have the following bound on estimation error of θ ∗ p:\n‖θ̃j,i − θ∗p‖2 ≤ ‖M+σ (Mx1 · θ(tj,1, i), . . . ,Mx|σ| · θ(tj,|σ|, i))−M + σ Mσθ ∗ p‖2\n= ‖(M>σ Mσ)−1 |σ|∑ k=1 M>xkMxk · (θ(tj,k, i)− θ ∗ p)‖2 ≤ √ n |σ|∑ k=1 ‖(M>σ Mσ)−1M>xkMxk‖2 =: βσ\n(3)\nwhere the constant βσ defined above depends only on the structure of the linear transformation matrices of the global observer set and not on adversary strategy p.\nOur first result is about the regret of Algorithm 1 when within phase number b, the exploration part spends |σ| rounds (constant w.r.t. b) and the exploitation part grows polynomially with b. Theorem 1. (Distribution Independent Regret) When Algorithm 1 is initialized with the parameters C(a) = log a, α = 1/2 and β = 0, and the online game is played over T rounds, we get the following bound on expected regret:\nR(T ) ≤ Rmax|σ|T 2/3 + 2RβσT 2/3 √ log 2e2 + 2 log T +Rmax (4)\nwhere βσ is the constant as defined in Eq. 3.\nOur next result is about the regret of Algorithm 1 when within phase number b, the exploration part spends |σ| · b rounds (linearly increasing with b) and the exploitation part grows exponentially with b. Theorem 2. (Distribution Dependent Regret) When Algorithm 1 is initialized with the parameters C(a) = h · a, for a tuning parameter h > 0, α = 1 and β = 1, and the online game is played over T rounds, we get the following bound on expected regret:\nR(T ) ≤ ∑ x∈σ ∆x ( log T h )2 + 4 √ 2πe2R∆maxβσ ∆ e h2(2R2β2σ) ∆2 . (5)\nSuch an explicit bound for a PEGE algorithm that is polylogarithmic in T and explicitly states the multiplicative and additive constants involved in not known, to the best of our knowledge, even in the bandit literature (e.g., earlier bounds [10] are asymptotic) whereas here we prove it in the CPM setting. Note that the additive constant above, though finite, blows up exponentially fast as ∆→ 0 for a fixed h. It is well behaved however, if the tuning parameter h is on the same scale as ∆. This line of thought motivates us to estimate the gap to within constant factors and then feed that estimate into a PEGE algorithm. This is what we will do in the next section."
    }, {
      "heading" : "4 Combining Gap Estimation with PEGE",
      "text" : "Algorithm 2 tries to estimate the gap ∆ to within a constant multiplicative factor. However, if there is no unique optimal action or when the true gap is small, gap estimation can take a very large amount of time. To prevent that from happening, the algorithm also takes in a threshold T0 as input and definitely stops if the threshold is reached. The result below assures us that, with high probability, the algorithm behaves as expected. That is, if there is a unique optimal action and the gap is large enough to be estimated with a given confidence before the threshold T0 kicks in, it will output an estimate ∆̂ in the range [0.5∆, 1.5∆]. On the other hand, if there is no unique optimal action, it does not generate an estimate of ∆ and instead runs out of the exploration budget T0. Theorem 3. (Gap Estimation within Constant Factors) Let T0 ≥ 1 and δ ∈ (0, 1) and define T1(δ) = 256R2β2σ ∆2 log 512e2R2β2σ ∆2δ , T2(δ) = 16R2β2σ ∆2 log 4e2 δ . Consider Algorithm 2 run with\nw(b) =\n√ R2β2σ log( 4e2b2 δ )\nb . (6)\nThen, the following 3 claims hold.\n1. Suppose Assumption 4 holds and T1(δ) < T0. Then with probability at least 1 − δ, Algorithm 2 stops in T1(δ) episodes and outputs an estimate ∆̂ that satisfies 12∆ ≤ ∆̂ ≤ 3 2∆.\n2. Suppose Assumption 4 holds and T0 ≤ T1(δ). Then with probability at least 1 − δ, the algorithm either outputs “threshold exceeded” or outputs an estimate ∆̂ that satisfies 1 2∆ ≤ ∆̂ ≤ 3 2∆. Furthermore, if it outputs ∆̂, it must be the case that the algorithm stopped\nat an episode b such that T2(δ) < b < T0.\n3. Suppose Assumption 4 fails. Then, with probability at least 1− δ, Algorithm 2 stops in T0 episodes and outputs “threshold exceeded”.\nAlgorithm 2 Algorithm for Gap Estimation 1: Inputs: T0 (exploration threshold) and δ (confidence parameter)\n2: For b = 1, 2, . . . , 3: Exploration 4: For i = 1 to |σ| 5: (Denote) ti = t and θ(ti, b) = θ(t) (t is current time point). 6: Play xi ∈ σ and get feedback Mxi · θ(ti, b) ∈ Rmxi . 7: End For 8: Estimation 9: θ̃b = M+σ (Mx1 · θ(t1, b), . . . ,Mx|σ| · θ(t|σ|, b)) ∈ Rn.\n10: θ̂(b) = ∑b i=1 θ̃i b ∈ Rn.\n11: Stopping Rule (w(b) is defined as in Eq. (6))"
    }, {
      "heading" : "12: If argmaxx∈X r̄(x, θ̂(b)) is unique:",
      "text" : ""
    }, {
      "heading" : "13: x̂(b) = argmaxx∈X r̄(x, θ̂(b))",
      "text" : ""
    }, {
      "heading" : "14: x̂−(b) = argmaxx∈X ,x 6=x̂(b) r̄(x, θ̂(b)) (need not be unique)",
      "text" : "15: If r̄(x̂(b), θ̂(b))− r̄(x̂−(b), θ̂(b)) > 6w(b): 16: STOP and output ∆̂ = r̄(x̂(b), θ̂(b))− r̄(x̂−(b), θ̂(b)) 17: End If 18: End If 19: If b > T0: 20: STOP and output “threshold exceeded” 21: End If 22: End For\nEquipped with Theorem 3, we are now ready to combine Algorithm 2 with Algorithm 1 to give Algorithm 3. Algorithm 3 first calls Algorithm 2. If Algorithm 2 outputs an estimate ∆̂ it is fed into Algorithm 1. If the threshold T0 is exceeded, then the remaining time is spent in pure exploitation. Note that by choosing T0 to be of order T 2/3 we can guarantee a worst case regret of the same order even when unique optimality assumption fails. For PM games that are globally observable but not locally observable, such a distribution independent O(T 2/3) bound is known to be optimal [4]. Theorem 4. (Regret Bound for PEGE2) Consider Algorithm 3 run with knowledge of the number T of rounds. Consider the distribution independent bound\nB1(T ) = 2(2Rβσ|σ|2R2maxT )2/3 √ log(4e2T 3) +Rmax,\nand the distribution dependent bound\nB2(T ) = 256R2β2σ\n∆2 log\n512e2R2β2σT\n∆2 Rmax|σ|+ ∑ x∈σ ∆x 36R2β2σ log T ∆2 + 8e2R2β2σ ∆2 +Rmax.\nIf Assumption 4 fails, then the expected regret of Algorithm 3 is bounded as R(T ) ≤ B1(T ). If Assumption 4 holds, then the expected regret of Algorithm 3 is bounded as\nR(T ) ≤ { B2(T ) if T1(δ) < T0 O(T 2/3 log T ) if T0 ≤ T1(δ) , (7)\nwhere T1(δ) is as defined in Theorem 3 and δ, T0 are as defined in Algorithm 3.\nIn the above theorem, note that T1(δ) scales as Θ( 1∆2 log T ∆2 ) and T0 as Θ(T 2/3). Thus, the two cases in Eq. (7) correspond to large gap and small gap situations respectively."
    }, {
      "heading" : "5 Comparison with GCB Algorithm",
      "text" : "We provide a detailed comparison of our results with those obtained for GCB [1]. (a) While we use the same CPM model, our solution is inspired by the forced exploration technique while GCB\nAlgorithm 3 Algorithm Combining PEGE with Gap Estimation (PEGE2) 1: Input: T (total number of rounds) 2: Call Algorithm 2 with inputs T0 = (\n2RβσT |σ|Rmax\n)2/3 and δ = 1/T\n3: If Algorithm 2 returns “threshold exceeded”: 4: Let θ̂(T0) be the latest estimate of θ∗p maintained by Algorithm 2 5: Play x̂(T0) = argmaxx∈X r̄(x, θ̂) for the remaining T − T0|σ| rounds 6: Else: 7: Let ∆̂ be the gap estimate produced by Algorithm 2 8: For all remaining time steps, run Algorithm 1 with parameters C(a) = ha with\nh = ∆̂ 2\n9R2β2σ , α = 1, β = 0\n9: End If\nis inspired by the confidence bound technique, both of which are classic in the bandit literature. (b) One instantiation of our PEGE framework gives an O(T 2/3 √ log T ) distribution independent regret bound (Theorem 1), which does not require call to arg-secondmax oracle. This is of substantial practical advantage over GCB since even for linear optimization problems over polyhedra, standard routines usually do not have option of computing action(s) that achieve second maximum value for the objective function. (c) Another instantiation of the PEGE framework gives an O(log2 T ) distribution dependent regret bound (Theorem 2), which neither requires call to arg-secondmax oracle nor the assumption of existence of unique optimal action for learner. This is once again important, since the assumption of existence of unique optimal action might be impractical, especially for exponentially large action space. However, the caveat is that improper setting of the tuning parameter h in Theorem 2 can lead to an exponentially large additive component in the regret. (d) A crucial point, which we had highlighted in the beginning, is that the regret bounds achieved by PEGE and PEGE2 do not have dependence on size of learner’s action space, i.e., |X |. The dependence is only on the size of global observable set σ, which is guaranteed to be not more than dimension of adversary’s action space. Thus, though we have adopted the CPM model [1], our algorithms achieve meaningful regret bounds for countably infinite or even continuous learner’s action space. In contrast, the GCB regret bounds have explicit, logarithmic dependence on size of learner’s action space. Thus, their results cannot be extended to problems with infinite learner’s action space (see Section 6 for an example), and are restricted to large, but finite action spaces. (e) The PEGE2 algorithm is a true analogue of the GCB algorithm, matching the regret bounds of GCB in terms of T and gap ∆ with the advantage that it has no dependence on |X |. The disadvantage, however, is that PEGE2 requires knowledge of time horizon T , while GCB is an anytime algorithm. It remains an open problem to design an algorithm that combines the strengths of PEGE2 and GCB."
    }, {
      "heading" : "6 Application to Online Ranking",
      "text" : "A recent paper studied the problem of online ranking with feedback restricted to top ranked items [12]. The problem was studied in a non-stochastic setting, i.e., it was assumed that an oblivious adversary generates reward vectors. Moreover, the learner’s action space was exponentially large in number of items to be ranked. The paper made the connection of the problem setting to PM games (but not combinatorial PM games) and proposed an efficient algorithm for the specific problem at hand. However, a careful reading of the paper shows that their algorithmic techniques can handle the CPM model we have discussed so far, but in the non-stochastic setting. The reward function is linear in both learner’s and adversary’s moves, adversary’s move is restricted to a finite space of vectors and feedback is a linear transformation of adversary’s move. In this section, we give a brief description of the problem setting and show how our algorithms can be used to efficiently solve the problem of online ranking with feedback on top ranked items in the stochastic setting. We also give an example of how the ranking problem setting can be somewhat naturally extended to one which has continuous action space for learner, instead of large but finite action space.\nThe paper considered an online ranking problem, where a learner repeatedly re-ranks a set of n, fixed items, to satisfy diverse users’ preferences, who visit the system sequentially. Each learner action x\nis a permutation of the n items. Each user has like/dislike preference for each item, varying between users, with each user’s preferences encoded as an n length binary relevance vector θ. Once the ranked list of items is presented to the user, the user scans through the items, but gives relevance feedback only on top ranked item. However, the performance of the learner is judged based on full ranked list and unrevealed, full relevance vector. Thus, we have a PM game, where neither adversary generated relevance vector nor reward is revealed to learner. The paper showed how a number of practical ranking measures, like Discounted Cumulative Gain (DCG), can be expressed as a linear function, i.e., r(x, θ) = f(x) · θ. The practical motivation of the work was based on learning a ranking strategy to satisfy diverse user preferences, but with limited feedback received due to user burden constraints and privacy concerns.\nOnline Ranking with Feedback at Top as a Stochastic CPM Game. We show how our algorithms can be applied in online ranking with feedback for top ranked items by showing how it is a specific instance of the CPM model and how our key assumptions are satisfied. The learner’s action space is the finite but exponentially large space of X = n! permutations. Adversary’s move is an n dimensional relevance vector, and thus, is restricted to {0, 1}n (finite space of size 2n) contained in [0, 1]n. In the stochastic setting, we can assume that adversary samples θ ∈ {0, 1}n from a fixed distribution on the space. Since the feedback on playing a permutation is the relevance of top ranked item, each move x has an associated transformation matrix (vector) Mx ∈ {0, 1}n, with 1 in the place of the item which is ranked at the top by x and 0 everywhere else. Thus, Mx · θ gives the relevance of item ranked at the top by x. The global observable set σ is the set of any n actions, where each action, in turn, puts a distinct item on top. Hence, Mσ is the n× n dimensional permutation matrix. Assumption 1 is satisfied because the reward function is linear in θ and r̄(x, θ∗p) = f(x) · θ∗p , where Ep[θ] = θ∗p ∈ [0, 1]n. Assumption 2 is satisfied since there will always be a global observable set of size n and can be found easily. In fact, there will be multiple global observable sets, with the freedom to choose any one of them. Assumption 3 is satisfied due to the expected reward function being linear in second argument. The Lipschitz constant is maxx∈X ‖f(x)‖2, which is always less than some small polynomial factor of n, depending on specific f(·). The value of βσ can be easily seen to be n3/2. The argmax oracle returns the permutation which simply sorts items according to their corresponding θ values. The arg-secondmax oracle is more complicated, though feasible. It requires first sorting the items according to θ and then compare each pair of consecutive items to see where least drop in reward value occurs and switch the corresponding items.\nLikely Failure of Unique Optimal Action Assumption. Assumption 4 is unlikely to hold in this problem setting (though of course theoretically possible). The mean relevance vector θ∗p effectively reflects the average preference of all users for each of the n items. It is very likely that at least a few items will not be liked by anyone and which will ultimately be always ranked at the bottom. Equally possible is that two items will have same user preference on average, and can be exchanged without hurting the optimal ranking. Thus, existence of an unique optimal ranking, which indicates that each item will have different average user preference than every other item, is unlikely. Thus, PEGE algorithm can still be applied to get poly-logarithmic regret (Theorem 2), but GCB will only achieve O(T 2/3 log T ) regret.\nA PM Game with Infinite Learner Action Space. We give a simple modification of the ranking problem above to show how the learner can have continuous action space. The learner now ranks the items by producing an n dimensional score vector x ∈ [0, 1]n and sorting items according to their scores. Thus the learner’s action space is now an uncountably infinite continuous space. As before, the user gets to see the ranked list and gives relevance feedback on top ranked item. The learner’s performance will now be judged by a continuous loss function, instead of a discrete-valued ranking measure, since its moves are in a continuous space. Consider the simplest loss, viz., the squared “loss” r(x, θ) = −‖x− θ‖22 (note -ve sign to keep reward interpetation). It can be easily seen that r̄(x, θ∗p) = Eθ∼p[r(x, θ)] = −‖x‖22 + 2x · θ∗p −1 · θ∗p , if the relevance vectors θ are in {0, 1}n. Thus, the Lipschitz condition is satisfied. The global observable set is still of size n, with the n actions being any n score vectors, whose sorted orders place each of the n items, in turn, on top. βσ remains same as before, with argmaxx Eθ∼pr(x, θ) = Eθ∼p[θ] = θ∗p. Both PEGE and PEGE2 can achieve meaningful regret bound for this problem, while GCB cannot."
    }, {
      "heading" : "Acknowledgements",
      "text" : "We acknowledge the support of NSF via grants IIS 1452099 and CCF 1422157."
    } ],
    "references" : [ {
      "title" : "Combinatorial partial monitoring game with linear feedback and its applications",
      "author" : [ "Tian Lin", "Bruno Abrahao", "Robert Kleinberg", "John Lui", "Wei Chen" ],
      "venue" : "In Proceedings of the 31th International Conference on Machine Learning,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2014
    }, {
      "title" : "Discrete prediction games with arbitrary feedback and loss",
      "author" : [ "Antonio Piccolboni", "Christian Schindelhauer" ],
      "venue" : "In Proceedings of the 14th Annual Conference on Computational Learning Theory,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2001
    }, {
      "title" : "Regret minimization under partial monitoring",
      "author" : [ "Nicolo Cesa-Bianchi", "Gábor Lugosi", "Gilles Stoltz" ],
      "venue" : "Mathematics of Operations Research,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2006
    }, {
      "title" : "Partial monitoring–classification, regret bounds, and algorithms",
      "author" : [ "Gabor Bartok" ],
      "venue" : "Mathematics of Operations Research,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2014
    }, {
      "title" : "Regret lower bound and optimal algorithm in finite stochastic partial monitoring",
      "author" : [ "Junpei Komiyama", "Junya Honda", "Hiroshi Nakagawa" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2015
    }, {
      "title" : "Finite-time analysis of the multiarmed bandit problem",
      "author" : [ "Peter Auer", "Nicolo Cesa-Bianchi", "Paul Fischer" ],
      "venue" : "Machine Learning,",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2002
    }, {
      "title" : "Combinatorial multi-armed bandit: General framework and applications",
      "author" : [ "Wei Chen", "Yajun Wang", "Yang Yuan" ],
      "venue" : "In Proceedings of the 30th International Conference on Machine Learning,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2013
    }, {
      "title" : "Tight regret bounds for stochastic combinatorial semi-bandits",
      "author" : [ "Branislav Kveton", "Zheng Wen", "Azin Ashkan", "Csaba Szepesvari" ],
      "venue" : "In Proceedings of the Eighteenth International Conference on Artificial Intelligence and Statistics,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 2015
    }, {
      "title" : "Some aspects of the sequential design of experiments",
      "author" : [ "Herbert Robbins" ],
      "venue" : "In Herbert Robbins Selected Papers,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 1985
    }, {
      "title" : "Certainty equivalence control with forcing: revisited",
      "author" : [ "Rajeev Agrawal", "Demosthenis Teneketzis" ],
      "venue" : "Systems & Control Letters,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 1989
    }, {
      "title" : "Linearly parameterized bandits",
      "author" : [ "Paat Rusmevichientong", "John N Tsitsiklis" ],
      "venue" : "Mathematics of Operations Research,",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2010
    }, {
      "title" : "Online ranking with top-1 feedback",
      "author" : [ "Sougata Chaudhuri", "Ambuj Tewari" ],
      "venue" : "In Proceedings of the 18th International Conference on Artificial Intelligence and Statistics,",
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 2015
    }, {
      "title" : "A large-deviation inequality for vector-valued martingales",
      "author" : [ "Thomas P Hayes" ],
      "venue" : "Combinatorics, Probability and Computing,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2005
    } ],
    "referenceMentions" : [ {
      "referenceID" : 0,
      "context" : "Recently, a general model of combinatorial partial monitoring (CPM) games was proposed [1], where the learner’s action space can be exponentially large and adversary samples its moves from a bounded, continuous space, according to a fixed distribution.",
      "startOffset" : 87,
      "endOffset" : 90
    }, {
      "referenceID" : 1,
      "context" : "Starting with early work in the 2000s [2, 3], the study of finite PM games reached a culmination point with a comprehensive and complete classification [4].",
      "startOffset" : 38,
      "endOffset" : 44
    }, {
      "referenceID" : 2,
      "context" : "Starting with early work in the 2000s [2, 3], the study of finite PM games reached a culmination point with a comprehensive and complete classification [4].",
      "startOffset" : 38,
      "endOffset" : 44
    }, {
      "referenceID" : 3,
      "context" : "Starting with early work in the 2000s [2, 3], the study of finite PM games reached a culmination point with a comprehensive and complete classification [4].",
      "startOffset" : 152,
      "endOffset" : 155
    }, {
      "referenceID" : 4,
      "context" : "We refer the reader to these works for more references and also note that newer results continue to appear [5].",
      "startOffset" : 107,
      "endOffset" : 110
    }, {
      "referenceID" : 3,
      "context" : "The classification is governed by global and local observability properties pertaining to a game [4].",
      "startOffset" : 97,
      "endOffset" : 100
    }, {
      "referenceID" : 5,
      "context" : "Another line of work has extended traditional multi-armed bandit problem (MAB) [6] to include combinatorial action spaces for learner (CMAB) [7, 8].",
      "startOffset" : 79,
      "endOffset" : 82
    }, {
      "referenceID" : 6,
      "context" : "Another line of work has extended traditional multi-armed bandit problem (MAB) [6] to include combinatorial action spaces for learner (CMAB) [7, 8].",
      "startOffset" : 141,
      "endOffset" : 147
    }, {
      "referenceID" : 7,
      "context" : "Another line of work has extended traditional multi-armed bandit problem (MAB) [6] to include combinatorial action spaces for learner (CMAB) [7, 8].",
      "startOffset" : 141,
      "endOffset" : 147
    }, {
      "referenceID" : 0,
      "context" : "While finite PM and CMAB problems have witnessed a lot of activity, there is only one paper [1] on combinatorial partial monitoring (CPM) games, to the best of our knowledge.",
      "startOffset" : 92,
      "endOffset" : 95
    }, {
      "referenceID" : 5,
      "context" : "Inspired by the classic confidence bound algorithms for MABs, such as UCB [6], the authors proposed a Global Confidence Bound (GCB) algorithm that enjoyed two types of regret bound.",
      "startOffset" : 74,
      "endOffset" : 77
    }, {
      "referenceID" : 0,
      "context" : "We adopt the CPM model proposed earlier [1].",
      "startOffset" : 40,
      "endOffset" : 43
    }, {
      "referenceID" : 8,
      "context" : "This technique was already used in the classic paper of Robbins [9] and has also been called “forcing with certainty equivalence” in the control theory literature [10].",
      "startOffset" : 64,
      "endOffset" : 67
    }, {
      "referenceID" : 9,
      "context" : "This technique was already used in the classic paper of Robbins [9] and has also been called “forcing with certainty equivalence” in the control theory literature [10].",
      "startOffset" : 163,
      "endOffset" : 167
    }, {
      "referenceID" : 10,
      "context" : "We develop a Phased Exploration with Greedy Exploitation (PEGE) algorithmic framework (Section 3) borrowing the PEGE terminology from work on linearly parameterized bandits [11].",
      "startOffset" : 173,
      "endOffset" : 177
    }, {
      "referenceID" : 0,
      "context" : "Thus, though we have adopted the CPM model [1], our regret bounds are meaningful for countably infinite or even continuous learner’s action space, whereas GCB regret bound has an explicit logarithmic dependence on |X |.",
      "startOffset" : 43,
      "endOffset" : 46
    }, {
      "referenceID" : 11,
      "context" : "Finally, we discuss how our algorithms can be efficiently applied in the CPM problem of online ranking with feedback restricted to top ranked items (Section 6), a problem already considered [12] but analyzed in a non-stochastic setting.",
      "startOffset" : 190,
      "endOffset" : 194
    }, {
      "referenceID" : 1,
      "context" : "Then, with non-zero probability, the learner can suffer Ω(T ) regret and no learner strategy can guarantee a sub-linear in T regret (the intuition forms the base of the global observability condition in [2]).",
      "startOffset" : 203,
      "endOffset" : 206
    }, {
      "referenceID" : 9,
      "context" : ", earlier bounds [10] are asymptotic) whereas here we prove it in the CPM setting.",
      "startOffset" : 17,
      "endOffset" : 21
    }, {
      "referenceID" : 3,
      "context" : "For PM games that are globally observable but not locally observable, such a distribution independent O(T ) bound is known to be optimal [4].",
      "startOffset" : 137,
      "endOffset" : 140
    }, {
      "referenceID" : 0,
      "context" : "We provide a detailed comparison of our results with those obtained for GCB [1].",
      "startOffset" : 76,
      "endOffset" : 79
    }, {
      "referenceID" : 0,
      "context" : "Thus, though we have adopted the CPM model [1], our algorithms achieve meaningful regret bounds for countably infinite or even continuous learner’s action space.",
      "startOffset" : 43,
      "endOffset" : 46
    }, {
      "referenceID" : 11,
      "context" : "A recent paper studied the problem of online ranking with feedback restricted to top ranked items [12].",
      "startOffset" : 98,
      "endOffset" : 102
    } ],
    "year" : 2016,
    "abstractText" : "Partial monitoring games are repeated games where the learner receives feedback that might be different from adversary’s move or even the reward gained by the learner. Recently, a general model of combinatorial partial monitoring (CPM) games was proposed [1], where the learner’s action space can be exponentially large and adversary samples its moves from a bounded, continuous space, according to a fixed distribution. The paper gave a confidence bound based algorithm (GCB) that achieves O(T 2/3 log T ) distribution independent and O(log T ) distribution dependent regret bounds. The implementation of their algorithm depends on two separate offline oracles and the distribution dependent regret additionally requires existence of a unique optimal action for the learner. Adopting their CPM model, our first contribution is a Phased Exploration with Greedy Exploitation (PEGE) algorithmic framework for the problem. Different algorithms within the framework achieve O(T 2/3 √ log T ) distribution independent and O(log T ) distribution dependent regret respectively. Crucially, our framework needs only the simpler “argmax” oracle from GCB and the distribution dependent regret does not require existence of a unique optimal action. Our second contribution is another algorithm, PEGE2, which combines gap estimation with a PEGE algorithm, to achieve an O(log T ) regret bound, matching the GCB guarantee but removing the dependence on size of the learner’s action space. However, like GCB, PEGE2 requires access to both offline oracles and the existence of a unique optimal action. Finally, we discuss how our algorithm can be efficiently applied to a CPM problem of practical interest: namely, online ranking with feedback at the top.",
    "creator" : null
  }
}