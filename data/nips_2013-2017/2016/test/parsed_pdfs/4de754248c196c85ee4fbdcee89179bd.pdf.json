{
  "name" : "4de754248c196c85ee4fbdcee89179bd.pdf",
  "metadata" : {
    "source" : "META",
    "title" : "SDP Relaxation with Randomized Rounding for Energy Disaggregation",
    "authors" : [ "Kiarash Shaloudegi", "András György", "Wilsun Xu" ],
    "emails" : [ "k.shaloudegi16@imperial.ac.uk", "a.gyorgy@imperial.ac.uk", "szepesva@ualberta.ca", "wxu@ualberta.ca" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "Energy efficiency is becoming one of the most important issues in our society. Identifying the energy consumption of individual electrical appliances in homes can raise awareness of power consumption and lead to significant saving in utility bills. Detailed feedback about the power consumption of individual appliances helps energy consumers to identify potential areas for energy savings, and increases their willingness to invest in more efficient products. Notifying home owners of accidentally running stoves, ovens, etc., may not only result in savings but also improves safety. Energy disaggregation or non-intrusive load monitoring (NILM) uses data from utility smart meters to separate individual load consumptions (i.e., a load signal) from the total measured power (i.e., the mixture of the signals) in households.\nThe bulk of the research in NILM has mostly concentrated on applying different data mining and pattern recognition methods to track the footprint of each appliance in total power measurements. Several techniques, such as artificial neural networks (ANN) [Prudenzi, 2002, Chang et al., 2012, Liang et al., 2010], deep neural networks [Kelly and Knottenbelt, 2015], k-nearest neighbor (k-NN) [Figueiredo et al., 2012, Weiss et al., 2012], sparse coding [Kolter et al., 2010], or ad-hoc heuristic methods [Dong et al., 2012] have been employed. Recent works, rather than turning electrical events into features fed into classifiers, consider the temporal structure of the data[Zia et al., 2011, Kolter and Jaakkola, 2012, Kim et al., 2011, Zhong et al., 2014, Egarter et al., 2015, Guo et al., 2015], resulting in state-of-the-art performance [Kolter and Jaakkola, 2012]. These works usually model the individual appliances by independent hidden Markov models (HMMs), which leads to a factorial HMM (FHMM) model describing the total consumption.\n30th Conference on Neural Information Processing Systems (NIPS 2016), Barcelona, Spain.\nFHMMs, introduced by Ghahramani and Jordan [1997], are powerful tools for modeling times series generated from multiple independent sources, and are great for modeling speech with multiple people simultaneously talking [Rennie et al., 2009], or energy monitoring which we consider here [Kim et al., 2011]. Doing exact inference in FHMMs is NP hard; therefore, computationally efficient approximate methods have been the subject of study. Classic approaches include sampling methods, such as MCMC or particle filtering [Koller and Friedman, 2009] and variational Bayes methods [Wainwright and Jordan, 2007, Ghahramani and Jordan, 1997]. In practice, both methods are nontrivial to make work and we are not aware of any works that would have demonstrated good results in our application domain with the type of FHMMs we need to work and at practical scales.\nIn this paper we follow the work of Kolter and Jaakkola [2012] to model the NILM problem by FHMMs. The distinguishing features of FHMMs in this setting are that (i) the output is the sum of the output of the underlying HMMs (perhaps with some noise), and (ii) the number of transitions are small in comparison to the signal length. FHMMs with the first property are called additive. In this paper we derive an efficient, convex relaxation based method for FHMMs of the above type, which significantly outperforms the state-of-the-art algorithms. Our approach is based on revisiting relaxations to the integer programming formulation of Kolter and Jaakkola [2012]. In particular, we replace the quadratic programming relaxation of Kolter and Jaakkola, 2012 with a relaxation to an semi-definite program (SDP), which, based on the literature of relaxations is expected to be tighter and thus better. While SDPs are convex and could in theory be solved using interior-point (IP) methods in polynomial time [Malick et al., 2009], IP scales poorly with the size of the problem and is thus unsuitable to our large scale problem which may involve as many a million variables. To address this problem, capitalizing on the structure of our relaxation coming from our FHMM model, we develop a novel variant of ADMM [Boyd et al., 2011] that uses Moreau-Yosida regularization and combine it with a version of randomized rounding that is inspired by the the recent work of Park and Boyd [2015]. Experiments on synthetic and real data confirm that our method significantly outperforms other algorithms from the literature, and we expect that it may find its applications in other FHMM inference problems, too."
    }, {
      "heading" : "1.1 Notation",
      "text" : "Throughout the paper, we use the following notation: R denotes the set of real numbers, Sn+ denotes the set of n ⇥ n positive semidefinite matrices, I{E} denotes the indicator function of an event E (that is, it is 1 if the event is true and zero otherwise), 1 denotes a vector of appropriate dimension whose entries are all 1. For an integer K, [K] denotes the set {1, 2, . . . ,K}. N (µ,⌃) denotes the Gaussian distribution with mean µ and covariance matrix ⌃. For a matrix A, trace(A) denotes its trace and diag(A) denotes the vector formed by the diagonal entries of A."
    }, {
      "heading" : "2 System Model",
      "text" : "Following Kolter and Jaakkola [2012], the energy usage of the household is modeled using an additive factorial HMM [Ghahramani and Jordan, 1997]. Suppose there are M appliances in a household. Each of them is modeled via an HMM: let P\ni 2 RKi⇥Ki denote the transition-probability matrix of appliance i 2 [M ], and assume that for each state s 2 [K\ni ], the energy consumption of the appliance is constant µ\ni,s (µ i denotes the corresponding K i -dimensional column vector (µ i,1, . . . , µi,Ki) >). Denoting by x\nt,i 2 {0, 1}Ki the indicator vector of the state s t,i of appliance i at time t (i.e., x\nt,i,s = I{st,i=s}), the total power consumption at time t is P i2[M ] µ > i x t,i\n, which we assume is observed with some additive zero mean Gaussian noise of variance 2: y\nt\n⇠ N ( P\ni2[M ] µ > i x t,i , 2 ).1\nGiven this model, the maximum likelihood estimate of the appliance state vector sequence can be obtained by minimizing the log-posterior function\nargmin\nxt,i\nTX\nt=1\n(y\nt\nP\nM i=1 x > t,i µ i ) 2\n2\n2\nT 1X\nt=1\nMX\ni=1\nx > t,i (logP i )x t+1,i\nsubject to x t,i 2 {0, 1}Ki , 1>x t,i = 1, i 2 [M ] and t 2 [T ],\n(1)\n1Alternatively, we can assume that the power consumption yt,iof each appliance is normally distributed with mean µ>i xt,i and variance 2i , where 2 = P i2[M ] 2 i , and yt = P i2[M ] yt,i.\nwhere logP i denotes a matrix obtained from P i by taking the logarithm of each entry.\nIn our particular application, in addition to the signal’s temporal structure, large changes in total power (in comparison to signal noise) contain valuable information that can be used to further improve the inference results (in fact, solely this information was used for energy disaggregation, e.g., by Dong et al., 2012, 2013, Figueiredo et al., 2012). This observation was used by Kolter and Jaakkola [2012] to amend the posterior with a term that tries to match the large signal changes to the possible changes in the power level when only the state of a single appliance changes.\nFormally, let y t = y t+1 yt, µ(i) m,k = µ i,k µ i,m , and define the matrices E t,i 2 RKi⇥Ki\nby (E t,i ) m,k = ( y t\nµ(i) m,k ) 2 /(2 2 diff), for some constant diff > 0. Intuitively, (Et,i)m,k is\nthe negative log-likelihood (up to a constant) of observing a change y t in the power level when appliance i transitions from state m to state k under some zero-mean Gaussian noise with variance\n2 diff. Making the heuristic approximation that the observation noise and this noise are independent (which clearly does not hold under the previous model), Kolter and Jaakkola [2012] added the term ( P T 1 t=1 P M i=1 x > t,i E t,i x t+1,i) to the objective of (1), arriving at\nargmin\nxt,i\nf(x1, . . . , xT ) :=\nTX\nt=1\n(y\nt\nP\nM i=1 x > t,i µ i ) 2\n2\n2\nT 1X\nt=1\nMX\ni=1\nx > t,i (E t,i + logP i )x t+1,i\nsubject to x t,i 2 {0, 1}Ki , 1>x t,i = 1, i 2 [M ] and t 2 [T ] .\n(2)\nIn the rest of the paper we derive an efficient approximate solution to (2), and demonstrate that it is superior to the approximate solution derived by Kolter and Jaakkola [2012] with respect to several measures quantifying the accuracy of load disaggregation solutions."
    }, {
      "heading" : "3 SDP Relaxation and Randomized Rounding",
      "text" : "There are two major challenges to solve the optimization problem (2) exactly: (i) the optimization is over binary vectors x\nt,i ; and (ii) the objective function f , even when considering its extension to a convex domain, is in general non-convex (due to the second term). As a remedy we will relax (2) to make it an integer quadratic programming problem, then apply an SDP relaxation and randomized rounding to solve approximately the relaxed problem. We start with reviewing the latter methods."
    }, {
      "heading" : "3.1 Approximate Solutions for Integer Quadratic Programming",
      "text" : "In this section we consider approximate solutions to the integer quadratic programming problem\nminimize f(x) = x>Dx+ 2d>x subject to x 2 {0, 1}n,\n(3)\nwhere D 2 Sn+ is positive semidefinite, and d 2 Rn. While an exact solution of (3) can be found by enumerating all possible combination of binary values within a properly chosen box or ellipsoid, the running time of such exact methods is nearly exponential in the number n of binary variables, making these methods unfit for large scale problems.\nOne way to avoid exponential running times is to replace (3) with a convex problem with the hope that the solutions of the convex problems can serve as a good starting point to find high-quality solutions to (3). The standard approach to this is to linearize (3) by introducing a new variable X 2 Sn+ tied to x trough X = xx>, so that x>Dx = trace(DX), and then relax the nonconvex constraints X = xx\n>, x 2 {0, 1}n to X ⌫ xx>, diag(X) = x, x 2 [0, 1]n. This leads to the relaxed SDP problem\nminimize trace(D>X) + 2d>x subject to  1 x >\nx X\n⌫ 0, diag(X) = x, x 2 [0, 1]n\n(4)\nBy introducing ˆX =  1 x >\nx X\nthis can be written in the compact SDP form\nminimize trace( ˆD> ˆX) subject to ˆX ⌫ 0, A ˆX = b .\n(5)\nwhere ˆD =  0 d >\nd D\n2 Sn+1+ , b 2 Rm and A : Sn+ ! Rm is an appropriate linear operator. This\ngeneral SDP optimization problem can be solved with arbitrary precision in polynomial time using interior-point methods [Malick et al., 2009, Wen et al., 2010]. As discussed before, this approach becomes impractical in terms of both the running time and the required memory if either the number of variables or the optimization constraints are large [Wen et al., 2010]. We will return to the issue of building scaleable solvers for NILM in Section 5.\nNote that introducing the new variable X , the problem is projected into a higher dimensional space, which is computationally more challenging than just simply relaxing the integrality constraint in (3), but leads to a tighter approximation of the optimum (c.f., Park and Boyd, 2015; see also Lovász and Schrijver, 1991, Burer and Vandenbussche, 2006).\nTo obtain a feasible point of (3) from the solution of (5), we still need to change the solution x to a binary vector. This can be done via randomized rounding [Park and Boyd, 2015, Goemans and Williamson, 1995]: Instead of letting x 2 [0, 1]n, the integrality constraint x 2 {0, 1}n in (3) can be replaced by the inequalities x\ni\n(x\ni 1) 0 for all i 2 [n]. Although these constraints are nonconvex, they admit an interesting probabilistic interpretation: the optimization problem\nminimize E w⇠N (µ,⌃)[w\n> Dw + 2d > w]\nsubject to E w⇠N (µ,⌃)[wi(wi 1)] 0, i 2 [n], µ 2 Rn, ⌃ ⌫ 0\nis equivalent to\nminimize trace((⌃+ µµ>)D) + 2d>µ subject to ⌃\ni,i\n+ µ 2 i µ i\n0, i 2 [n], (6)\nwhich is in the form of (4) with X = ⌃ + µµ> and x = µ (above, E x⇠P [f(x)] stands forR\nf(x)dP (x)). This leads to the rounding procedure: starting from a solution (x⇤, X⇤) of (4), we randomly draw several samples w(j) from N (x⇤, X⇤ x⇤x⇤>), round w(j)\ni to 0 or 1 to obtain x\n(j), and keep the x(j) with the smallest objective value. In a series of experiments, Park and Boyd [2015] found this procedure to be better than just naively rounding the coordinates of x⇤."
    }, {
      "heading" : "4 An Efficient Algorithm for Inference in FHMMs",
      "text" : "To arrive at our method we apply the results of the previous subsection to (2). To do so, as mentioned at the beginning of the section, we need to change the problem to a convex one, since the elements of the second term in the objective of (2), x>\nt,i\n(E\nt,i\n+ logP\ni\n)x t+1,i are not convex. To address this issue, we relax the problem by introducing new variables Z\nt,i\n= x\nt,i\nx > t+1,i and replace the constraint\nZ\nt,i\n= x\nt,i\nx > t+1,i with two new ones:\nZ\nt,i 1 = x t,i and Z> t,i 1 = x t+1,i.\nTo simplify the presentation, we will assume that K i = K for all i 2 [M ]. Then problem (2) becomes\nargmin\nxt,i\nTX\nt=1\n⇢ 1\n2\n2\ny\nt x> t µ 2 p> t z t\nsubject to x t 2 {0, 1}MK , t 2 [T ], ẑ\nt 2 {0, 1}MKK , t 2 [T 1], 1>x\nt,i = 1, t 2 [T ] and i 2 [M ], Z\nt,i 1> = x t,i , Z > t,i 1> = x t+1,i , t 2 [T 1] and i 2 [M ],\n(7)\nAlgorithm 1 ADMM-RR: Randomized rounding algorithm for suboptimal solution to (2) Given: number of iterations: itermax, length of input data: T Solve the optimization problem (8): Run Algorithm 2 to get X⇤t and z⇤t Set xbestt := z⇤t and Xbestt := X⇤t for t = 1, . . . , T for t = 2, . . . , T 1 do\nSet x := [xbestt 1 > , x best t > , x best t+1 > ]> Set X := block(Xbestt 1 , Xbestt , Xbestt+1 ) where block(·, ·) constructs block diagonal matrix from input arguments Set f best := 1 Form the covariance matrix ⌃ := X xxT and find its Cholesky factorization LL> = ⌃. for k = 1, 2, . . . , itermax do\nRandom sampling: zk := x+ Lw, where w ⇠ N (0, I) Round zk to the nearest integer point xk that satisfies the constraints of (7) If f best > ft(xk) then update xbestt and Xbestt from the corresponding entries of xk and xkxk\n>, respectively\nend for end for\nwhere x> t = [x > t,1, . . . , x > t,M ], µ> = [µ>1 , . . . , µ> M ], z> t = [vec(Z t,1) > , . . . , vec(Z t,M ) > ] and\np > t = [vec(E t,1 + logP1), . . . , vec(logPT )], with vec(A) denoting the column vector obtained by concatenating the columns of A for a matrix A. Expanding the first term of (7) and following the relaxation method of Section 3.1, we get the following SDP problem:2\narg min\nXt,zt\nTX\nt=1\ntrace(D> t X t ) + d > t z t\nsubject to AX t = b, BX t + Cz t + EX t+1 = g,\nX\nt ⌫ 0, X t , z t 0 .\n(8)\nHere A : SMK+1+ ! Rm, B, E : SMK+1+ ! Rm 0 and C 2 RMKK⇥m0 are all appropriate linear operators, and the integers m and m0 are determined by the number of equality constraints, while\nD\nt\n= 1 2 2\n 0 y\nt\nµ\n>\ny t µ µµ\n>\nand d\nt\n= p\nt\n. Notice that (8) is a simple, though huge-dimensional SDP\nproblem in the form of (5) where ˆD has a special block structure.\nNext we apply the randomized rounding method from Section 3.1 to provide an approximate solution to our original problem (2). Starting from an optimal solution (z⇤, X⇤) of (8) , and utilizing that we have an SDP problem for each time step t, we obtain Algorithm 1 that performs the rounding sequentially for t = 1, 2, . . . , T . However we run the randomized method for three consecutive time steps, since X\nt appears at both time steps t 1 and t + 1 in addition to time t (cf., equation 9). Following Park and Boyd [2015], in the experiments we introduce a simple greedy search within Algorithm 1: after finding the initial point xk, we greedily try to objective the target value by change the status of a single appliance at a single time instant. The search stops when no such improvement is possible, and we use the resulting point as the estimate."
    }, {
      "heading" : "5 ADMM Solver for Large-Scale, Sparse Block-Structured SDP Problems",
      "text" : "Given the relaxation and randomized rounding presented in the previous subsection all that remains is to find X⇤\nt\n, z ⇤ t to initialize Algorithm 1. Although interior point methods can solve SDP problems efficiently, even for problems with sparse constraints as (4), the running time to obtain an ✏ optimal solution is of the order of n3.5 log(1/✏) [Nesterov, 2004, Section 4.3.3], which becomes prohibitive in our case since the number of variables scales linearly with the time horizon T .\nAs an alternative solution, first-order methods can be used for large scale problems [Wen et al., 2010]. Since our problem (8) is an SDP problem where the objective function is separable, ADMM is a promising candidate to find a near-optimal solution. To apply ADMM, we use the Moreau-Yosida quadratic regularization [Malick et al., 2009], which is well suited for the primal formulation we\n2The only modification is that we need to keep the equality constraints in (7) that are missing from (3).\nAlgorithm 2 ADMM for sparse SDPs of the form (8) Given: length of input data: T , number of iterations: itermax. Set the initial values to zero. W 0t , P 0t , S0 = 0, 0t = 0, ⌫0t = 0, and r0t , h0t = 0 Set µ = 0.001 {Default step-size value} for k = 0, 1, . . . , itermax do\nfor t = 1, 2, . . . , T do Update P kt , W kt , k, Skt , rkt , hkt , and ⌫kt , respectively, according to (11) (Appendix A).\nend for end for\nconsider. When implementing ADMM over the variables (X t , z t ) t , the sparse structure of our constraints allows to consider the SDP problems for each time step t sequentially:\narg min\nXt,zt\ntrace(D> t X t ) + d > t z t\nsubject to AX t = b,\nBX t + Cz t + EX t+1 = g,\nBX t 1 + Czt 1 + EXt = g,\nX\nt ⌫ 0, X t , z t 0 .\n(9)\nThe regularized Lagrangian function for (9) is3\nL µ =trace(D>X) + d>z + 1 2µ kX Sk2 F + 1 2µ kz rk22 + >(b AX)\n+ ⌫ > (g BX Cz EX+) + ⌫> (g BX Cz EX)\ntrace(W>X) trace(P>X) h>z,\n(10)\nwhere , ⌫, W 0, P ⌫ 0, and h 0 are dual variables, and µ > 0 is a constant. By taking the derivatives of L\nµ and computing the optimal values of X and z, one can derive the standard ADMM updates, which, due to space constraints, are given in Appendix A. The final algorithm, which updates the variables for each t sequentially, is given by Algorithm 2.\nAlgorithms 1 and 2 together give an efficient algorithm for finding an approximate solution to (2) and thus also to the inference problem of additive FHMMs."
    }, {
      "heading" : "6 Learning the Model",
      "text" : "The previous section provided an algorithm to solve the inference part of our energy disaggregation problem. However, to be able to run the inference method, we need to set up the model. To learn the HMMs describing each appliance, we use the method of Kontorovich et al. [2013] to learn the transition matrix, and the spectral learning method of Anandkumar et al. [2012] (following Mattfeld, 2014) to determine the emission parameters.\nHowever, when it comes to the specific application of NILM, the problem of unknown, time-varying bias also needs to be addressed, which appears due to the presence of unknown/unmodeled appliances in the measured signal. A simple idea, which is also followed by Kolter and Jaakkola [2012], is to use a “generic model” whose contribution to the objective function is downweighted. Surprisingly, incorporating this idea in the FHMM inference creates some unexpected challenges.4\nTherefore, in this work we come up with a practical, heuristic solution tailored to NILM. First we identify all electric events defined by a large change y\nt in the power usage (using some ad-hoc threshold). Then we discard all events that are similar to any possible level change µ(i)\nm,k . The remaining large jumps are regarded as coming from a generic HMM model describing the unregistered appliances: they are clustered into K 1 clusters, and an HMM model is built where each cluster is regarded as power usage coming from a single state of the unregistered appliances. We also allow an “off state” with power usage 0.\n3We drop the subscript t and replace t+ 1 and t 1 with + and signs, respectively. 4For example, the incorporation of this generic model breaks the derivation of the algorithm of Kolter and\nJaakkola [2012]. See Appendix B for a discussion of this."
    }, {
      "heading" : "7 Experimental Results",
      "text" : "We evaluate the performance of our algorithm in two setups:5 we use a synthetic dataset to test the inference method in a controlled environment, while we used the REDD dataset of Kolter and Johnson [2011] to see how the method performs on non-simulated, “real” data. The performance of our algorithm is compared to the structured variational inference (SVI) method of Ghahramani and Jordan [1997], the method of Kolter and Jaakkola [2012] and that of Zhong et al. [2014]; we shall refer to the last two algorithms as KJ and ZGS, respectively."
    }, {
      "heading" : "7.1 Experimental Results: Synthetic Data",
      "text" : "The synthetic dataset was generated randomly (the exact procedure is described in Appendix C). To evaluate the performance, we use normalized disaggregation error as suggested by Kolter and Jaakkola [2012] and also adopted by Zhong et al. [2014]. This measures the reconstruction error for each individual appliance. Given the true output y\nt,i and the estimated output ŷ t,i (i.e. ŷ t,i = µ > i x̂ t,i ), the error measure is defined as\nNDE = qP\nt,i\n(y\nt,i ŷ t,i )\n2 / P t,i (y t,i ) 2 .\nFigures 1 and 2 show the performance of the algorithms as the number HMMs (M ) (resp., number of states, K) is varied. Each plot is a report for T = 1000 steps averaged over 100 random models and realizations, showing the mean and standard deviation of NDE. Our method, shown under the label ADMM-RR, runs ADMM for 2500 iterations, runs the local search at the end of each 250 iterations, and chooses the result that has the maximum likelihood. ADMM is the algorithm which applies naive rounding. It can be observed that the variational inference method is significantly outperformed by all other methods, while our algorithm consistently obtained better results than its competitors, KJ coming second and ZGS third."
    }, {
      "heading" : "7.2 Experimental Results: Real Data",
      "text" : "In this section, we also compared the 3 best methods on the real dataset REDD [Kolter and Johnson, 2011]. We use the first half of the data for training and the second half for testing. Each HMM (i.e.,\n5Our code is available online at https://github.com/kiarashshaloudegi/FHMM_inference.\nappliance) is trained separately using the associated circuit level data, and the HMM corresponding to unregistered appliances is trained using the main panel data. In this set of experiments we monitor appliances consuming more than 100 watts. ADMM-RR is run for 1000 iterations, and the local search is run at the end of each 250 iterations, and the result with the largest likelihood is chosen. To be able to use the ZGS method on this data, we need to have some prior information about the usage of each appliance; the authors suggestion is to us national energy surveys, but in the lack of this information (also about the number of residents, type of houses, etc.) we used the training data to extract this prior knowledge, which is expected to help this method.\nDetailed results about the precision and recall of estimating which appliances are ‘on’ at any given time are given in Table 1. In Appendix D we also report the error of the total power usage assigned to different appliances (Table 2), as well as the amount of assigned power to each appliance as a percentage of total power (Figure 3). As a summary, we can see that our method consistently outperformed the others, achieving an average precision and recall of 60.97% and 78.56%, with about 50% better precision than KJ with essentially the same recall (38.68/75.02%), while significantly improving upon ZGS (17.97/36.22%). Considering the error in assigning the power consumption to different appliances, our method achieved about 30 35% smaller error (ADMM-RR: 2.87%, KJ: 4.44%, ZGS: 3.94%) than its competitors.\nIn our real-data experiments, there are about 1 million decision variables: M = 7 or 6 appliances (for phase A and B power, respectively) with K = 4 states each and for about T = 30, 000 time steps for one day, 1 sample every 6 seconds. KJ and ZGS solve quadratic programs, increasing their memory usage (14GB vs 6GB in our case). On the other hand, our implementation of their method, using the commercial solver MOSEK inside the Matlab-based YALMIP [Löfberg, 2004], runs in 5 minutes, while our algorithm, which is purely Matlab-based takes 5 hours to finish. We expect that an optimized C++ version of our method could achieve a significant speed-up compared to our current implementation."
    }, {
      "heading" : "8 Conclusion",
      "text" : "FHMMs are widely used in energy disaggregation. However, the resulting model has a huge (factored) state space, making standard inference FHMM algorithms infeasible even for only a handful of appliances. In this paper we developed a scalable approximate inference algorithm, based on a semidefinite relaxation combined with randomized rounding, which significantly outperformed the state of the art in our experiments. A crucial component of our solution is a scalable ADMM method that utilizes the special block-diagonal-like structure of the SDP relaxation and provides a good initialization for randomized rounding. We expect that our method may prove useful in solving other FHMM inference problems, as well as in large scale integer quadratic programming."
    }, {
      "heading" : "Acknowledgements",
      "text" : "This work was supported in part by the Alberta Innovates Technology Futures through the Alberta Ingenuity Centre for Machine Learning and by NSERC. K. is indebted to Pooria Joulani and Mohammad Ajallooeian, whom provided much useful technical advise, while all authors are grateful for Zico Kolter for sharing his code."
    } ],
    "references" : [ {
      "title" : "Non-Intrusive Signature Extraction for Major Residential Loads",
      "author" : [ "M. Dong", "Meira", "W. Xu", "C.Y. Chung" ],
      "venue" : "Smart Meters. IEEE Transactions on Smart Grid,",
      "citeRegEx" : "Dong et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Dong et al\\.",
      "year" : 2012
    }, {
      "title" : "PALDi: Online Load Disaggregation via Particle Filtering",
      "author" : [ "D. Egarter", "V.P. Bhuvana", "W. Elmenreich" ],
      "venue" : "IEEE Transactions on Smart Grid,",
      "citeRegEx" : "Egarter et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Egarter et al\\.",
      "year" : 2013
    }, {
      "title" : "Factorial Hidden Markov Models",
      "author" : [ "Z. Ghahramani", "M. Jordan" ],
      "venue" : "Monitoring (NILM) Systems. Neurocomputing,",
      "citeRegEx" : "Ghahramani and Jordan.,? \\Q2012\\E",
      "shortCiteRegEx" : "Ghahramani and Jordan.",
      "year" : 2012
    }, {
      "title" : "Implementing spectral methods for hidden Markov models with real-valued emissions",
      "author" : [ "C. Mattfeld" ],
      "venue" : "Journal on Optimization,",
      "citeRegEx" : "Mattfeld.,? \\Q2009\\E",
      "shortCiteRegEx" : "Mattfeld.",
      "year" : 2009
    }, {
      "title" : "Leveraging smart meter data to recognize home appliances",
      "author" : [ "M. Weiss", "A. Helfenstein", "F. Mattern", "T. Staake" ],
      "venue" : null,
      "citeRegEx" : "Weiss et al\\.,? \\Q2007\\E",
      "shortCiteRegEx" : "Weiss et al\\.",
      "year" : 2007
    } ],
    "referenceMentions" : [ {
      "referenceID" : 0,
      "context" : ", 2010], or ad-hoc heuristic methods [Dong et al., 2012] have been employed.",
      "startOffset" : 37,
      "endOffset" : 56
    }, {
      "referenceID" : 2,
      "context" : "FHMMs, introduced by Ghahramani and Jordan [1997], are powerful tools for modeling times series generated from multiple independent sources, and are great for modeling speech with multiple people simultaneously talking [Rennie et al.",
      "startOffset" : 21,
      "endOffset" : 50
    }, {
      "referenceID" : 2,
      "context" : "FHMMs, introduced by Ghahramani and Jordan [1997], are powerful tools for modeling times series generated from multiple independent sources, and are great for modeling speech with multiple people simultaneously talking [Rennie et al., 2009], or energy monitoring which we consider here [Kim et al., 2011]. Doing exact inference in FHMMs is NP hard; therefore, computationally efficient approximate methods have been the subject of study. Classic approaches include sampling methods, such as MCMC or particle filtering [Koller and Friedman, 2009] and variational Bayes methods [Wainwright and Jordan, 2007, Ghahramani and Jordan, 1997]. In practice, both methods are nontrivial to make work and we are not aware of any works that would have demonstrated good results in our application domain with the type of FHMMs we need to work and at practical scales. In this paper we follow the work of Kolter and Jaakkola [2012] to model the NILM problem by FHMMs.",
      "startOffset" : 21,
      "endOffset" : 919
    }, {
      "referenceID" : 2,
      "context" : "FHMMs, introduced by Ghahramani and Jordan [1997], are powerful tools for modeling times series generated from multiple independent sources, and are great for modeling speech with multiple people simultaneously talking [Rennie et al., 2009], or energy monitoring which we consider here [Kim et al., 2011]. Doing exact inference in FHMMs is NP hard; therefore, computationally efficient approximate methods have been the subject of study. Classic approaches include sampling methods, such as MCMC or particle filtering [Koller and Friedman, 2009] and variational Bayes methods [Wainwright and Jordan, 2007, Ghahramani and Jordan, 1997]. In practice, both methods are nontrivial to make work and we are not aware of any works that would have demonstrated good results in our application domain with the type of FHMMs we need to work and at practical scales. In this paper we follow the work of Kolter and Jaakkola [2012] to model the NILM problem by FHMMs. The distinguishing features of FHMMs in this setting are that (i) the output is the sum of the output of the underlying HMMs (perhaps with some noise), and (ii) the number of transitions are small in comparison to the signal length. FHMMs with the first property are called additive. In this paper we derive an efficient, convex relaxation based method for FHMMs of the above type, which significantly outperforms the state-of-the-art algorithms. Our approach is based on revisiting relaxations to the integer programming formulation of Kolter and Jaakkola [2012]. In particular, we replace the quadratic programming relaxation of Kolter and Jaakkola, 2012 with a relaxation to an semi-definite program (SDP), which, based on the literature of relaxations is expected to be tighter and thus better.",
      "startOffset" : 21,
      "endOffset" : 1519
    }, {
      "referenceID" : 2,
      "context" : "FHMMs, introduced by Ghahramani and Jordan [1997], are powerful tools for modeling times series generated from multiple independent sources, and are great for modeling speech with multiple people simultaneously talking [Rennie et al., 2009], or energy monitoring which we consider here [Kim et al., 2011]. Doing exact inference in FHMMs is NP hard; therefore, computationally efficient approximate methods have been the subject of study. Classic approaches include sampling methods, such as MCMC or particle filtering [Koller and Friedman, 2009] and variational Bayes methods [Wainwright and Jordan, 2007, Ghahramani and Jordan, 1997]. In practice, both methods are nontrivial to make work and we are not aware of any works that would have demonstrated good results in our application domain with the type of FHMMs we need to work and at practical scales. In this paper we follow the work of Kolter and Jaakkola [2012] to model the NILM problem by FHMMs. The distinguishing features of FHMMs in this setting are that (i) the output is the sum of the output of the underlying HMMs (perhaps with some noise), and (ii) the number of transitions are small in comparison to the signal length. FHMMs with the first property are called additive. In this paper we derive an efficient, convex relaxation based method for FHMMs of the above type, which significantly outperforms the state-of-the-art algorithms. Our approach is based on revisiting relaxations to the integer programming formulation of Kolter and Jaakkola [2012]. In particular, we replace the quadratic programming relaxation of Kolter and Jaakkola, 2012 with a relaxation to an semi-definite program (SDP), which, based on the literature of relaxations is expected to be tighter and thus better. While SDPs are convex and could in theory be solved using interior-point (IP) methods in polynomial time [Malick et al., 2009], IP scales poorly with the size of the problem and is thus unsuitable to our large scale problem which may involve as many a million variables. To address this problem, capitalizing on the structure of our relaxation coming from our FHMM model, we develop a novel variant of ADMM [Boyd et al., 2011] that uses Moreau-Yosida regularization and combine it with a version of randomized rounding that is inspired by the the recent work of Park and Boyd [2015]. Experiments on synthetic and real data confirm that our method significantly outperforms other algorithms from the literature, and we expect that it may find its applications in other FHMM inference problems, too.",
      "startOffset" : 21,
      "endOffset" : 2337
    }, {
      "referenceID" : 2,
      "context" : "FHMMs, introduced by Ghahramani and Jordan [1997], are powerful tools for modeling times series generated from multiple independent sources, and are great for modeling speech with multiple people simultaneously talking [Rennie et al., 2009], or energy monitoring which we consider here [Kim et al., 2011]. Doing exact inference in FHMMs is NP hard; therefore, computationally efficient approximate methods have been the subject of study. Classic approaches include sampling methods, such as MCMC or particle filtering [Koller and Friedman, 2009] and variational Bayes methods [Wainwright and Jordan, 2007, Ghahramani and Jordan, 1997]. In practice, both methods are nontrivial to make work and we are not aware of any works that would have demonstrated good results in our application domain with the type of FHMMs we need to work and at practical scales. In this paper we follow the work of Kolter and Jaakkola [2012] to model the NILM problem by FHMMs. The distinguishing features of FHMMs in this setting are that (i) the output is the sum of the output of the underlying HMMs (perhaps with some noise), and (ii) the number of transitions are small in comparison to the signal length. FHMMs with the first property are called additive. In this paper we derive an efficient, convex relaxation based method for FHMMs of the above type, which significantly outperforms the state-of-the-art algorithms. Our approach is based on revisiting relaxations to the integer programming formulation of Kolter and Jaakkola [2012]. In particular, we replace the quadratic programming relaxation of Kolter and Jaakkola, 2012 with a relaxation to an semi-definite program (SDP), which, based on the literature of relaxations is expected to be tighter and thus better. While SDPs are convex and could in theory be solved using interior-point (IP) methods in polynomial time [Malick et al., 2009], IP scales poorly with the size of the problem and is thus unsuitable to our large scale problem which may involve as many a million variables. To address this problem, capitalizing on the structure of our relaxation coming from our FHMM model, we develop a novel variant of ADMM [Boyd et al., 2011] that uses Moreau-Yosida regularization and combine it with a version of randomized rounding that is inspired by the the recent work of Park and Boyd [2015]. Experiments on synthetic and real data confirm that our method significantly outperforms other algorithms from the literature, and we expect that it may find its applications in other FHMM inference problems, too. 1.1 Notation Throughout the paper, we use the following notation: R denotes the set of real numbers, S+ denotes the set of n ⇥ n positive semidefinite matrices, I{E} denotes the indicator function of an event E (that is, it is 1 if the event is true and zero otherwise), 1 denotes a vector of appropriate dimension whose entries are all 1. For an integer K, [K] denotes the set {1, 2, . . . ,K}. N (μ,⌃) denotes the Gaussian distribution with mean μ and covariance matrix ⌃. For a matrix A, trace(A) denotes its trace and diag(A) denotes the vector formed by the diagonal entries of A. 2 System Model Following Kolter and Jaakkola [2012], the energy usage of the household is modeled using an additive factorial HMM [Ghahramani and Jordan, 1997].",
      "startOffset" : 21,
      "endOffset" : 3190
    }, {
      "referenceID" : 0,
      "context" : ", by Dong et al., 2012, 2013, Figueiredo et al., 2012). This observation was used by Kolter and Jaakkola [2012] to amend the posterior with a term that tries to match the large signal changes to the possible changes in the power level when only the state of a single appliance changes.",
      "startOffset" : 5,
      "endOffset" : 112
    }, {
      "referenceID" : 3,
      "context" : "[2012] (following Mattfeld, 2014) to determine the emission parameters. However, when it comes to the specific application of NILM, the problem of unknown, time-varying bias also needs to be addressed, which appears due to the presence of unknown/unmodeled appliances in the measured signal. A simple idea, which is also followed by Kolter and Jaakkola [2012], is to use a “generic model” whose contribution to the objective function is downweighted.",
      "startOffset" : 18,
      "endOffset" : 360
    }, {
      "referenceID" : 2,
      "context" : "The performance of our algorithm is compared to the structured variational inference (SVI) method of Ghahramani and Jordan [1997], the method of Kolter and Jaakkola [2012] and that of Zhong et al.",
      "startOffset" : 101,
      "endOffset" : 130
    }, {
      "referenceID" : 2,
      "context" : "The performance of our algorithm is compared to the structured variational inference (SVI) method of Ghahramani and Jordan [1997], the method of Kolter and Jaakkola [2012] and that of Zhong et al.",
      "startOffset" : 101,
      "endOffset" : 172
    }, {
      "referenceID" : 2,
      "context" : "The performance of our algorithm is compared to the structured variational inference (SVI) method of Ghahramani and Jordan [1997], the method of Kolter and Jaakkola [2012] and that of Zhong et al. [2014]; we shall refer to the last two algorithms as KJ and ZGS, respectively.",
      "startOffset" : 101,
      "endOffset" : 204
    }, {
      "referenceID" : 2,
      "context" : "The performance of our algorithm is compared to the structured variational inference (SVI) method of Ghahramani and Jordan [1997], the method of Kolter and Jaakkola [2012] and that of Zhong et al. [2014]; we shall refer to the last two algorithms as KJ and ZGS, respectively. 7.1 Experimental Results: Synthetic Data The synthetic dataset was generated randomly (the exact procedure is described in Appendix C). To evaluate the performance, we use normalized disaggregation error as suggested by Kolter and Jaakkola [2012] and also adopted by Zhong et al.",
      "startOffset" : 101,
      "endOffset" : 523
    }, {
      "referenceID" : 2,
      "context" : "The performance of our algorithm is compared to the structured variational inference (SVI) method of Ghahramani and Jordan [1997], the method of Kolter and Jaakkola [2012] and that of Zhong et al. [2014]; we shall refer to the last two algorithms as KJ and ZGS, respectively. 7.1 Experimental Results: Synthetic Data The synthetic dataset was generated randomly (the exact procedure is described in Appendix C). To evaluate the performance, we use normalized disaggregation error as suggested by Kolter and Jaakkola [2012] and also adopted by Zhong et al. [2014]. This measures the reconstruction error for each individual appliance.",
      "startOffset" : 101,
      "endOffset" : 563
    } ],
    "year" : 2016,
    "abstractText" : "We develop a scalable, computationally efficient method for the task of energy disaggregation for home appliance monitoring. In this problem the goal is to estimate the energy consumption of each appliance over time based on the total energy-consumption signal of a household. The current state of the art is to model the problem as inference in factorial HMMs, and use quadratic programming to find an approximate solution to the resulting quadratic integer program. Here we take a more principled approach, better suited to integer programming problems, and find an approximate optimum by combining convex semidefinite relaxations randomized rounding, as well as a scalable ADMM method that exploits the special structure of the resulting semidefinite program. Simulation results both in synthetic and real-world datasets demonstrate the superiority of our method.",
    "creator" : null
  }
}