{
  "name" : "a01a0380ca3c61428c26a231f0e49a09.pdf",
  "metadata" : {
    "source" : "META",
    "title" : "Which Space Partitioning Tree to Use for Search?",
    "authors" : [ "P. Ram" ],
    "emails" : [ "p.ram@gatech.edu", "agray@cc.gatech.edu" ],
    "sections" : [ {
      "heading" : "1 Nearest-neighbor search",
      "text" : "Nearest-neighbor search is ubiquitous in computer science. Several techniques exist for nearestneighbor search, but most algorithms can be categorized into two following groups based on the indexing scheme used – (1) search with hierarchical tree indices, or (2) search with hash-based indices. Although multidimensional binary space-partitioning trees (or BSP-trees), such as kd-trees [1], are widely used for nearest-neighbor search, it is believed that their performances degrade with increasing dimensions. Standard worst-case analyses of search with BSP-trees in high dimensions usually lead to trivial guarantees (such as, an Ω(n) search time guarantee for a single nearest-neighbor query in a set of n points). This is generally attributed to the “curse of dimensionality” – in the worst case, the high dimensionality can force the search algorithm to visit every node in the BSP-tree.\nHowever, these BSP-trees are very simple and intuitive, and still used in practice with success. The occasional favorable performances of BSP-trees in high dimensions are attributed to the low “intrinsic” dimensionality of real data. However, no clear relationship between the BSP-tree search performance and the intrinsic data properties is known. We present theoretical results which link the search performance of BSP-trees to properties of the data and the tree. This allows us to identify implicit factors influencing BSP-tree search performance — knowing these driving factors allows us to develop successful heuristics for BSP-trees with improved search performance.\nAlgorithm 1 BSP-tree search Input: BSP-tree T on set S,\nQuery q, Desired depth l Output: Candidate neighbor p current tree depth lc ← 0 current tree node Tc ← T while lc < l do\nif 〈Tc.w, q〉+ Tc.b ≤ 0 then Tc ← Tc.left child else Tc ← Tc.right child end if Increment depth lc ← lc + 1\nend while p← argminr∈Tc∩S ‖q − r‖. Each node in a BSP-tree represents a region of the space and each non-leaf node has a left and right child representing a disjoint partition of this region with some separating hyperplane and threshold (w, b). A search query on this tree is usually answered with a depth-first branch-and-bound algorithm. Algorithm 1 presents a simplified version where a search query is answered with a small set of neighbor candidates of any desired size by performing a greedy depth-first tree traversal to a specified depth. This is known as defeatist tree search. We are not aware of any data-dependent analysis of the quality of the results from defeatist BSP-tree search. However, Verma et al. (2009) [2] presented adaptive data-dependent analyses of some BSP-trees for the task of vector quantization. These results show precise connections between the quantization performance of the BSP-trees and certain properties of the data (we will present these data properties in Section 2).\nWe establish search performance guarantees for BSP-trees by linking their nearest-neighbor performance to their vector quantization performance and utilizing the recent guarantees on the BSP-tree vector quantization. Our results provide theoretical evidence, for the first time, that better quantization performance implies better search performance1. These results also motivate the use of large margin BSP-trees, trees that hierarchically partition the data with a large (geometric) margin, for better nearest-neighbor search performance. After discussing some existing literature on nearestneighbor search and vector quantization in Section 2, we discuss our following contributions:\n• We present performance guarantees for Algorithm 1 in Section 3, linking search performance to vector quantization performance. Specifically, we show that for any balanced BSP-tree and a depth l, under some conditions, the worst-case search error incurred by the neighbor candidate returned by Algorithm 1 is proportional to a factor which is\nO ( 2l/2 exp(−l/2β) (n/2l)1/O(d) − 2 ) ,\nwhere β corresponds to the quantization performance of the tree (smaller β implies smaller quantization error) and d is closely related to the doubling dimension of the dataset (as opposed to the ambient dimension D of the dataset). This implies that better quantization produces better worst-case search results. Moreover, this result implies that smaller l produces improved worstcase performance (smaller l does imply more computation, hence it is intuitive to expect less error at the cost of computation). Finally, there is also the expected dependence on the intrinsic dimensionality d – increasing d implies deteriorating worst-case performance. The theoretical results are empirically verified in this section as well.\n• In Section 3, we also show that the worst-case search error for Algorithm 1 with a BSP-tree T is proportional to (1/γ) where γ is the smallest margin size of all the partitions in T .\n• We present the quantization performance guarantee of a large margin BSP tree in Section 4. These results indicate that for a given dataset, the best BSP-tree for search is the one with the best combination of low quantization error and large partition margins. We conclude with this insight and related unanswered questions in Section 5."
    }, {
      "heading" : "2 Search and vector quantization",
      "text" : "Binary space-partitioning trees (or BSP-trees) are hierarchical data structures providing a multiresolution view of the dataset indexed. There are several space-partitioning heuristics for a BSPtree construction. A tree is constructed by recursively applying a heuristic partition. The most popular kd-tree uses axis-aligned partitions (Figure 1(a)), often employing a median split along the coordinate axis of the data in the tree node with the largest spread. The principal-axis tree (PA-tree) partitions the space at each node at the median along the principal eigenvector of the covariance matrix of the data in that node [3, 4]. Another heuristic partitions the space based on a 2-means clustering of the data in the node to form the two-means tree (2M-tree) [5, 6]. The random-projection tree (RP-tree) partitions the space by projecting the data along a random standard normal direction and choosing an appropriate splitting threshold [7] (Figure 1(b)). The max-margin tree (MM-tree) is built by recursively employing large margin partitions of the data [8] (Figure 1(c)). The unsupervised large margin splits are usually performed using max-margin clustering techniques [9].\nSearch. Nearest-neighbor search with a BSP-tree usually involves a depth-first branch-and-bound algorithm which guarantees the search approximation (exact search is a special case of approximate search with zero approximation) by a depth-first traversal of the tree followed by a backtrack up the tree as required. This makes the tree traversal unpredictable leading to trivial worst-case runtime\n1This intuitive connection is widely believed but never rigorously established to the best of our knowledge.\nguarantees. On the other hand, locality-sensitive hashing [10] based methods approach search in a different way. After indexing the dataset into hash tables, a query is answered by selecting candidate points from these hash tables. The candidate set size implies the worst-case search time bound. The hash table construction guarantees the set size and search approximation. Algorithm 1 uses a BSPtree to select a candidate set for a query with defeatist tree search. For a balanced tree on n points, the candidate set size at depth l is n/2l and the search runtime is O(l + n/2l), with l ≤ log2 n. For any choice of the depth l, we present the first approximation guarantee for this search process.\nDefeatist BSP-tree search has been explored with the spill tree [11], a binary tree with overlapping sibling nodes unlike the disjoint nodes in the usual BSP-tree. The search involves selecting the candidates in (all) the leaf node(s) which contain the query. The level of overlap guarantees the search approximation, but this search method lacks any rigorous runtime guarantee; it is hard to bound the number of leaf nodes that might contain any given query. Dasgupta & Sinha (2013) [12] show that the probability of finding the exact nearest neighbor with defeatist search on certain randomized partition trees (randomized spill trees and RP-trees being among them) is directly proportional to the relative contrast of the search task [13], a recently proposed quantity which characterizes the difficulty of a search problem (lower relative contrast makes exact search harder).\nVector Quantization. Recent work by Verma et al., 2009 [2] has established theoretical guarantees for some of these BSP-trees for the task of vector quantization. Given a set of points S ⊂ RD of n points, the task of vector quantization is to generate a set of points M ⊂ RD of size k n with low average quantization error. The optimal quantizer for any region A is given by the mean µ(A) of the data points lying in that region. The quantization error of the region A is then given by\nVS(A) = 1 |A ∩ S| ∑\nx∈A∩S\n‖x− µ(A)‖22 , (1)\nand the average quantization error of a disjoint partition of region A into Al and Ar is given by: VS({Al, Ar}) = (|Al ∩ S|VS(Al) + |Ar ∩ S|VS(Ar)) /|A ∩ S|. (2)\nTree-based structured vector quantization is used for efficient vector quantization – a BSP-tree of depth log2 k partitions the space containing S into k disjoint regions to produce a k-quantization of S. The theoretical results for tree-based vector quantization guarantee the improvement in average quantization error obtained by partitioning any single region (with a single quantizer) into two disjoints regions (with two quantizers) in the following form (introduced by Freund et al. (2007) [14]):\nDefinition 2.1. For a set S ⊂ RD, a region A partitioned into two disjoint regions {Al, Ar}, and a data-dependent quantity β > 1, the quantization error improvement is characterized by:\nVS({Al, Ar}) < (1− 1/β)VS(A). (3)\nThe quantization performance depends inversely on the data-dependent quantity β – lower β implies better quantization. We present the definition of β for different BSP-trees in Table 1. For the PA-tree, β depends on the ratio of the sum of the eigenvalues of the covariance matrix of data (A ∩ S) to the principal eigenvalue. The improvement rate β for the RP-tree depends on the covariance dimension of the data in the node A (β = O(dc)) [7], which roughly corresponds to the lowest dimensionality of an affine plane that captures most of the data covariance. The 2M-tree does not have an explicit β but it has the optimal theoretical improvement rate for a single partition because the 2-means clustering ob-\njective is equal to |Al|V(Al) + |Ar|V(Ar) and minimizing this objective maximizes β. The 2- means problem is NP-hard and an approximate solution is used in practice. These theoretical results are valid under the condition that there are no outliers in A ∩ S. This is characterized as maxx,y∈A∩S ‖x− y‖2 ≤ ηVS(A) for a fixed η > 0. This notion of the absence of outliers was first introduced for the theoretical analysis of the RP-trees [7]. Verma et al. (2009) [2] describe outliers as “points that are much farther away from the mean than the typical distance-from-mean”. In this situation, an alternate type of partition is used to remove these outliers that are farther away\nfrom the mean than expected. For η ≥ 8, this alternate partitioning is guaranteed to reduce the data diameter (maxx,y∈A∩S ‖x− y‖) of the resulting nodes by a constant fraction [7, Lemma 12], and can be used until a region contain no outliers, at which point, the usual hyperplane partition can be used with their respective theoretical quantization guarantees. The implicit assumption is that the alternate partitioning scheme is employed rarely.\nThese results for BSP-tree quantization performance indicate that different heuristics are adaptive to different properties of the data. However, no existing theoretical result relates this performance of BSP-trees to their search performance. Making the precise connection between the quantization performance and the search performance of these BSP-trees is a contribution of this paper."
    }, {
      "heading" : "3 Approximation guarantees for BSP-tree search",
      "text" : "In this section, we formally present the data and tree dependent performance guarantees on the search with BSP-trees using Algorithm 1. The quality of nearest-neighbor search can be quantized in two ways – (i) distance error and (ii) rank of the candidate neighbor. We present guarantees for both notions of search error2. For a query q and a set of points S and a neighbor candidate p ∈ S, distance error (q) = ‖q−p‖minr∈S‖q−r‖ − 1, and rank τ(q) = |{r ∈ S : ‖q − r‖ < ‖q − p‖}|+ 1.\nAlgorithm 1 requires the query traversal depth l as an input. The search runtime is O(l + (n/2l)). The depth can be chosen based on the desired runtime. Equivalently, the depth can be chosen based on the desired number of candidatesm; for a balanced binary tree on a dataset S of n points with leaf nodes containing a single point, the appropriate depth l = log2 n − dlog2me. We will be building on the existing results on vector quantization error [2] to present the worst case error guarantee for Algorithm 1. We need the following definitions to precisely state our results: Definition 3.1. An ω-balanced split partitioning a region A into disjoint regions {A1, A2} implies ||A1 ∩ S| − |A2 ∩ S|| ≤ ω|A ∩ S|. For a balanced tree corresponding to recursive median splits, such as the PA-tree and the kd-tree, ω ≈ 0. Non-zero values of ω 1, corresponding to approximately balanced trees, allow us to potentially adapt better to some structure in the data at the cost of slightly losing the tree balance. For the MM-tree (discussed in detail in Section 4), ω-balanced splits are enforced for any specified value of ω. Approximately balanced trees have a depth bound of O(log n) [8, Theorem 3.1]. For a tree with ω-balanced splits, the worst case runtime of Algorithm 1 is O ( l + ( 1+ω 2 )l n )\n. For the 2M-tree, ω-balanced splits are not enforced. Hence the actual value of ω could be high for a 2M-tree. Definition 3.2. Let B`2(p,∆) = {r ∈ S : ‖p− r‖ < ∆} denote the points in S contained in a ball of radius ∆ around some p ∈ S with respect to the `2 metric. The expansion constant of (S, `2) is defined as the smallest c ≥ 2 such\n∣∣B`2(p, 2∆)∣∣ ≤ c ∣∣B`2(p,∆)∣∣ ∀p ∈ S and ∀∆ > 0. Bounded expansion constants correspond to growth-restricted metrics [15]. The expansion constant characterizes the data distribution, and c ∼ 2O(d) where d is the doubling dimension of the set S with respect to the `2 metric. The relationship is exact for points on a D-dimensional grid (i.e., c = Θ(2D)). Equipped with these definitions, we have the following guarantee for Algorithm 1: Theorem 3.1. Consider a dataset S ⊂ RD of n points with ψ = 12n2 ∑ x,y∈S ‖x− y‖\n2, the BSP tree T built on S and a query q ∈ RD with the following conditions :\n(C1) Let (A ∩ (S ∪ {q}), `2) have an expansion constant at most c̃ for any convex set A ⊂ RD. (C2) Let T be complete till a depth L < ( log2 n c̃ ) /(1− log2(1− ω)) with ω-balanced splits. (C3) Let β∗ correspond to the worst quantization error improvement rate over all splits in T . (C4) For any node A in the tree T , let maxx,y∈A∩S ‖x− y‖2 ≤ ηVS(A) for a fixed η ≥ 8.\nFor α = 1/(1 − ω), the upper bound du on the distance of q to the neighbor candidate p returned by Algorithm 1 with depth l ≤ L is given by\n‖q − p‖ ≤ du = 2 √ ηψ · (2α)l/2 · exp(−l/2β∗) (n/(2α)l) 1/ log2 c̃ − 2 . (4)\n2The distance error corresponds to the relative error in terms of the actual distance values. The rank is one more than the number of points in S which are better neighbor candidates than p. The nearest-neighbor of q has rank 1 and distance error 0. The appropriate notion of error depends on the search application.\nNow η is fixed, and ψ is fixed for a dataset S. Then, for a fixed ω, this result implies that between two types of BSP-trees on the same set and the same query, Algorithm 1 has a better worst-case guarantee on the candidate-neighbor distance for the tree with better quantization performance (smaller β∗). Moreover, for a particular tree with β∗ ≥ log2 e, du is non-decreasing in l. This is expected because as we traverse down the tree, we can never reduce the candidate neighbor distance. At the root level (l = 0), the candidate neighbor is the nearest-neighbor. As we descend down the tree, the candidate neighbor distance will worsen if a tree split separates the query from its closer neighbors. This behavior is implied in Equation (4). For a chosen depth l in Algorithm 1, the candidate neighbor distance is inversely proportional to ( n/(2α)l\n)1/ log2 c̃, implying deteriorating bounds du with increasing c̃. Since log2 c̃ ∼ O(d), larger intrinsic dimensionality implies worse guarantees as expected from the curse of dimensionality. To prove Theorem 3.1, we use the following result: Lemma 3.1. Under the conditions of Theorem 3.1, for any node A at a depth l in the BSP-tree T on S, VS(A) ≤ ψ (2/(1− ω))l exp(−l/β∗). This result is obtained by recursively applying the quantization error improvement in Definition 2.1 over l levels of the tree (the proof is in Appendix A). Proof of Theorem 3.1. Consider the node A at depth l in the tree containing q, and let m = |A∩S|. Let D = maxx,y∈A∩S ‖x− y‖, let d = minx∈A∩S ‖q − x‖, and let B`2(q,∆) = {x ∈ A ∩ (S ∪ {q}) : ‖q − x‖ < ∆}. Then, by the Definition 3.2 and condition C1,∣∣B`2(q,D + d)∣∣ ≤ c̃log2dD+dd e|B`2(q, d)| = c̃log2dD+dd e ≤ c̃log2(D+2dd ), where the equality follows from the fact that B`2(q, d) = {q}. Now\n∣∣B`2(q,D + d)∣∣ ≥ m. Using this above gives us m1/ log2 c̃ ≤ (D/d) + 2. By condition C2, m1/ log2 c̃ > 2. Hence we have d ≤ D/(m1/ log2 c̃ − 2). By construction and condition C4, D ≤ √ ηVS(A). Now m ≥ n/(2α)l. Plugging this above and utilizing Lemma 3.1 gives us the statement of Theorem 3.1. Nearest-neighbor search error guarantees. Equipped with the bound on the candidate-neighbor distance, we bound the worst-case nearest-neighbor search errors as follows: Corollary 3.1. Under the conditions of Theorem 3.1, for any query q at a desired depth l ≤ L in Algorithm 1, the distance error (q) is bounded as (q) ≤ (du/d∗q) − 1, and the rank τ(q) is bounded as τ(q) ≤ c̃dlog2(d\nu/d∗q)e, where d∗q = minr∈S ‖q − r‖. Proof. The distance error bound follows from the definition of distance error. Let R = {r ∈ S : ‖q − r‖ < du}. By definition, τ(q) ≤ |R| + 1. Let B`2(q,∆) = {x ∈ (S ∪ {q}) : ‖q − x‖ < ∆}. Since B`2(q, d u) contains q and R, and q /∈ S, |B`2(q, d u)| = |R|+ 1 ≥ τ(q). From Definition 3.2 and Condition C1, |B`2(q, d u)| ≤ c̃dlog2(d u/d∗q)e|B`2(q, d ∗ q)|. Using the fact that |B`2(q, d ∗ q)| = |{q}| = 1 gives us the upper bound on τ(q). The upper bounds on both forms of search error are directly proportional to du. Hence, the BSPtree with better quantization performance has better search performance guarantees, and increasing traversal depth l implies less computation but worse performance guarantees. Any dependence of this approximation guarantee on the ambient data dimensionality is subsumed by the dependence on β∗ and c̃. While our result bounds the worst-case performance of Algorithm 1, an average case performance guarantee on the distance error is given by Eq (q) ≤ du Eq ( 1/d∗q ) −1, and on the rank\nis given by Eq τ(q) ≤ c̃dlog2 d ue ( Eq c−(log2 d ∗ q) ) , since the expectation is over the queries q and du\ndoes not depend on q. For the purposes of relative comparison among BSP-trees, the bounds on the expected error depend solely on du since the term within the expectation over q is tree independent.\nDependence of the nearest-neighbor search error on the partition margins. The search error bounds in Corollary 3.1 depend on the true nearest-neighbor distance d∗q of any query q of which we have no prior knowledge. However, if we partition the data with a large margin split, then we can say that either the candidate neighbor is the true nearest-neighbor of q or that d∗q is greater than the size of the margin. We characterize the influence of the margin size with the following result: Corollary 3.2. Consider the conditions of Theorem 3.1 and a query q at a depth l ≤ L in Algorithm 1. Further assume that γ is the smallest margin size on both sides of any partition in the tree T . Then the distance error is bounded as (q) ≤ du/γ − 1, and the rank is bounded as τ(q) ≤ c̃dlog2(du/γ)e.\nThis result indicates that if the split margins in a BSP-tree can be increased without adversely affecting its quantization performance, the BSP-tree will have improved nearest-neighbor error guarantees\nfor the Algorithm 1. This motivated us to consider the max-margin tree [8], a BSP-tree that explicitly maximizes the margin of the split for every split in the tree.\nExplanation of the conditions in Theorem 3.1. Condition C1 implies that for any convex set A ⊂ RD, ((A ∩ (S ∪ {q})), `2) has an expansion constant at most c̃. A bounded c̃ implies that no subset of (S ∪ {q}), contained in a convex set, has a very high expansion constant. This condition implies that ((S∪{q}), `2) also has an expansion constant at most c̃ (since (S∪{q}) is contained in its convex hull). However, if (S ∪ {q}, `2) has an expansion constant c, this does not imply that the data lying within any convex set has an expansion constant at most c. Hence a bounded expansion constant assumption for (A∩(S∪{q}), `2) for every convex setA ⊂ RD is stronger than a bounded expansion constant assumption for (S ∪ {q}, `2)3. Condition C2 ensures that the tree is complete so that for every query q and a depth l ≤ L, there exists a large enough tree node which contains q. Condition C3 gives us the worst quantization error improvement rate over all the splits in the tree.\nCondition C4 implies that the squared data diameter of any node A (maxx,y∈A∩S ‖x− y‖2) is within a constant factor of its quantization error VS(A). This refers to the assumption that the node A contains no outliers as described in Section 3 and only hyperplane partitions are used and their respective quantization improvement guarantees presented in Section 2 (Table 1) hold. By placing condition C4, we ignore the alternate partitioning scheme used to remove outliers for simplicity of analysis. If we allow a small fraction of the partitions in the tree to be this alternate split, a similar result can be obtained since the alternate split is the same for all BSP-tree. For two different kinds of hyperplane splits, if alternate split is invoked the same number of times in the tree, the difference in their worst-case guarantees for both the trees would again be governed by their worstcase quantization performance (β∗). However, for any fixed η, a harder question is whether one type of hyperplane partition violates the inlier condition more often than another type of partition, resulting in more alternate partitions. And we do not yet have a theoretical answer for this4.\nEmpirical validation. We examine our theoretical results with 4 datasets – OPTDIGITS (D = 64, n = 3823, 1797 queries), TINY IMAGES (D = 384, n = 5000, 1000 queries), MNIST (D = 784, n = 6000, 1000 queries), IMAGES (D = 4096, n = 500, 150 queries). We consider the following BSP-trees: kd-tree, random-projection (RP) tree, principal axis (PA) tree, two-means (2M) tree and max-margin (MM) tree. We only use hyperplane partitions for the tree construction. This is because, firstly, the check for the presence of outliers (∆2S(A) > ηVS(A)) can be computationally expensive for large n, and, secondly, the alternate partition is mostly for the purposes of obtaining theoretical guarantees. The implementation details for the different tree constructions are presented in Appendix C. The performance of these BSP-trees are presented in Figure 2. Trees with missing data points for higher depth levels (for example, kd-tree in Figure 2(a) and 2M-tree in Figures 2 (b) & (c)) imply that we were unable to grow complete BSP-trees beyond that depth.\nThe quantization performance of the 2M-tree, PA-tree and MM-tree are significantly better than the performance of the kd-tree and RP-tree and, as suggested by Corollary 3.1, this is also reflected in their search performance. The MM-tree has comparable quantization performance to the 2M-tree and PA-tree. However, in the case of search, the MM-tree outperforms PA-tree in all datasets. This can be attributed to the large margin partitions in the MM-tree. The comparison to 2M-tree is not as apparent. The MM-tree and PA-tree have ω-balanced splits for small ω enforced algorithmically, resulting in bounded depth and bounded computation of O(l + n(1 + ω)l/2l) for any given depth l. No such balance constraint is enforced in the 2-means algorithm, and hence, the 2M-tree can be heavily unbalanced. The absence of complete BSP 2M-tree beyond depth 4 and 6 in Figures 2 (b) & (c) respectively is evidence of the lack of balance in the 2M-tree. This implies possibly more computation and hence lower errors. Under these conditions, the MM-tree with an explicit balance constraint performs comparably to the 2M-tree (slightly outperforming in 3 of the 4 cases) while still maintaining a balanced tree (and hence returning smaller candidate sets on average).\n3A subset of a growth-restricted metric space (S, `2) may not be growth-restricted. However, in our case, we are not considering all subsets; we only consider subsets of the form (A ∩ S) where A ⊂ RD is a convex set. So our condition does not imply that all subsets of (S, `2) are growth-restricted.\n4We empirically explore the effect of the tree type on the violation of the inlier condition (C4) in Appendix B. The results imply that for any fixed value of η, almost the same number of alternate splits would be invoked for the construction of different types of trees on the same dataset. Moreover, with η ≥ 8, for only one of the datasets would a significant fraction of the partitions in the tree (of any type) need to be the alternate partition."
    }, {
      "heading" : "4 Large margin BSP-tree",
      "text" : "We established that the search error depends on the quantization performance and the partition margins of the tree. The MM-tree explicitly maximizes the margin of every partition and empirical results indicate that it has comparable performance to the 2M-tree and PA-tree in terms of the quantization performance. In this section, we establish a theoretical guarantee for the MM-tree quantization performance. The large margin split in the MM-tree is obtained by performing max-margin clustering (MMC) with 2 clusters. The task of MMC is to find the optimal hyperplane (w∗, b∗) from the following optimization problem5 given a set of points S = {x1, x2, . . . , xm} ⊂ RD:\nmin w,b,ξi\n1 2 ‖w‖22 + C m∑ i=1 ξi (5)\ns.t. |〈w, xi〉+ b| ≥ 1− ξi, ξi ≥ 0 ∀i = 1, . . . ,m (6)\n−ωm ≤ m∑ i=1 sgn(〈w, xi〉+ b) ≤ ωm. (7)\nMMC finds a soft max-margin split in the data to obtain two clusters separated by a large (soft) margin. The balance constraint (Equation (7)) avoids trivial solutions and enforces an ω-balanced split. The margin constraints (Equation (6)) enforce a robust separation of the data. Given a solution to the MMC, we establish the following quantization error improvement rate for the MM-tree: Theorem 4.1. Given a set of points S ⊂ RD and a region A containing m points, consider an ω-balanced max-margin split (w, b) of the region A into {Al, Ar} with at most αm support vectors and a split margin of size γ = 1/ ‖w‖. Then the quantization error improvement is given by:\nVS({Al, Ar}) ≤ 1− γ2 (1− α)2 ( 1−ω 1+ω ) ∑D i=1 λi VS(A), (8) where λ1, . . . , λD are the eigenvalues of the covariance matrix of A ∩ S.\nThe result indicates that larger margin sizes (large γ values) and a smaller number of support vectors (small α) implies better quantization performance. Larger ω implies smaller improvement, but ω is generally restricted algorithmically in MMC. If γ = O( √ λ1) then this rate matches the best possible quantization performance of the PA-tree (Table 1). We do assume that we have a feasible solution to the MMC problem to prove this result. We use the following result to prove Theorem 4.1: Proposition 4.1. [7, Lemma 15] Give a set S, for any partition {A1, A2} of a set A,\nVS(A)− VS({A1, A2}) = |A1 ∩ S||A2 ∩ S| |A ∩ S|2 ‖µ(A1)− µ(A2)‖ 2 , (9)\nwhere µ(A) is the centroid of the points in the region A. 5This is an equivalent formulation [16] to the original form of max-margin clustering proposed by Xu et al.\n(2005) [9]. The original formulation also contains the labels yis and optimizes over it. We consider this form of the problem since it makes our analysis easier to follow.\nThis result [7] implies that the improvement in the quantization error depends on the distance between the centroids of the two regions in the partition. Proof of Theorem 4.1. For a feasible solution (w, b, ξi|i=1,...,m) to the MMC problem,\nm∑ i=1 |〈w, xi〉+ b| ≥ m− m∑ i=1 ξi.\nLet x̃i = 〈w, xi〉+b andmp = |{i : x̃i > 0}| andmn = |{i : x̃i ≤ 0}| and µ̃p = ( ∑ i : x̃i>0\nx̃i)/mp and µ̃n = ( ∑ i : x̃i≤0 x̃i)/mn. Then mpµ̃p −mnµ̃n ≥ m− ∑ i ξi.\nWithout loss of generality, we assume that mp ≥ mn. Then the balance constraint (Equation (7)) tells us thatmp ≤ m(1+ω)/2 andmn ≥ m(1−ω)/2. Then µ̃p− µ̃n+ω(µ̃p+ µ̃n) ≥ 2− 2m ∑ i ξi.\nSince µ̃p > 0 and µn ≤ 0, |µ̃p + µ̃n| ≤ (µ̃p − µ̃n). Hence (1 + ω)(µ̃p − µ̃n) ≥ 2− 2m ∑ i ξi. For an unsupervised split, the data is always separable since there is no misclassification. This implies that ξ∗i ≤ 1∀i. Hence,\nµ̃p − µ̃n ≥ ( 2− 2\nm |{i : ξi > 0}|\n) /(1 + ω) ≥ 2 ( 1− α 1 + ω ) , (10)\nsince the term |{i : ξi > 0}| corresponds to the number of support vectors in the solution. Cauchy-Schwartz implies that ‖µ(Al)− µ(Ar)‖ ≥ |〈w, µ(Al) − µ(Ar)〉|/ ‖w‖ = (µ̃p − µ̃n)γ, since µ̃n = 〈w, µ(Al)〉 + b and µ̃p = 〈w, µ(Ar)〉 + b. From Equation (10), we can say that ‖µ(Al)− µ(Ar)‖2 ≥ 4γ2 (1− α)2 / (1 + ω)2. Also, for ω-balanced splits, |Al||Ar| ≥ (1− ω2)m2/4. Combining these into Equation (9) from Proposition 4.1, we have\nVS(A)− VS({Al, Ar}) ≥ (1− ω2)γ2 ( 1− α 1 + ω )2 = γ2 (1− α)2 ( 1− ω 1 + ω ) . (11)\nLet Cov(A ∩ S) be the covariance matrix of the data contained in region A and λ1, . . . , λD be the eigenvalues of Cov(A ∩ S). Then, we have:\nVS(A) = 1 |A ∩ S| ∑\nx∈A∩S ‖x− µ(A)‖2 = tr (Cov(A ∩ S)) = D∑ i=1 λi.\nThen dividing Equation (11) by VS(A) gives us the statement of the theorem."
    }, {
      "heading" : "5 Conclusions and future directions",
      "text" : "Our results theoretically verify that BSP-trees with better vector quantization performance and large partition margins do have better search performance guarantees as one would expect. This means that the best BSP-tree for search on a given dataset is the one with the best combination of good quantization performance (low β∗ in Corollary 3.1) and large partition margins (large γ in Corollary 3.2). The MM-tree and the 2M-tree appear to have the best empirical performance in terms of the search error. This is because the 2M-tree explicitly minimizes β∗ while the MM-tree explicitly maximizes γ (which also implies smaller β∗ by Theorem 4.1). Unlike the 2M-tree, the MM-tree explicitly maintains an approximately balanced tree for better worst-case search time guarantees.\nHowever, the general dimensional large margin partitions in the MM-tree construction can be quite expensive. But the idea of large margin partitions can be used to enhance any simpler space partition heuristic – for any chosen direction (such as along a coordinate axis or along the principal eigenvector of the data covariance matrix), a one dimensional large margin split of the projections of the points along the chosen direction can be obtained very efficiently for improved search performance.\nThis analysis of search could be useful beyond BSP-trees. Various heuristics have been developed to improve locality-sensitive hashing (LSH) [10]. The plain-vanilla LSH uses random linear projections and random thresholds for the hash-table construction. The data can instead be projected along the top few eigenvectors of the data covariance matrix. This was (empirically) improved upon by learning an orthogonal rotation of the projected data to minimize the quantization error of each bin in the hash-table [17]. A nonlinear hash function can be learned using a restricted Boltzmann machine [18]. If the similarity graph of the data is based on the Euclidean distance, spectral hashing [19] uses a subset of the eigenvectors of the similarity graph Laplacian. Semi-supervised hashing [20] incorporates given pairwise semantic similarity and dissimilarity constraints. The structural SVM framework has also been used to learn hash functions [21]. Similar to the choice of an appropriate BSP-tree for search, the best hashing scheme for any given dataset can be chosen by considering the quantization performance of the hash functions and the margins between the bins in the hash tables. We plan to explore this intuition theoretically and empirically for LSH based search schemes."
    } ],
    "references" : [ {
      "title" : "An Algorithm for Finding Best Matches in Logarithmic Expected Time",
      "author" : [ "J.H. Friedman", "J.L. Bentley", "R.A. Finkel" ],
      "venue" : "ACM Transactions in Mathematical Software,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 1977
    }, {
      "title" : "Which Spatial Partition Trees are Adaptive to Intrinsic Dimension",
      "author" : [ "N. Verma", "S. Kpotufe", "S. Dasgupta" ],
      "venue" : "In Proceedings of the Conference on Uncertainty in Artificial Intelligence,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2009
    }, {
      "title" : "Refinements to Nearest-Neighbor Searching in k-dimensional Trees",
      "author" : [ "R.F. Sproull" ],
      "venue" : null,
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 1991
    }, {
      "title" : "A Fast Nearest-Neighbor Algorithm based on a Principal Axis Search Tree",
      "author" : [ "J. McNames" ],
      "venue" : "IEEE Transactions on Pattern Analysis and Machine Intelligence,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2001
    }, {
      "title" : "A Branch-and-Bound Algorithm for Computing k-Nearest- Neighbors",
      "author" : [ "K. Fukunaga", "P.M. Nagendra" ],
      "venue" : "IEEE Transactions on Computing,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 1975
    }, {
      "title" : "Scalable Recognition with a Vocabulary Tree",
      "author" : [ "D. Nister", "H. Stewenius" ],
      "venue" : "In IEEE Conference on Computer Vision and Pattern Recognition,",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2006
    }, {
      "title" : "Random Projection trees and Low Dimensional Manifolds",
      "author" : [ "S. Dasgupta", "Y. Freund" ],
      "venue" : "In Proceedings of ACM Symposium on Theory of Computing,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2008
    }, {
      "title" : "Nearest-neighbor Search on a Time Budget via Max-Margin Trees",
      "author" : [ "P. Ram", "D. Lee", "A.G. Gray" ],
      "venue" : "In SIAM International Conference on Data Mining,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 2012
    }, {
      "title" : "Maximum Margin Clustering",
      "author" : [ "L. Xu", "J. Neufeld", "B. Larson", "D. Schuurmans" ],
      "venue" : "Advances in Neural Information Processing Systems,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2005
    }, {
      "title" : "Approximate Nearest Neighbors: Towards Removing the Curse of Dimensionality",
      "author" : [ "P. Indyk", "R. Motwani" ],
      "venue" : "In Proceedings of ACM Symposium on Theory of Computing,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 1998
    }, {
      "title" : "An Investigation of Practical Approximate Nearest Neighbor Algorithms",
      "author" : [ "T. Liu", "A.W. Moore", "A.G. Gray", "K. Yang" ],
      "venue" : "Advances in Neural Information Proceedings Systems,",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2005
    }, {
      "title" : "Randomized Partition Trees for Exact Nearest Neighbor Search",
      "author" : [ "S. Dasgupta", "K. Sinha" ],
      "venue" : "In Proceedings of the Conference on Learning Theory,",
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 2013
    }, {
      "title" : "On the Difficulty of Nearest Neighbor Search",
      "author" : [ "J. He", "S. Kumar", "S.F. Chang" ],
      "venue" : "In Proceedings of the International Conference on Machine Learning,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2012
    }, {
      "title" : "Learning the Structure of Manifolds using Random Projections",
      "author" : [ "Y. Freund", "S. Dasgupta", "M. Kabra", "N. Verma" ],
      "venue" : "Advances in Neural Information Processing Systems,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 2007
    }, {
      "title" : "Finding Nearest Neighbors in Growth-Restricted Metrics",
      "author" : [ "D.R. Karger", "M. Ruhl" ],
      "venue" : "In Proceedings of ACM Symposium on Theory of Computing,",
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 2002
    }, {
      "title" : "Efficient Maximum Margin Clustering via Cutting Plane Algorithm",
      "author" : [ "B. Zhao", "F. Wang", "C. Zhang" ],
      "venue" : "In SIAM International Conference on Data Mining,",
      "citeRegEx" : "16",
      "shortCiteRegEx" : "16",
      "year" : 2008
    }, {
      "title" : "Iterative Quantization: A Procrustean Approach to Learning Binary Codes",
      "author" : [ "Y. Gong", "S. Lazebnik" ],
      "venue" : "In IEEE Conference on Computer Vision and Pattern Recognition,",
      "citeRegEx" : "17",
      "shortCiteRegEx" : "17",
      "year" : 2011
    }, {
      "title" : "Learning a Nonlinear Embedding by Preserving Class Neighbourhood Structure",
      "author" : [ "R. Salakhutdinov", "G. Hinton" ],
      "venue" : "In Artificial Intelligence and Statistics,",
      "citeRegEx" : "18",
      "shortCiteRegEx" : "18",
      "year" : 2007
    }, {
      "title" : "Spectral Hashing",
      "author" : [ "Y. Weiss", "A. Torralba", "R. Fergus" ],
      "venue" : "Advances of Neural Information Processing Systems,",
      "citeRegEx" : "19",
      "shortCiteRegEx" : "19",
      "year" : 2008
    }, {
      "title" : "Semi-Supervised Hashing for Scalable Image Retrieval",
      "author" : [ "J. Wang", "S. Kumar", "S. Chang" ],
      "venue" : "In IEEE Conference on Computer Vision and Pattern Recognition,",
      "citeRegEx" : "20",
      "shortCiteRegEx" : "20",
      "year" : 2010
    }, {
      "title" : "Minimal Loss Hashing for Compact Binary Codes",
      "author" : [ "M. Norouzi", "D.J. Fleet" ],
      "venue" : "In Proceedings of the International Conference on Machine Learning,",
      "citeRegEx" : "21",
      "shortCiteRegEx" : "21",
      "year" : 2011
    }, {
      "title" : "Least Squares Quantization in PCM",
      "author" : [ "S. Lloyd" ],
      "venue" : "IEEE Transactions on Information Theory,",
      "citeRegEx" : "22",
      "shortCiteRegEx" : "22",
      "year" : 1982
    } ],
    "referenceMentions" : [ {
      "referenceID" : 0,
      "context" : "Although multidimensional binary space-partitioning trees (or BSP-trees), such as kd-trees [1], are widely used for nearest-neighbor search, it is believed that their performances degrade with increasing dimensions.",
      "startOffset" : 91,
      "endOffset" : 94
    }, {
      "referenceID" : 1,
      "context" : "(2009) [2] presented adaptive data-dependent analyses of some BSP-trees for the task of vector quantization.",
      "startOffset" : 7,
      "endOffset" : 10
    }, {
      "referenceID" : 2,
      "context" : "The principal-axis tree (PA-tree) partitions the space at each node at the median along the principal eigenvector of the covariance matrix of the data in that node [3, 4].",
      "startOffset" : 164,
      "endOffset" : 170
    }, {
      "referenceID" : 3,
      "context" : "The principal-axis tree (PA-tree) partitions the space at each node at the median along the principal eigenvector of the covariance matrix of the data in that node [3, 4].",
      "startOffset" : 164,
      "endOffset" : 170
    }, {
      "referenceID" : 4,
      "context" : "Another heuristic partitions the space based on a 2-means clustering of the data in the node to form the two-means tree (2M-tree) [5, 6].",
      "startOffset" : 130,
      "endOffset" : 136
    }, {
      "referenceID" : 5,
      "context" : "Another heuristic partitions the space based on a 2-means clustering of the data in the node to form the two-means tree (2M-tree) [5, 6].",
      "startOffset" : 130,
      "endOffset" : 136
    }, {
      "referenceID" : 6,
      "context" : "The random-projection tree (RP-tree) partitions the space by projecting the data along a random standard normal direction and choosing an appropriate splitting threshold [7] (Figure 1(b)).",
      "startOffset" : 170,
      "endOffset" : 173
    }, {
      "referenceID" : 7,
      "context" : "The max-margin tree (MM-tree) is built by recursively employing large margin partitions of the data [8] (Figure 1(c)).",
      "startOffset" : 100,
      "endOffset" : 103
    }, {
      "referenceID" : 8,
      "context" : "The unsupervised large margin splits are usually performed using max-margin clustering techniques [9].",
      "startOffset" : 98,
      "endOffset" : 101
    }, {
      "referenceID" : 9,
      "context" : "On the other hand, locality-sensitive hashing [10] based methods approach search in a different way.",
      "startOffset" : 46,
      "endOffset" : 50
    }, {
      "referenceID" : 10,
      "context" : "Defeatist BSP-tree search has been explored with the spill tree [11], a binary tree with overlapping sibling nodes unlike the disjoint nodes in the usual BSP-tree.",
      "startOffset" : 64,
      "endOffset" : 68
    }, {
      "referenceID" : 11,
      "context" : "Dasgupta & Sinha (2013) [12] show that the probability of finding the exact nearest neighbor with defeatist search on certain randomized partition trees (randomized spill trees and RP-trees being among them) is directly proportional to the relative contrast of the search task [13], a recently proposed quantity which characterizes the difficulty of a search problem (lower relative contrast makes exact search harder).",
      "startOffset" : 24,
      "endOffset" : 28
    }, {
      "referenceID" : 12,
      "context" : "Dasgupta & Sinha (2013) [12] show that the probability of finding the exact nearest neighbor with defeatist search on certain randomized partition trees (randomized spill trees and RP-trees being among them) is directly proportional to the relative contrast of the search task [13], a recently proposed quantity which characterizes the difficulty of a search problem (lower relative contrast makes exact search harder).",
      "startOffset" : 277,
      "endOffset" : 281
    }, {
      "referenceID" : 1,
      "context" : ", 2009 [2] has established theoretical guarantees for some of these BSP-trees for the task of vector quantization.",
      "startOffset" : 7,
      "endOffset" : 10
    }, {
      "referenceID" : 1,
      "context" : "The PA-tree result can be improved to O(%) from O(%(2)) with an additional assumption [2].",
      "startOffset" : 86,
      "endOffset" : 89
    }, {
      "referenceID" : 13,
      "context" : "(2007) [14], which also has the precise definition of dc.",
      "startOffset" : 7,
      "endOffset" : 11
    }, {
      "referenceID" : 6,
      "context" : "The improvement rate β for the RP-tree depends on the covariance dimension of the data in the node A (β = O(dc)) [7], which roughly corresponds to the lowest dimensionality of an affine plane that captures most of the data covariance.",
      "startOffset" : 113,
      "endOffset" : 116
    }, {
      "referenceID" : 6,
      "context" : "This notion of the absence of outliers was first introduced for the theoretical analysis of the RP-trees [7].",
      "startOffset" : 105,
      "endOffset" : 108
    }, {
      "referenceID" : 1,
      "context" : "(2009) [2] describe outliers as “points that are much farther away from the mean than the typical distance-from-mean”.",
      "startOffset" : 7,
      "endOffset" : 10
    }, {
      "referenceID" : 1,
      "context" : "We will be building on the existing results on vector quantization error [2] to present the worst case error guarantee for Algorithm 1.",
      "startOffset" : 73,
      "endOffset" : 76
    }, {
      "referenceID" : 14,
      "context" : "Bounded expansion constants correspond to growth-restricted metrics [15].",
      "startOffset" : 68,
      "endOffset" : 72
    }, {
      "referenceID" : 7,
      "context" : "This motivated us to consider the max-margin tree [8], a BSP-tree that explicitly maximizes the margin of the split for every split in the tree.",
      "startOffset" : 50,
      "endOffset" : 53
    }, {
      "referenceID" : 15,
      "context" : "This is an equivalent formulation [16] to the original form of max-margin clustering proposed by Xu et al.",
      "startOffset" : 34,
      "endOffset" : 38
    }, {
      "referenceID" : 6,
      "context" : "This result [7] implies that the improvement in the quantization error depends on the distance between the centroids of the two regions in the partition.",
      "startOffset" : 12,
      "endOffset" : 15
    }, {
      "referenceID" : 9,
      "context" : "Various heuristics have been developed to improve locality-sensitive hashing (LSH) [10].",
      "startOffset" : 83,
      "endOffset" : 87
    }, {
      "referenceID" : 16,
      "context" : "This was (empirically) improved upon by learning an orthogonal rotation of the projected data to minimize the quantization error of each bin in the hash-table [17].",
      "startOffset" : 159,
      "endOffset" : 163
    }, {
      "referenceID" : 17,
      "context" : "A nonlinear hash function can be learned using a restricted Boltzmann machine [18].",
      "startOffset" : 78,
      "endOffset" : 82
    }, {
      "referenceID" : 18,
      "context" : "If the similarity graph of the data is based on the Euclidean distance, spectral hashing [19] uses a subset of the eigenvectors of the similarity graph Laplacian.",
      "startOffset" : 89,
      "endOffset" : 93
    }, {
      "referenceID" : 19,
      "context" : "Semi-supervised hashing [20] incorporates given pairwise semantic similarity and dissimilarity constraints.",
      "startOffset" : 24,
      "endOffset" : 28
    }, {
      "referenceID" : 20,
      "context" : "The structural SVM framework has also been used to learn hash functions [21].",
      "startOffset" : 72,
      "endOffset" : 76
    } ],
    "year" : 2013,
    "abstractText" : "We consider the task of nearest-neighbor search with the class of binary-spacepartitioning trees, which includes kd-trees, principal axis trees and random projection trees, and try to rigorously answer the question “which tree to use for nearestneighbor search?” To this end, we present the theoretical results which imply that trees with better vector quantization performance have better search performance guarantees. We also explore another factor affecting the search performance – margins of the partitions in these trees. We demonstrate, both theoretically and empirically, that large margin partitions can improve tree search performance. 1 Nearest-neighbor search Nearest-neighbor search is ubiquitous in computer science. Several techniques exist for nearestneighbor search, but most algorithms can be categorized into two following groups based on the indexing scheme used – (1) search with hierarchical tree indices, or (2) search with hash-based indices. Although multidimensional binary space-partitioning trees (or BSP-trees), such as kd-trees [1], are widely used for nearest-neighbor search, it is believed that their performances degrade with increasing dimensions. Standard worst-case analyses of search with BSP-trees in high dimensions usually lead to trivial guarantees (such as, an Ω(n) search time guarantee for a single nearest-neighbor query in a set of n points). This is generally attributed to the “curse of dimensionality” – in the worst case, the high dimensionality can force the search algorithm to visit every node in the BSP-tree. However, these BSP-trees are very simple and intuitive, and still used in practice with success. The occasional favorable performances of BSP-trees in high dimensions are attributed to the low “intrinsic” dimensionality of real data. However, no clear relationship between the BSP-tree search performance and the intrinsic data properties is known. We present theoretical results which link the search performance of BSP-trees to properties of the data and the tree. This allows us to identify implicit factors influencing BSP-tree search performance — knowing these driving factors allows us to develop successful heuristics for BSP-trees with improved search performance. Algorithm 1 BSP-tree search Input: BSP-tree T on set S, Query q, Desired depth l Output: Candidate neighbor p current tree depth lc ← 0 current tree node Tc ← T while lc < l do if 〈Tc.w, q〉+ Tc.b ≤ 0 then Tc ← Tc.left child else Tc ← Tc.right child end if Increment depth lc ← lc + 1 end while p← argminr∈Tc∩S ‖q − r‖. Each node in a BSP-tree represents a region of the space and each non-leaf node has a left and right child representing a disjoint partition of this region with some separating hyperplane and threshold (w, b). A search query on this tree is usually answered with a depth-first branch-and-bound algorithm. Algorithm 1 presents a simplified version where a search query is answered with a small set of neighbor candidates of any desired size by performing a greedy depth-first tree traversal to a specified depth. This is known as defeatist tree search. We are not aware of any data-dependent analysis of the quality of the results from defeatist BSP-tree search. However, Verma et al. (2009) [2] presented adaptive data-dependent analyses of some BSP-trees for the task of vector quantization. These results show precise connections between the quantization performance of the BSP-trees and certain properties of the data (we will present these data properties in Section 2).",
    "creator" : null
  }
}