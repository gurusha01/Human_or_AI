{
  "name" : "d1f255a373a3cef72e03aa9d980c7eca.pdf",
  "metadata" : {
    "source" : "META",
    "title" : "Online F-Measure Optimization",
    "authors" : [ "Róbert Busa-Fekete", "Balázs Szörényi", "Eyke Hüllermeier" ],
    "emails" : [ "busarobi@upb.de", "szorenyibalazs@gmail.com", "kdembczynski@cs.put.poznan.pl", "eyke@upb.de" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "Being rooted in information retrieval [16], the so-called F-measure is nowadays routinely used as a performance metric in various prediction tasks. Given predictions by = (by\n1 , . . . , by t ) 2 {0, 1}t of t binary labels y = (y\n1\n, . . . , y\nt\n), the F-measure is defined as\nF (y, b y) =\n2\nP t\ni=1\ny\ni by iP\nt\ni=1\ny\ni\n+\nP t\ni=1\nby i\n= 2 · precision(y, by) · recall(y, by) precision(y, by) + recall(y, by) 2 [0, 1] , (1)\nwhere precision(y, by) = P t\ni=1\ny\ni by i /\nP t\ni=1\nby i , recall(y, by) = P t\ni=1\ny\ni by i /\nP t\ni=1\ny\ni , and where 0/0 = 1 by definition. Compared to measures like the error rate in binary classification, maximizing the F-measure enforces a better balance between performance on the minority and majority class; therefore, it is more suitable in the case of imbalanced data. Optimizing for such an imbalanced measure is very important in many real-world applications where positive labels are significantly less frequent than negative ones. It can also be generalized to a weighted harmonic average of precision and recall. Yet, for the sake of simplicity, we stick to the unweighted mean, which is often referred to as the F1-score or the F1-measure.\nGiven the importance and usefulness of the F-measure, it is natural to look for learning algorithms that perform optimally in the sense of this measure. However, optimizing the F-measure is a quite challenging problem, especially because the measure is not decomposable over the binary predictions. This problem has received increasing attention in recent years and has been tackled by several authors [19, 20, 18, 10, 11]. However, most of this work has been done in the standard setting of batch learning.\nIn this paper, we study the problem of F-measure optimization in the setting of online learning [4, 2], which is becoming increasingly popular in machine learning. In fact, there are many applications in which training data is arriving progressively over time, and models need to be updated and maintained incrementally. In our setting, this means that in each round t the learner first outputs a prediction by\nt and then observes the true label y t . Formally, the protocol in round t is as follows: 1. first an instance x\nt 2 X is observed by the learner, 2. then the predicted label by\nt for x t is computed on the basis of the first t instances (x 1 , . . . ,x t ), the t 1 labels (y\n1\n, . . . , y t 1) observed so far, and the corresponding predictions (by1, . . . , byt 1), 3. finally, the label y\nt is revealed to the learner. The goal of the learner is then to maximize\nF\n(t)\n= F ((y\n1\n, . . . , y\nt ), (by 1 , . . . , by t )) (2)\nover time. Optimizing the F-measure in an online fashion is challenging mainly because of the non-decomposability of the measure, and the fact that the by\nt\ncannot be changed after round t.\nAs a potential application of online F-measure optimization consider the recommendation of news from RSS feeds or tweets [1]. Besides, it is worth mentioning that online methods are also relevant in the context of big data and large-scale learning, where the volume of data, despite being finite, prevents from processing each data point more than once [21, 7]. Treating the data as a stream, online algorithms can then be used as single-pass algorithms. Note, however, that single-pass algorithms are evaluated only at the end of the training process, unlike online algorithms that are supposed to learn and predict simultaneously.\nWe propose an online algorithm for F-measure optimization, which is not only very efficient but also easy to implement. Unlike other methods, our algorithm does not require extra validation data for tuning a threshold (that separates between positive and negative predictions), and therefore allows the entire data to be used for training. We provide a formal analysis of the convergence properties of our algorithm and prove its statistical consistency under different assumptions on the learning process. Moreover, first experimental results are presented, showing that our method performs well in practice."
    }, {
      "heading" : "2 Formal Setting",
      "text" : "In this paper, we consider a stochastic setting in which (x 1 , y 1 ), . . . , (x t , y t ) are assumed to be i.i.d. samples from some unknown distribution ⇢(·) on X ⇥ Y , where Y = {0, 1} is the label space and X is some instance space. We denote the marginal distribution of the feature vector X by µ(·).1 Then, the posterior probability of the positive class, i.e., the conditional probability that Y = 1 given X = x, is ⌘(x) = P(Y = 1 |X = x) = ⇢(x,1)\n⇢(x,0)+⇢(x,1) . The prior distribution of class 1 can be written as ⇡\n1 = P(Y = 1) = R x2X ⌘(x) dµ(x).\nLet B = {f : X ! {0, 1}} be the set of all binary classifiers over the set X . The F-measure of a binary classifier f 2 B is calculated as\nF (f) =\n2 R X ⌘(x)f(x) dµ(x)R\nX ⌘(x) dµ(x) + R X f(x) dµ(x) =\n2E [⌘(X)f(X)]\nE [⌘(X)] +E [f(X)] .\nAccording to [19], the expected value of (1) converges to F (f) with t ! 1 when f is used to calculate by, i.e., by\nt\n= f(x\nt ). Thus, lim t!1 E ⇥ F (y 1 , . . . , y t ), (f(x 1 ), . . . , f(x t )) ⇤ = F (f).\nNow, let G = {g : X ! [0, 1]} denote the set of all probabilistic binary classifiers over the set X , and let T ✓ B denote the set of binary classifiers that are obtained by thresholding a classifier g 2 G—that is, classifiers of the form\ng\n⌧ (x) = Jg(x) ⌧K (3) for some threshold ⌧ 2 [0, 1], where J·K is the indicator function that evaluates to 1 if its argument is true and 0 otherwise.\n1X is assumed to exhibit the required measurability properties.\nAccording to [19], the optimal F-score computed as max f2B F (f) can be achieved by a thresholded classifier. More precisely, let us define the thresholded F-measure as\nF (⌧) = F (⌘\n⌧\n) =\n2 R X ⌘(x) J⌘(x) ⌧K dµ(x)R\nX ⌘(x) dµ(x) + R X J⌘(x) ⌧K dµ(x) = 2E [⌘(X) J⌘(X) ⌧K] E [⌘(X)] +E [J⌘(X) ⌧K] (4)\nThen the optimal threshold ⌧⇤ can be obtained as\n⌧ ⇤ = argmax\n0⌧1 F (⌧) . (5)\nClearly, for the classifier in the form of (3) with g(x) = ⌘(x) and ⌧ = ⌧⇤, we have F (g⌧ ) = F (⌧⇤). Then, as shown by [19] (see their Theorem 4), the performance of any binary classifier f 2 B cannot exceed F (⌧⇤), i.e., F (f)  F (⌧⇤) for all f 2 B. Therefore, estimating posteriors first and adjusting a threshold afterward appears to be a reasonable strategy. In practice, this seems to be the most popular way of maximizing the F-measure in a batch mode; we call it the 2-stage F-measure maximization approach, or 2S for short. More specifically, the 2S approach consists of two steps: first, a classifier is trained for estimating the posteriors, and second, a threshold is tuned on the posterior estimates. For the time being, we are not interested in the training of this classifier but focus on the second step, that is, the labelling of instances via thresholding posterior probabilities. For doing this, suppose a finite set D\nN = {(x i , y i )}N i=1\nof labeled instances are given as training information. Moreover, suppose estimates bp\ni\n= g(x\ni ) of the posterior probabilities p i = ⌘(x i )\nare provided by a classifier g 2 G. Next, one might define the F-score obtained by applying the threshold classifier g⌧ on the data D\nN\nas follows:\nF (⌧ ; g,D N ) =\nP N\ni=1\ny\ni J⌧  g(x i )K P\nN\ni=1\ny\ni\n+\nP N\ni=1\nJ⌧  g(x i )K (6)\nIn order to find an optimal threshold ⌧ N 2 argmax 0⌧1 F (⌧ ; g,DN ), it suffices to search the finite set {bp 1 , . . . , bp N }, which requires time O(N logN). In [19], it is shown that F (⌧ ; g,D N )\nP ! F (g ⌧\n) as N ! 1 for any ⌧ 2 (0, 1), and [11] provides an even stronger result: If a classifier gDN is induced from D\nN by an L 1 -consistent learner,2 and a threshold ⌧ N is obtained by maximizing (6) on an independent set D0\nN , then F (g⌧NDN ) P ! F (⌧⇤) as N ! 1 (under mild assumptions on the\ndata distribution)."
    }, {
      "heading" : "3 Maximizing the F-Measure on a Population Level",
      "text" : "In this section we assume that the data distribution is known. According to the analysis in the previous section, optimizing the F-measure boils down to finding the optimal threshold ⌧⇤. At this point, an observation is in order. Remark 1. In general, the function F (⌧) is neither convex nor concave. For example, when X is finite, then the denominator and enumerator of (4) are step functions, whence so is F (⌧). Therefore, gradient methods cannot be applied for finding ⌧⇤.\nNevertheless, ⌧⇤ can be found based on a recent result of [20], who show that finding the root of\nh(⌧) =\nZ\nx2X max (0, ⌘(x) ⌧) dµ(x) ⌧⇡ 1\n(7)\nis a necessary and sufficient condition for optimality. Note that h(⌧) is continuous and strictly decreasing, with h(0) = ⇡\n1 and h(1) = ⇡ 1 . Therefore, h(⌧) = 0 has a unique solution which is ⌧⇤. Moreover, [20] also prove an interesting relationship between the optimal threshold and the F-measure induced by that threshold: F (⌧⇤) = 2⌧⇤.\nThe marginal distribution of the feature vectors, µ(·), induces a distribution ⇣(·) on the posteriors: ⇣(p) = R x2X J⌘(x) = pK dµ(x) for all p 2 [0, 1]. By definition, J⌘(x) = pK is the Radon-Nikodym derivative of dµ d⇣ , and ⇣(p) the density of observing an instance x for which the probability of the\n2A learning algorithm, viewed as a map from samples DN to classifiers gDN , is called L1-consistent w.r.t. the data distribution ⇢ if limN!1 PDN⇠⇢ ⇣R x2X |gDN (x) ⌘(x)| dµ(x) > ✏ ⌘ = 0 for all ✏ > 0.\npositive label is p. We shall write concisely d⌫(p) = ⇣(p) dp. Since ⌫(·) is an induced probability measure, the measurable transformation allows us to rewrite the notions introduced above in terms of ⌫(·) instead of µ(·)—see, for example, Section 1.4 in [17]. For example, the prior probabilityR X ⌘(x) dµ can be written equivalently as R 1 0 p d⌫(p). Likewise, (7) can be rewritten as follows:\nh(⌧) =\nZ 1\n0\nmax (0, p ⌧) d⌫(p) ⌧ Z 1\n0\np d⌫(p) =\nZ 1\n⌧\np ⌧ d⌫(p) ⌧ Z 1\n0\np d⌫(p)\n=\nZ 1\n⌧\np d⌫(p) ⌧ Z 1\n⌧\n1 d⌫(p) Z 1\n0\np d⌫(p)\n(8)\nEquation (8) will play a central role in our analysis. Note that precise knowledge of ⌫(·) suffices to find the maxima of F (⌧). This is illustrated by two examples presented in Appendix E, in which we assume specific distributions for ⌫(·), namely uniform and Beta distributions."
    }, {
      "heading" : "4 Algorithmic Solution",
      "text" : "In this section, we provide an algorithmic solution to the online F-measure maximization problem. For this, we shall need in each round t some classifier g\nt 2 G that provides us with some estimate bp t = g t (x t ) of the probability ⌘(x t\n). We would like to stress again that the focus of our analysis is on optimal thresholding instead of classifier learning. Thus, we assume the sequence of classifiers g\n1\n, g\n2 , . . . to be produced by an external online learner, for example, logistic regression trained by stochastic gradient descent.\nAs an aside, we note that F-measure maximization is not directly comparable with the task that is most often considered and analyzed in online learning, namely regret minimization [4]. This is mainly because the F-measure is a non-decomposable performance metric. In fact, the cumulative regret is a summation of a per-round regret r\nt , which only depends on the prediction by t and the true outcome y\nt [11]. In the case of the F-measure, the score F (t) , and therefore the optimal prediction by t\n, depends on the entire history, that is, all observations and decisions made by the learner till time t. This is discussed in more detail in Section 6.\nThe most naive way of forecasting labels is to implement online learning as repeated batch learning, that is, to apply a batch learner (such as 2S) to D\nt = {(x i , y i )}t i=1\nin each time step t. Obviously, however, this strategy is prohibitively expensive, as it requires storage of all data points seen so far (at least in mini-batches), as well as optimization of the threshold ⌧\nt and re-computation of the classifier g\nt\non an ever growing number of examples.\nIn the following, we propose a more principled technique to maximize the online F-measure. Our approach is based on the observation that h(⌧⇤) = 0 and h(⌧)(⌧ ⌧⇤) < 0 for any ⌧ 2 [0, 1] such that ⌧ 6= ⌧⇤ [20]. Moreover, it is a monotone decreasing continuous function. Therefore, finding the optimal threshold ⌧⇤ can be viewed as a root finding problem. In practice, however, h(⌧) is not known and can only be estimated. Let us define h ⌧, y, by = yby ⌧ (y + by) . For now, assume ⌘(x) to be known and write concisely bh(⌧) = h(⌧, y, J⌘(x) ⌧K). We can compute the expectation of b h(⌧) with respect to the data distribution for a fixed threshold ⌧ as follows:\nE h b h(⌧) i = E [h(⌧, y, J⌘(x) ⌧K)] = E [y J⌘(x) ⌧K ⌧ (y + J⌘(x) ⌧K)]\n=\nZ 1\n0\np Jp ⌧K d⌫(p) ⌧ ✓Z 1\n0\np+ Jp ⌧K d⌫(p) ◆\n=\nZ 1\n⌧\np d⌫(p) ⌧ Z 1\n0\np d⌫(p) +\nZ 1\n⌧\n1 d⌫(p) = h(⌧) (9)\nThus, an unbiased estimate of h(⌧) can be obtained by evaluating bh(⌧) for an instance x. This suggests designing a stochastic approximation algorithm that is able to find the root of h(·) similarly to the Robbins-Monro algorithm [12]. Exploiting the relationship between the optimal F-measure and the optimal threshold, F (⌧⇤) = 2⌧⇤, we define the threshold in time step t as\n⌧\nt\n=\n1\n2\nF\n(t)\n=\na\nt\nb\nt\nwhere a t =\ntX\ni=1\ny\ni by i , b t =\ntX\ni=1\ny\ni\n+\ntX\ni=1\nby i . (10)\nWith this threshold, the first differences between thresholds, i.e. ⌧ t+1 ⌧ t , can be written as follows. Proposition 2. If thresholds ⌧\nt are defined according to (10) and by t+1 as J⌘(x t+1 ) > ⌧ t K, then (⌧\nt+1 ⌧ t )b t+1 = h(⌧ t , y t+1 , by t+1 ) . (11)\nThe proof of Prop. 2 is deferred to Appendix A. According to (11), the method we obtain “almost” coincides with the update rule of the Robbins-Monro algorithm. There are, however, some notable differences. In particular, the sequence of coefficients, namely the values 1/b\nt+1 , does not consist of predefined real values converging to zero (as fast as 1/t). Instead, it consists of random quantities that depend on the history, namely the observed labels y\n1\n, . . . , y\nt and the predicted labels by 1 , . . . , by t . Moreover, these “coefficients” are not independent of h(⌧\nt\n, y\nt+1 , by t+1 ) either. In spite of these additional difficulties, we shall present a convergence analysis of our algorithm in the next section.\nAlgorithm 1 OFO 1: Select g\n0 from B, and set ⌧ 0 = 0\n2: for t = 1!1 do 3: Observe the instance x\nt\n4: bp t\ng t 1(xt) . estimate posterior\n5: by t\nJbp t ⌧ t 1K . current prediction\n6: Observe label y t 7: Calculate F (t) =\n2at bt and ⌧ t = at bt\n8: g t\nA(g t 1,xt, yt) . update the classifier\n9: return ⌧ T\nThe pseudo-code of our online F-measure optimization algorithm, called Online F-measure Optimizer (OFO), is shown in Algorithm 1. The forecast rule can be written in the form of by t = Jp t ⌧ t 1K for xt where the threshold is defined in (10) and p t = ⌘(x t\n). In practice, we use bp\nt\n= g t 1(xt) as an estimate of the true posterior p\nt . In line 8 of the code, an online learner A : G ⇥ X ⇥ Y ! G is assumed, which produces classifiers g\nt by incrementally updating the current classifier with the newly observed example, i.e., g\nt = A(g t 1,xt, yt).\nIn our experimental study, we shall test and compare various state-of-the-art online learners as possible choices for A."
    }, {
      "heading" : "5 Consistency",
      "text" : "In this section, we provide an analysis of the online F-measure optimizer proposed in the previous section. More specifically, we show the statistical consistency of the OFO algorithm: The sequence of online thresholds and F-scores produced by this algorithm converge, respectively, to the optimal threshold ⌧⇤ and the optimal thresholded F-score F (⌧⇤) in probability. As a first step, we prove this result under the assumption of knowledge about the true posterior probabilities; then, in a second step, we consider the case of estimated posteriors. Theorem 3. Assume the posterior probabilities p\nt\n= ⌘(x\nt ) of the positive class to be known in each step of the online learning process. Then, the sequences of thresholds ⌧\nt and online F-scores F (t)\nproduced by OFO both converge in probability to their optimal values ⌧⇤ and F (⌧⇤), respectively: For any ✏ > 0, we have lim t!1 P |⌧ t ⌧⇤| > ✏ = 0 and lim t!1 P |F (t)\nF (⌧⇤)| > ✏ = 0. Here is a sketch of the proof of this theorem, the details of which can be found in the supplementary material (Appendix B): • We focus on {⌧\nt }1 t=1\n, which is a stochastic process the filtration of which is defined as F\nt = {y 1 , . . . , y t , by 1 , . . . , by t }. For this filtration, one can show that bh(⌧ t ) is F t\n-measurable and E h b h(⌧\nt )|F t i = h(⌧ t ) based on (9).\n• As a first step, we can decompose the update rule given in (11) as follows: E h 1\nbt+1\nb h(⌧\nt\n) F t i =\n1\nbt+2 h(⌧ t\n) +O ⇣ 1\nb 2 t\n⌘ conditioned on the filtration F\nt\n(see Lemma 7).\n• Next, we show that the sequence 1/b t behaves similarly to 1/t, in the sense that P1\nt=1\nE ⇥ 1/b 2\nt\n⇤ <\n1 (see Lemma 8). Moreover, one can show that P1 t=1 E [1/b t ] P1 t=1 1\n2t =1. • Although h(⌧) is not differentiable on [0, 1] in general (it can be piecewise linear, for example),\none can show that its finite difference is between 1 ⇡ 1 and ⇡ 1 (see Proposition 9 in the appendix). As a consequence of this result, our process defined in (11) does not get stuck even close to ⌧⇤.\n• The main part of the proof is devoted to analyzing the properties of the sequence of t =\nE ⇥ (⌧\nt ⌧⇤)2⇤ for which we show that lim t!1 t = 0, which is sufficient for the statement\nof the theorem. Our proof follows the convergence analysis of [12]. Nevertheless, our analysis essentially differs from theirs, since in our case, the coefficients cannot be chosen freely. Instead, as explained before, they depend on the labels observed and predicted so far. In addition, the noisy estimation of h(·) depends on the labels, too, but the decomposition step allows us to handle this undesired effect.\nRemark 4. In principle, the Robbins-Monro algorithm can be applied for finding the root of h(·) as well. This yields an update rule similar to (11), with 1/b\nt+1 replaced by C/t for a constant C > 0. In this case, however, the convergence of the online F-measure is difficult to analyze (if at all), because the empirical process cannot be written in a nice form. Moreover, as it has been found in the analysis, the coefficient C should be set ⇡ 1/⇡\n1 (see Proposition 9 and the choice of {k t } at the end of the proof of Theorem 3). Yet, since ⇡\n1 is not known beforehand, it needs to be estimated from the samples, which implies that the coefficients are not independent of the noisy evaluations of h(·)—just like in the case of the OFO algorithm. Interestingly, OFO seems to properly adjust the values 1/b\nt+1 in an adaptive manner (b t is a sum of two terms, the first of which is t⇡ 1 in expectation), which is a very nice property of the algorithm. Empirically, based on synthetic data, we found the performance of the original Robbins-Monro algorithm to be on par with OFO.\nAs already announced, we are now going to relax the assumption of known posterior probabilities p\nt\n= ⌘(x\nt ). Instead, estimates bp t = g t (x t ) ⇡ p t of these probabilities are obtained by classifiers g t\nthat are provided by the external online learner in Algorithm 1. More concretely, assume an online learner A : G ⇥ X ⇥ Y ! G, where G is the set of probabilistic classifiers. Given a current model g\nt and a new example (x t , y t ), this learner produces an updated classifier g t+1 = A(g t ,x t , y t\n). Showing a consistency result for this scenario requires some assumptions on the online learner. With this formal definition of online learner, a statistical consistency result similar to Theorem 3 can be shown. The proof of the following theorem is again deferred to supplementary material (Appendix C). Theorem 5. Assume that the classifiers (g\nt\n) 1 t=1 in the OFO framework are provided by an online learner for which the following holds: There is a > 0 such that E ⇥R x2X |⌘(x) gt(x)| dµ(x) ⇤ = O(t ) . Then, F (t) P! F (⌧⇤) and ⌧ t\nP! ⌧⇤. This theorem’s requirement on the online learner is stronger than what is assumed by [11] and recalled in Footnote 2. First, the learner is trained online and not in a batch mode. Second, we also require that the L\n1\nerror of the learner goes to 0 with a convergence rate of order t .\nIt might be interesting to note that a universal rate of convergence cannot be established without assuming regularity properties of the data distribution, such as smoothness via absolute continuity. Results of that kind are beyond the scope of this study. Instead, we refer the reader to [5, 6] for details on L\n1\nconsistency and its connection to the rate of convergence."
    }, {
      "heading" : "6 Discussion",
      "text" : "Regret optimization and stochastic approximation: Stochastic approximation algorithms can be applied for finding the optimum of (4) or, equivalently, to find the unique root of (8) based on noisy evaluations—the latter formulation is better suited for the classic version of the Robbins-Monro root finding algorithm [12]. These algorithms are iterative methods whose analysis focuses on the difference of F (⌧\nt ) from F (⌧⇤), where ⌧ t denotes the estimate of ⌧⇤ in iteration t, whereas our online setting is concerned with the distance of F ((y\n1\n, . . . , y\nt ), (by 1 , . . . , by t )) from F (⌧⇤), where by i\nis the prediction for y\ni in round i. This difference is crucial because F (⌧ t ) only depends on ⌧ t and in addition, if ⌧\nt is close to ⌧⇤ then F (⌧ t ) is also close to F (⌧⇤) (see [19] for concentration properties), whereas in the online F-measure optimization setup, F ((y\n1\n, . . . , y\nt ), (by 1 , . . . , by t )) can be very different from F (⌧⇤) even if the current estimate ⌧\nt is close to ⌧⇤ in case the number of previous incorrect predictions is large.\nIn online learning and online optimization it is common to work with the notion of (cumulative) regret. In our case, this notion could be interpreted either as P t\ni=1\n|F ((y 1 , . . . , y i ), (by 1 , . . . , by i\n)) F (⌧ ⇤ )| or as Pt\ni=1\n|y i by i |. After division by t, the former becomes the average accuracy of the F-measure over time and the latter the accuracy of our predictions. The former is hard to interpret because |F ((y\n1\n, . . . , y\ni ), (by 1 , . . . , by i )) F (⌧⇤)| itself is an aggregate measure of our performance\nover the first t rounds, which thus makes no sense to aggregate again. The latter, on the other hand, differs qualitatively from our ultimate goal; in fact, |F ((y\n1\n, . . . , y\nt ), (by 1 , . . . , by t )) F (⌧⇤)| is the alternate measure that we are aiming to optimize for instead of the accuracy.\nOnline optimization of non-decomposable measures: Online optimization of the F-measure can be seen as a special case of optimizing non-decomposable loss functions as recently considered by [9]. Their framework essentially differs from ours in several points. First, regarding the data generation process, the adversarial setup with oblivious adversary is assumed, unlike our current study where a stochastic setup is assumed. From this point of view, their assumption is more general since the oblivious adversary captures the stochastic setup. Second, the set of classifiers is restricted to differentiable parametric functions, which may not include the F-measure maximizer. Therefore, their proof of vanishing regret does in general not imply convergence to the optimal F-score. Seen from this point of view, their result is weaker than our proof of consistency (i.e., convergence to the optimal F-measure in probability if the posterior estimates originate from a consistent learner). There are some other non-decomposable performance measures which are intensively used in many practical applications. Their optimization had already been investigated in the online or one-pass setup. The most notable such measure might be the area under the ROC curve (AUC) which had been investigated in an online learning framework by [21, 7]."
    }, {
      "heading" : "7 Experiments",
      "text" : "In this section, the performance of the OFO algorithm is evaluated in a one-pass learning scenario on benchmark datasets, and compared with the performance of the 2-stage F-measure maximization approach (2S) described in Section 2. We also assess the rate of convergence of the OFO algorithm in a pure online learning setup.3\nThe online learner A in OFO was implemented in different ways, using Logistic Regression (LOGREG), the classical Perceptron algorithm (PERCEPTRON) [13] and an online linear SVM called PEGASOS [14]. In the case of LOGREG, we applied the algorithm introduced in [15] which handles L1 and L2 regularization. The hyperparameters of the methods and the validation procedures are described below and in more detail in Appendix D. If necessary, the raw outputs of the learners were turned into probability estimates, i.e., they were rescaled to [0, 1] using logistic transform.\nWe used in the experiments nine datasets taken from the LibSVM repository of binary classification tasks.4 Many of these datasets are commonly used as benchmarks in information retrieval where the F-score is routinely applied for model selection. In addition, we also used the textual data released in the Replab challenge of identifying relevant tweets [1]. We generated the features used by the winner team [8]. The main statistics of the datasets are summarized in Table 1.\n3Additional results of experiments conducted on synthetic data are presented in Appendix F. 4 http://www.csie.ntu.edu.tw/\n˜\ncjlin/libsvmtools/datasets/binary.html\nOne-pass learning. In one-pass learning, the learner is allowed to read the training data only once, whence online learners are commonly used in this setting. We run OFO along with the three classifiers trained on 80% of the data. The learner obtained by OFO is of the form g⌧t\nt , where t is the number of training samples. The rest 20% of the data was used to evaluate g⌧t\nt in terms of the F-measure. We run every method on 10 randomly shuffled versions of the data and averaged results. The means of the F-scores computed on the test data are shown in Table 1. As a baseline, we applied the 2S approach. More concretely, we trained the same set of learners on 60% of the data and validated the threshold on 20% by optimizing (6). Since both approaches are consistent, the performance of OFO should be on par with the performance of 2S. This is confirmed by the results, in which significant differences are observed in only 7 of 30 cases. These differences in performance might be explained by the finiteness of the data. The advantage of our approach over 2S is that there is no need of validation and the data needs to be read only once, therefore it can be applied in a pure one-pass learning scenario. The hyperparameters of the learning methods are chosen based on the performance of 2S. We tuned the hyperparameters in a wide range of values which we report in Appendix D.\nOnline learning. The OFO algorithm has also been evaluated in the online learning scenario in terms of the online F-measure (2). The goal of this experiment is to assess the convergence rate of OFO. Since the optimal F-measure is not known for the datasets, we considered the test F-scores reported in Table 1. The results are plotted in Figure 1 for four benchmark datasets (the plots for the remaining datasets can be found in Appendix G). As can be seen, the online F-score converges to the test F-score obtained in one-pass evalaution in almost every case. There are some exceptions in the case of PEGASOS and PERCEPTRON. This might be explained by the fact that SVM-based methods as well as the PERCEPTRON tend to produce poor probability estimates in general (which is a main motivation for calibration methods turning output scores into valid probabilities [3])."
    }, {
      "heading" : "8 Conclusion and Future Work",
      "text" : "This paper studied the problem of online F-measure optimization. Compared to many conventional online learning tasks, this is a specifically challenging problem, mainly because of the nondecomposable nature of the F-measure. We presented a simple algorithm that converges to the optimal F-score when the posterior estimates are provided by a sequence of classifiers whose L\n1\nerror converges to zero as fast as t for some > 0. As a key feature of our algorithm, we note that it is a purely online approach; moreover, unlike approaches such as 2S, there is no need for a hold-out validation set in batch mode. Our promising results from extensive experiments validate the empirical efficacy of our algorithm.\nFor future work, we plan to extend our online optimization algorithm to a broader family of complex performance measures which can be expressed as ratios of linear combinations of true positive, false positive, false negative and true negative rates [10]; the F-measure also belongs to this family. Moreover, going beyond consistency, we plan to analyze the rate of convergence of our OFO algorithm. This might be doable thanks to several nice properties of the function h(⌧). Finally, an intriguing question is what can be said about the case when some bias is introduced because the classifier g\nt\ndoes not converge to ⌘.\nAcknowledgments. Krzysztof Dembczyński is supported by the Polish National Science Centre under grant no. 2013/09/D/ST6/03917."
    } ],
    "references" : [ {
      "title" : "Overview of RepLab 2013: Evaluating online reputation monitoring systems",
      "author" : [ "E. Amigó", "J.C. de Albornoz", "I. Chugur", "A. Corujo", "J. Gonzalo", "T. Martı́n-Wanton", "E. Meij", "M. de Rijke", "D. Spina" ],
      "venue" : "In CLEF,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2013
    }, {
      "title" : "Regret analysis of stochastic and nonstochastic multi-armed bandit problems",
      "author" : [ "S. Bubeck", "N. Cesa-Bianchi" ],
      "venue" : "Foundations and Trends in Machine Learning, 5(1):1–122,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : null,
      "year" : 2012
    }, {
      "title" : "Tune and mix: Learning to rank using ensembles of calibrated multi-class classifiers",
      "author" : [ "R. Busa-Fekete", "B. Kégl", "T. Éltető", "Gy. Szarvas" ],
      "venue" : "Machine Learning,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2013
    }, {
      "title" : "Prediction, Learning, and Games",
      "author" : [ "N. Cesa-Bianchi", "G. Lugosi" ],
      "venue" : "Cambridge University Press,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : null,
      "year" : 2006
    }, {
      "title" : "Nonparametric Density Estimation: The L 1  View",
      "author" : [ "L. Devroye", "L. Györfi" ],
      "venue" : "Wiley, NY,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : null,
      "year" : 1985
    }, {
      "title" : "A Probabilistic Theory of Pattern Recognition",
      "author" : [ "L. Devroye", "L. Györfi", "G. Lugosi" ],
      "venue" : "Springer, NY,",
      "citeRegEx" : "6",
      "shortCiteRegEx" : null,
      "year" : 1996
    }, {
      "title" : "One-pass AUC optimization",
      "author" : [ "W. Gao", "R. Jin", "S. Zhu", "Z.-H. Zhou" ],
      "venue" : "ICML, volume 30:3, pages 906–914,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : null,
      "year" : 2013
    }, {
      "title" : "Filtering and polarity detection for reputation management on tweets",
      "author" : [ "V. Hangya", "R. Farkas" ],
      "venue" : "Working Notes of CLEF 2013 Evaluation Labs and Workshop,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : null,
      "year" : 2013
    }, {
      "title" : "Online and stochastic gradient methods for nondecomposable loss functions",
      "author" : [ "P. Kar", "H. Narasimhan", "P. Jain" ],
      "venue" : "NIPS,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : null,
      "year" : 2014
    }, {
      "title" : "Consistent binary classification with generalized performance metrics",
      "author" : [ "N. Nagarajan", "S. Koyejo", "R. Ravikumar", "I. Dhillon" ],
      "venue" : "NIPS, pages 2744–2752,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : null,
      "year" : 2014
    }, {
      "title" : "On the statistical consistency of plug-in classifiers for non-decomposable performance measures",
      "author" : [ "H. Narasimhan", "R. Vaish", "Agarwal S" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2014
    }, {
      "title" : "A stochastic approximation method",
      "author" : [ "H. Robbins", "S. Monro" ],
      "venue" : "Ann. Math. Statist., 22(3):400– 407,",
      "citeRegEx" : "12",
      "shortCiteRegEx" : null,
      "year" : 1951
    }, {
      "title" : "The perceptron: A probabilistic model for information storage and organization in the brain",
      "author" : [ "F. Rosenblatt" ],
      "venue" : "Psychological Review, 65(6):386–408,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : null,
      "year" : 1958
    }, {
      "title" : "Pegasos: Primal estimated sub-gradient solver for SVM",
      "author" : [ "S. Shalev-Shwartz", "Y. Singer", "N. Srebro" ],
      "venue" : "ICML, pages 807–814,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : null,
      "year" : 2007
    }, {
      "title" : "Stochastic gradient descent training for L1regularized log-linear models with cumulative penalty",
      "author" : [ "Y. Tsuruoka", "J. Tsujii", "S. Ananiadou" ],
      "venue" : "ACL, pages 477–485,",
      "citeRegEx" : "15",
      "shortCiteRegEx" : null,
      "year" : 2009
    }, {
      "title" : "Foundation and evalaution",
      "author" : [ "C.J. van Rijsbergen" ],
      "venue" : "Journal of Documentation,",
      "citeRegEx" : "16",
      "shortCiteRegEx" : "16",
      "year" : 1974
    }, {
      "title" : "Probability Theory",
      "author" : [ "S.R.S. Varadhan" ],
      "venue" : "New York University,",
      "citeRegEx" : "17",
      "shortCiteRegEx" : null,
      "year" : 2000
    }, {
      "title" : "On the Bayesoptimality of F-measure maximizers",
      "author" : [ "W. Waegeman", "K. Dembczyński", "A. Jachnik", "W. Cheng", "E. Hüllermeier" ],
      "venue" : "Journal of Machine Learning Research, 15(1):3333– 3388,",
      "citeRegEx" : "18",
      "shortCiteRegEx" : null,
      "year" : 2014
    }, {
      "title" : "Optimizing F-measure: A tale of two approaches",
      "author" : [ "N. Ye", "K.M.A. Chai", "W.S. Lee", "H.L. Chieu" ],
      "venue" : "ICML,",
      "citeRegEx" : "19",
      "shortCiteRegEx" : null,
      "year" : 2012
    }, {
      "title" : "Beyond Fano’s inequality: Bounds on the optimal F-score, BER, and cost-sensitive risk and their implications",
      "author" : [ "M. Zhao", "N. Edakunni", "A. Pocock", "G. Brown" ],
      "venue" : "JMLR, pages 1033–1090,",
      "citeRegEx" : "20",
      "shortCiteRegEx" : null,
      "year" : 2013
    }, {
      "title" : "Online AUC maximization",
      "author" : [ "P. Zhao", "S.C.H. Hoi", "R. Jin", "T. Yang" ],
      "venue" : "ICML, pages 233–240,",
      "citeRegEx" : "21",
      "shortCiteRegEx" : null,
      "year" : 2011
    } ],
    "referenceMentions" : [ {
      "referenceID" : 15,
      "context" : "1 Introduction Being rooted in information retrieval [16], the so-called F-measure is nowadays routinely used as a performance metric in various prediction tasks.",
      "startOffset" : 53,
      "endOffset" : 57
    }, {
      "referenceID" : 18,
      "context" : "This problem has received increasing attention in recent years and has been tackled by several authors [19, 20, 18, 10, 11].",
      "startOffset" : 103,
      "endOffset" : 123
    }, {
      "referenceID" : 19,
      "context" : "This problem has received increasing attention in recent years and has been tackled by several authors [19, 20, 18, 10, 11].",
      "startOffset" : 103,
      "endOffset" : 123
    }, {
      "referenceID" : 17,
      "context" : "This problem has received increasing attention in recent years and has been tackled by several authors [19, 20, 18, 10, 11].",
      "startOffset" : 103,
      "endOffset" : 123
    }, {
      "referenceID" : 9,
      "context" : "This problem has received increasing attention in recent years and has been tackled by several authors [19, 20, 18, 10, 11].",
      "startOffset" : 103,
      "endOffset" : 123
    }, {
      "referenceID" : 10,
      "context" : "This problem has received increasing attention in recent years and has been tackled by several authors [19, 20, 18, 10, 11].",
      "startOffset" : 103,
      "endOffset" : 123
    }, {
      "referenceID" : 3,
      "context" : "In this paper, we study the problem of F-measure optimization in the setting of online learning [4, 2], which is becoming increasingly popular in machine learning.",
      "startOffset" : 96,
      "endOffset" : 102
    }, {
      "referenceID" : 1,
      "context" : "In this paper, we study the problem of F-measure optimization in the setting of online learning [4, 2], which is becoming increasingly popular in machine learning.",
      "startOffset" : 96,
      "endOffset" : 102
    }, {
      "referenceID" : 0,
      "context" : "As a potential application of online F-measure optimization consider the recommendation of news from RSS feeds or tweets [1].",
      "startOffset" : 121,
      "endOffset" : 124
    }, {
      "referenceID" : 20,
      "context" : "Besides, it is worth mentioning that online methods are also relevant in the context of big data and large-scale learning, where the volume of data, despite being finite, prevents from processing each data point more than once [21, 7].",
      "startOffset" : 227,
      "endOffset" : 234
    }, {
      "referenceID" : 6,
      "context" : "Besides, it is worth mentioning that online methods are also relevant in the context of big data and large-scale learning, where the volume of data, despite being finite, prevents from processing each data point more than once [21, 7].",
      "startOffset" : 227,
      "endOffset" : 234
    }, {
      "referenceID" : 18,
      "context" : "According to [19], the expected value of (1) converges to F (f) with t ! 1 when f is used to calculate b y, i.",
      "startOffset" : 13,
      "endOffset" : 17
    }, {
      "referenceID" : 18,
      "context" : "According to [19], the optimal F-score computed as max f2B F (f) can be achieved by a thresholded classifier.",
      "startOffset" : 13,
      "endOffset" : 17
    }, {
      "referenceID" : 18,
      "context" : "Then, as shown by [19] (see their Theorem 4), the performance of any binary classifier f 2 B cannot exceed F (⌧⇤), i.",
      "startOffset" : 18,
      "endOffset" : 22
    }, {
      "referenceID" : 18,
      "context" : "In [19], it is shown that F (⌧ ; g,D N ) P !",
      "startOffset" : 3,
      "endOffset" : 7
    }, {
      "referenceID" : 10,
      "context" : "F (g ⌧ ) as N ! 1 for any ⌧ 2 (0, 1), and [11] provides an even stronger result: If a classifier gDN is induced from D N by an L 1 -consistent learner,2 and a threshold ⌧ N is obtained by maximizing (6) on an independent set D0",
      "startOffset" : 42,
      "endOffset" : 46
    }, {
      "referenceID" : 19,
      "context" : "Nevertheless, ⌧⇤ can be found based on a recent result of [20], who show that finding the root of",
      "startOffset" : 58,
      "endOffset" : 62
    }, {
      "referenceID" : 19,
      "context" : "Moreover, [20] also prove an interesting relationship between the optimal threshold and the F-measure induced by that threshold: F (⌧⇤) = 2⌧⇤.",
      "startOffset" : 10,
      "endOffset" : 14
    }, {
      "referenceID" : 3,
      "context" : "As an aside, we note that F-measure maximization is not directly comparable with the task that is most often considered and analyzed in online learning, namely regret minimization [4].",
      "startOffset" : 180,
      "endOffset" : 183
    }, {
      "referenceID" : 10,
      "context" : "In fact, the cumulative regret is a summation of a per-round regret r t , which only depends on the prediction b y t and the true outcome y t [11].",
      "startOffset" : 142,
      "endOffset" : 146
    }, {
      "referenceID" : 19,
      "context" : "Our approach is based on the observation that h(⌧⇤) = 0 and h(⌧)(⌧ ⌧⇤) < 0 for any ⌧ 2 [0, 1] such that ⌧ 6= ⌧⇤ [20].",
      "startOffset" : 112,
      "endOffset" : 116
    }, {
      "referenceID" : 11,
      "context" : "This suggests designing a stochastic approximation algorithm that is able to find the root of h(·) similarly to the Robbins-Monro algorithm [12].",
      "startOffset" : 140,
      "endOffset" : 144
    }, {
      "referenceID" : 11,
      "context" : "Our proof follows the convergence analysis of [12].",
      "startOffset" : 46,
      "endOffset" : 50
    }, {
      "referenceID" : 10,
      "context" : "This theorem’s requirement on the online learner is stronger than what is assumed by [11] and recalled in Footnote 2.",
      "startOffset" : 85,
      "endOffset" : 89
    }, {
      "referenceID" : 4,
      "context" : "Instead, we refer the reader to [5, 6] for details on L 1 consistency and its connection to the rate of convergence.",
      "startOffset" : 32,
      "endOffset" : 38
    }, {
      "referenceID" : 5,
      "context" : "Instead, we refer the reader to [5, 6] for details on L 1 consistency and its connection to the rate of convergence.",
      "startOffset" : 32,
      "endOffset" : 38
    }, {
      "referenceID" : 11,
      "context" : "6 Discussion Regret optimization and stochastic approximation: Stochastic approximation algorithms can be applied for finding the optimum of (4) or, equivalently, to find the unique root of (8) based on noisy evaluations—the latter formulation is better suited for the classic version of the Robbins-Monro root finding algorithm [12].",
      "startOffset" : 329,
      "endOffset" : 333
    }, {
      "referenceID" : 18,
      "context" : "This difference is crucial because F (⌧ t ) only depends on ⌧ t and in addition, if ⌧ t is close to ⌧⇤ then F (⌧ t ) is also close to F (⌧⇤) (see [19] for concentration properties), whereas in the online F-measure optimization setup, F ((y 1 , .",
      "startOffset" : 146,
      "endOffset" : 150
    }, {
      "referenceID" : 8,
      "context" : "Online optimization of non-decomposable measures: Online optimization of the F-measure can be seen as a special case of optimizing non-decomposable loss functions as recently considered by [9].",
      "startOffset" : 189,
      "endOffset" : 192
    }, {
      "referenceID" : 20,
      "context" : "The most notable such measure might be the area under the ROC curve (AUC) which had been investigated in an online learning framework by [21, 7].",
      "startOffset" : 137,
      "endOffset" : 144
    }, {
      "referenceID" : 6,
      "context" : "The most notable such measure might be the area under the ROC curve (AUC) which had been investigated in an online learning framework by [21, 7].",
      "startOffset" : 137,
      "endOffset" : 144
    }, {
      "referenceID" : 12,
      "context" : "3 The online learner A in OFO was implemented in different ways, using Logistic Regression (LOGREG), the classical Perceptron algorithm (PERCEPTRON) [13] and an online linear SVM called PEGASOS [14].",
      "startOffset" : 149,
      "endOffset" : 153
    }, {
      "referenceID" : 13,
      "context" : "3 The online learner A in OFO was implemented in different ways, using Logistic Regression (LOGREG), the classical Perceptron algorithm (PERCEPTRON) [13] and an online linear SVM called PEGASOS [14].",
      "startOffset" : 194,
      "endOffset" : 198
    }, {
      "referenceID" : 14,
      "context" : "In the case of LOGREG, we applied the algorithm introduced in [15] which handles L1 and L2 regularization.",
      "startOffset" : 62,
      "endOffset" : 66
    }, {
      "referenceID" : 0,
      "context" : "In addition, we also used the textual data released in the Replab challenge of identifying relevant tweets [1].",
      "startOffset" : 107,
      "endOffset" : 110
    }, {
      "referenceID" : 7,
      "context" : "We generated the features used by the winner team [8].",
      "startOffset" : 50,
      "endOffset" : 53
    }, {
      "referenceID" : 2,
      "context" : "This might be explained by the fact that SVM-based methods as well as the PERCEPTRON tend to produce poor probability estimates in general (which is a main motivation for calibration methods turning output scores into valid probabilities [3]).",
      "startOffset" : 238,
      "endOffset" : 241
    }, {
      "referenceID" : 9,
      "context" : "For future work, we plan to extend our online optimization algorithm to a broader family of complex performance measures which can be expressed as ratios of linear combinations of true positive, false positive, false negative and true negative rates [10]; the F-measure also belongs to this family.",
      "startOffset" : 250,
      "endOffset" : 254
    } ],
    "year" : 2015,
    "abstractText" : "The F-measure is an important and commonly used performance metric for binary prediction tasks. By combining precision and recall into a single score, it avoids disadvantages of simple metrics like the error rate, especially in cases of imbalanced class distributions. The problem of optimizing the F-measure, that is, of developing learning algorithms that perform optimally in the sense of this measure, has recently been tackled by several authors. In this paper, we study the problem of F-measure maximization in the setting of online learning. We propose an efficient online algorithm and provide a formal analysis of its convergence properties. Moreover, first experimental results are presented, showing that our method performs well in practice.",
    "creator" : null
  }
}