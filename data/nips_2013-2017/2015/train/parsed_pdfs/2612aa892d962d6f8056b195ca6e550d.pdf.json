{
  "name" : "2612aa892d962d6f8056b195ca6e550d.pdf",
  "metadata" : {
    "source" : "META",
    "title" : "Interactive Control of Diverse Complex Characters with Neural Networks",
    "authors" : [ "Igor Mordatch", "Kendall Lowrey", "Galen Andrew", "Zoran Popovic", "Emanuel Todorov" ],
    "emails" : [ "mordatch@cs.washington.edu", "lowrey@cs.washington.edu", "galen@cs.washington.edu", "zoran@cs.washington.edu", "todorov@cs.washington.edu" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "Interactive real-time controllers that are capable of generating complex, stable and realistic movements have many potential applications including robotic control, animation and gaming. They can also serve as computational models in biomechanics and neuroscience. Traditional methods for designing such controllers are time-consuming and largely manual, relying on motion capture datasets or task-specific state machines. Our goal is to automate this process, by developing universal synthesis methods applicable to arbitrary behaviors, body morphologies, online changes in task objectives, perturbations due to noise and modeling errors. This is also the ambitious goal of much work in Reinforcement Learning and stochastic optimal control, however the goal has rarely been achieved in continuous high-dimensional spaces involving complex dynamics.\nDeep learning techniques on modern computers have produced remarkable results on a wide range of tasks, using methods that are not significantly different from what was used decades ago. The objective of the present paper is to design training methods that scale to larger and harder control problems, even if most of the components were already known. Specifically, we combine supervised\nlearning with trajectory optimization, namely Contact-Invariant Optimization (CIO) [12], which has given rise to some of the most elaborate motor behaviors synthesized automatically. Trajectory optimization however is an offline method, so the rationale here is to use a neural network to learn from the optimizer, and eventually generate similar behaviors online. There is closely related recent work along these lines [9, 11], but the method presented here solves substantially harder problems – in particular it yields stable and realistic locomotion in three-dimensional space, where previous work was applied to only two-dimensional characters. That this is possible is due to a number of technical improvements whose effects are analyzed below.\nControl was historically among the earliest applications of neural networks, but the recent surge in performance has been in computer vision, speech recognition and other classification problems that arise in artificial intelligence and machine learning, where large datasets are available. In contrast, the data needed to learn neural network controllers is much harder to obtain, and in the case of imaginary characters and novel robots we have to synthesize the training data ourselves (via trajectory optimization). At the same time the learning task for the network is harder. This is because we need precise real-valued outputs as opposed to categorical outputs, and also because our network must operate not on i.i.d. samples, but in a closed loop, where errors can amplify over time and cause instabilities. This necessitates specialized training procedures where the dataset of trajectories and the network parameters are optimized together. Another challenge caused by limited datasets is the potential for over-fitting and poor generalization. Our solution is to inject different forms of noise during training. The scale of our problem requires cloud computing and a GPU implementation, and training that takes on the order of hours. Interestingly, we invest more computing resources in generating the data than in learning from it. Thus the heavy lifting is done by the trajectory optimizer, and yet the neural network complements it in a way that yields interactive real-time control.\nNeural network controllers can also be trained with more traditional methods which do not involve trajectory optimization. This has been done in discrete action settings [10] as well as in continuous control settings [3, 6, 14]. A systematic comparison of these more direct methods with the present trajectory-optimization-based methods remains to be done. Nevertheless our impression is that networks trained with direct methods give rise to successful yet somewhat chaotic behaviors, while the present class of methods yield more realistic and purposeful behaviors.\nUsing physics based controllers allows for interaction, but these controllers need specially designed architectures for each range of tasks or characters. For example, for biped location common approaches include state machines and use of simplified models (such as the inverted pendulum) and concepts (such as zero moment or capture points) [21, 18]. For quadrupedal characters, a different set of state machines, contact schedules and simplified models is used [13]. For flying and swimming yet another set of control architectures, commonly making use of explicit cyclic encodings, have been used [8, 7]. It is our aim to unity these disparate approaches."
    }, {
      "heading" : "2 Overview",
      "text" : "Let the state of the character be defined as [q f r], where q is the physical pose of the character (root position, orientation and joint angles), f are the contact forces being applied on the character by the ground, and r is the recurrent memory state of the character. The motion of the character is a state trajectory of length T defined by X = [ q0 f0 r0 ... qT fT rT ] . Let X1, ...,XN be a collection of N trajectories, each starting with different initial conditions and executing a different task (such as moving the character to a particular location).\nWe introduce a neural network control policy πθ : s 7→ a, parametrized by neural network weights θ, that maps a sensory state of the character s at each point in time to an optimal action a that controls the character. In general, the sensory state can be designed by the user to include arbitrary informative features, but in this preliminary work we use the following simple and general-purpose representation:\nst = [ qt rt q̇t−1 f t−1 ] at = [ q̇t ṙt f t ] ,\nwhere, e.g., q̇t , qt+1 − qt denotes the instantaneous rate of change of q at time t. With this representation of the action, the policy directly commands the desired velocity of the character and applied contact forces, and determines the evolution of the recurrent state r. Thus, our network learns both optimal controls and a model of dynamics simultaneously.\nLet Ci(X) be the total cost of the trajectory X, which rewards accurate execution of task i and physical realism of the character’s motion. We want to jointly find a collection of optimal trajectories that each complete a particular task, along with a policy πθ that is able to reconstruct the sense and action pairs st(X) and at(X) of all trajectories at all timesteps:\nminimize θ X1 ... XN ∑ i Ci(X i) subject to ∀ i, t : at(Xi) = πθ(st(Xi)). (1)\nThe optimized policy parameters θ can then be used to execute policy in real-time and interactively control the character by the user."
    }, {
      "heading" : "2.1 Stochastic Policy and Sensory Inputs",
      "text" : "Injecting noise has been shown to produce more robust movement strategies in graphics and optimal control [20, 6], reduce overfitting and prevent feature co-adaptation in neural network training [4], and stabilize recurrent behaviour of neural networks [5]. We inject noise in a principled way to aid in learning policies that do not diverge when rolled out at execution time.\nIn particular, we inject additive Gaussian noise into the sensory inputs s given to the neural network. Let the sensory noise be denoted ε ∼ N (0,σ2εI), so the resulting noisy policy inputs are s + ε. This is similar to denoising autoencoders [17] with one important difference: the change in input in our setting also induces a change in the optimal action to output. If the noise is small enough, the optimal action at nearby noisy states is given by the first order expansion\na(s + ε) = a + asε, (2)\nwhere as (alternatively dads ) is the matrix of optimal feedback gains around s. These gains can be calculated as a byproduct of trajectory optimization as described in section 3.2. Intuitively, such feedback helps the neural network trainer to learn a policy that can automatically correct for small deviations from the optimal trajectory and allows us to use much less training data."
    }, {
      "heading" : "2.2 Distributed Stochastic Optimization",
      "text" : "The resulting constrained optimization problem (1) is nonconvex and too large to solve directly. We replace the hard equality constraint with a quadratic penalty with weight α:\nR(s,a, θ, ε) = α\n2 ‖(a + asε)− πθ(s + ε)‖2 , (3)\nleading to the relaxed, unconstrained objective\nminimize θ X1 ... XN ∑ i Ci(X i) + ∑ i,t R(st(Xi),at(Xi), θ, εi,t). (4)\nWe then proceed to solve the problem in block-alternating optimization fashion, optimizing for one set of variables while holding others fixed. In particular, we independently optimize for each Xi (trajectory optimization) and for θ (neural network regression).\nAs the target action a+asε depends on the optimal feedback gains as, the noise ε is resampled after optimizing each policy training sub-problem. In principle the noisy sensory state and corresponding action could be recomputed within the neural network training procedure, but we found it expedient to freeze the noise during NN optimization (so that the optimal feedback gains need not be passed to the NN training process). Similar to recent stochastic optimization approaches, we introduce quadratic proximal regularization terms (weighted by rate η) that keep the solution of the current iteration close to its previous optimal value. The resulting algorithm is\nAlgorithm 1: Distributed Stochastic Optimization 1 Sample sensor noise ε̄i,t for each t and i. 2 Optimize N trajectories (sec 3): X̄i = argminX Ci(X) + ∑ tR(s i,t,ai,t, θ̄, ε̄i,t) + η2 ∥∥X− X̄i∥∥2\n3 Solve neural network regression (sec 4): θ̄ = argminθ ∑ i,tR(̄s i,t, āi,t,θ, ε̄i,t) + η2 ∥∥θ − θ̄∥∥2 4 Repeat.\nThus we have reduced a complex policy search problem in (1) to an alternating sequence of independent trajectory optimization and neural network regression problems, each of which are wellstudied and allow the use of existing implementations. While previous work [9, 11] used ADMM or dual gradient descent to solve similar optimization problems, it is non-trivial to adapt them to asynchronous and stochastic setting we have. Despite potentially slower rate, we still observe convergence as shown in section 8.1."
    }, {
      "heading" : "3 Trajectory Optimization",
      "text" : "We wish to find trajectories that start with particular initial conditions and execute the task, while satisfying physical realism of the character’s motion. The existing approach we use is ContactInvariant Optimization (CIO) [12], which is a direct trajectory optimization method based on inverse dynamics. Define the total cost for a trajectory X:\nC(X) = ∑ t c(φt(X)), (5)\nwhere φt(X) is a function that extracts a vector of features (such as root forces, contact distances, control torques, etc.) from the trajectory at time t and c(φ) is the state cost over these features.\nPhysical realism is achieved by satisfying equations of motion, non-penetration, and force complementarity conditions at every point in the trajectory [12]:\nH(q)q̈ + C(q, q̇) = τ + J>(q, q̇)f , d(q) ≥ 0, d(q)>f = 0, f ∈ K(q) (6)\nwhere d(q) is the distance of the contact to the ground and K is the contact friction cone. These constraints are implemented as soft constraints, as in [12] and are included in C(X). Initial conditions are also implemented as soft constraints in C(X). Additionally we want to make sure the task is satisfied, such as moving to a particular location while minimizing effort. These task costs are the same for all our experiments and are described in section 8. Importantly, CIO is able to find solutions with trivial initializations, which makes it possible to have a broad range of characters and behaviors without requiring hand-designed controllers or motion capture for initialization."
    }, {
      "heading" : "3.1 Optimal Trajectory",
      "text" : "The trajectory optimization problem consists of finding the optimal trajectory parameters X that minimize the total cost (5) with objective (3) now folded into C for simplicity:\nX∗ = argmin X C(X). (7)\nWe solve the above optimization problem using Newton’s method, which requires the gradient and Hessian of the total cost function. Using the chain rule, these quantities are\nCX = ∑ t ctφφ t X CXX = ∑ t (φtX) >ctφφφ t X + c t φφ t XX ≈ ∑ t (φtX) >ctφφφ t X\nwhere the truncation of the last term in CXX is the common Gauss-Newton Hessian approximation [1]. We choose cost functions for which cφ and cφφ can be calculated analytically. On the other hand, φX is calculated by finite differencing. The optimum can then be found by the following recursion: X∗ = X∗ − C−1XXCX. (8) Because this optimization is only a sub-problem (step 2 in algorithm 1), we don’t run it to convergence, and instead take between one and ten iterations."
    }, {
      "heading" : "3.2 Optimal Feedback Gains",
      "text" : "In addition to the optimal trajectory, we also need to find optimal feedback gains as necessary to generate optimal actions for noisy inputs in (2). While these feedback gains are a byproduct of indirect trajectory optimization methods such as LQG, they are not an obvious result of direct trajectory optimization methods like CIO. While we can use Linear Quadratic Gaussian (LQG)\npass around our optimal solution to compute these gains, this is inefficient as it does not make use of computation already performed during direct trajectory optimization. Moreover, we found the resulting process can produce very large and ill-conditioned feedback gains. One could change the objective function for the LQG pass when calculating feedback gains to make them smoother (for example, by adding explicit trajectory smoothness cost), but then the optimal actions would be using feedback gains from a different objective. Instead, we describe a perturbation method that reuses computation done during direct trajectory optimization, also producing better-conditioned gains. This is a general method for producing feedback gains that stabilize resulting optimal trajectories and can be useful for other applications.\nSuppose we perturb a certain aspect of optimal trajectory X, such that the sensory state changes: s(X) = s̄. We wish to find how the optimal action a(X) will change given this perturbation. We can enforce the perturbation with a soft constraint of weight λ, resulting in an augmented total cost:\nC̃(X, s̄) = C(X) + λ\n2 ‖s(X)− s̄‖2 . (9)\nLet X̃(s̄) = argmin∗X C̃(X ∗) be the optimum of the augmented total cost. For s̄ near s(X) (as is the case with local feedback control), the minimizer of augmented cost is the minimizer of a quadratic around optimal trajectory X\nX̃(s̄) = X− C̃−1XX(X, s̄)C̃X(X, s̄) = X− (CXX + λs > XsX) −1(CX + λs > X(s(X)− s̄)),\nwhere all derivatives are calculated around X. Differentiating the above w.r.t. s̄,\nX̃s̄ = λ(CXX + λs > XsX) −1s>X = C −1 XXs > X(sXC −1 XXs > X +\n1 λ I)−1,\nwhere the last equality follows from Woodbury identity and has the benefit of reusing C−1XX, which is already computed as part of trajectory optimization. The optimal feedback gains for a are as̄ = aXX̃s̄. Note that sX and aX are subsets of φX, and are already calculated as part of trajectory optimization. Thus, computing optimal feedback gains comes at very little additional cost.\nOur approach produces softer feedback gains according to parameter λ without modifying the cost function. The intuition is that instead of holding perturbed initial state fixed (as LQG does, for example), we make matching the initial state a soft constraint. By weakening this constraint, we can modify initial state to better achieve the master cost function without using very aggressive feedback."
    }, {
      "heading" : "4 Neural Network Policy Regression",
      "text" : "After performing trajectory optimization, we perform standard regression to fit a neural network to the noisy fixed input and output pairs {s + ε, a + asε}i,t for each timestep and trajectory. Our neural network policy has a total ofK layers, hidden layer activation function σ (tanh, in the present work) and hidden units hk for layer k. To learn a model that is robust to small changes in neural state, we add independent Gaussian noise γk ∼ N (0,σ2γI) with variance σ2γ to the neural activations at each layer during training. Wager et al. [19] observed this noise model makes hidden units tend toward saturated regions and less sensitive to precise values of individual units.\nAs with the trajectory optimization sub-problems, we do not run the neural network trainer to convergence but rather perform only a single pass of batched stochastic gradient descent over the dataset before updating the parameters θ in step 3 of Algorithm 1.\nAll our experiments use 3 hidden layer neural networks with 250 hidden units in each layer (other network sizes are evaluated in section 8.1). The neural network weight matrices are initialized with a spectral radius of just above 1, similar to [15, 5]. This helps to make sure initial network dynamics are stable and do not vanish or explode."
    }, {
      "heading" : "5 Training Trajectory Generation",
      "text" : "To train a neural network for interactive use, we required a data set that includes dynamically changing task’s goal state. The task, in this case, is the locomotion of a character to a movable goal\nposition controlled by the user. (Our character’s goal position was always set to be the origin, which encodes the characters state position in the goal position’s coordinate frame. Thus the “origin” may shift relative to the character, but this keeps behavior invariant to the global frame of reference.)\nOur trajectory generation creates a dataset consisting of trials and segments. Each trial k starts with a reference physical pose and null recurrent memory [q q̇ r]init and must reach goal location gk,0. After generating an optimal trajectory Xk,0 according to section 3, a random timestep t is chosen to branch a new segment with [q q̇ r]t used as the initial state. A new goal location gk,1 is also chosen randomly for optimal trajectory Xk,1.\nThis process represents the character changing direction at some point along its original trajectory plan: “interaction” in this case is simply a new change in goal position. This technique allows for our initial states and goals to come from the distribution that reflects the character’s typical motion. In all our experiments, we use between 100 to 200 trials, each with 5 branched segments."
    }, {
      "heading" : "6 Distributed Training Architecture",
      "text" : "Our training algorithm was implemented in a asynchronous, distributed architecture, utilizing a GPU for neural network training. Simple parallelism was achieved by distributing the trajectory optimization processes to multiple node machines, while the resulting data was used to train the NN policy on a single GPU node.\nAmazon Web Service’s EC2 3.8xlarge instances provided the nodes for optimization, while a g2.2xlarge instance provided the GPU. Utilizing a star-topology with the GPU instance at the center, a Network File System server distributes the training data X and network parameters θ to necessary processes within the cluster. Each optimization node is assigned a subset of the total trials and segments for the given task. This simple usage of files for data storage meant no supporting infrastructure other than standard file locking for concurrency.\nWe used a custom GPU implementation of stochastic gradient descent (SGD) to train the neural network control policy. For the first training epoch, all trajectories and action sequences are loaded onto the GPU, randomly shuffling the order of the frames. Then the neural network parameters θ are updated using batched SGD in a single pass over the data to reduce the objective in (4). At the start of subsequent training epochs, trajectories which have been updated by one of the trajectory optimization processes (and injected with new sensor noise ε) are reloaded.\nAlthough this architecture is asynchronous, the proximal regularization terms in the objective prevent the training data and policy results from changing too quickly and keep the optimization from diverging. As a result, we can increase our training performance linearly for the size of cluster we are using, to about 30 optimization nodes per GPU machine. We run the overall optimization process until the average of 200 trajectory optimization iterations has been reached across all machines. This usually results in about 10000 neural network training epochs, and takes about 2.5 hours to complete, depending on task parameters and number of nodes."
    }, {
      "heading" : "7 Policy Execution",
      "text" : "Once we find the optimal policy parameters θ offline, we can execute the resulting policy in realtime under user control. Unlike non-parametric methods like motion graphs or Gaussian Processes, we do not need to keep any trajectory data at execution time. Starting with an initial state x0, we compute sensory state s and query the policy (without noise) for the desired action [ q̇des ṙdes f ] .\nTo evolve the physical state of the system, we directly optimize the next state x1 to match q̇des while satisfying equations of motion\nx1 = argmin x ∥∥q̇− q̇des∥∥2 + ∥∥ṙ− ṙdes∥∥2 + ∥∥f − f des∥∥2 subject to (6) Note that this is simply the optimization problem (7) with horizon T = 1, which can be solved at real-time rates and does not require any additional implementation. This approach is reminiscent of feature-based control in computer graphics and robotics.\nBecause our physical state evolution is a result of optimization (similar to an implicit integrator), it does not suffer from instabilities or divergence as Euler integration would, and allows the use of larger timesteps (we use ∆t of 50ms in all our experiments). In the current work, the dynamics constraints are enforced softly and thus may include some root forces in simulation."
    }, {
      "heading" : "8 Results",
      "text" : "This algorithm was applied to learn a policy that allows interactive locomotion for a range of very different three-dimensional characters. We used a single network architecture and parameters to create all controllers without any specialized initializations. While the task is locomotion, different character types exhibit very different behaviors. The experiments include three-dimensional swimming and flying characters as well as biped and quadruped walking tasks. Unlike in two-dimensional scenarios, it is much easier for characters to fall or go into unstable regions, yet our method manages to learn successful controllers. We strongly suggest viewing the supplementary video for examples of resulting behaviors.\nThe swimming creature featured four fins with two degrees of freedom each. It is propelled by lift and drag forces for simulated water density of 1000kg/m3. To move, orient, or maintain position, controller learned to sweep down opposite fins in a cyclical patter, as in treading water. The bird creature was a modification of the swimmer, with opposing two-segment wings and the medium density changed changed to that of air (1.2kg/m3). The learned behavior that emerged is cyclical flapping motion (more vigorous now, because of the lower medium density) as well as utilization of lift forces to coast to distant goal positions and modulation of flapping speed to change altitude.\nThree bipedal creatures were created to explore the controller’s function with respect to contact forces. Two creatures were akin to a humanoid - one large and one small, both with arms - while the other had a very wide torso compared to its height. All characters learned to walk to the target location and orientation with a regular, cyclic gait. The same algorithm also learned a stereotypical trot gait for a dog-like and spider-like quadrupeds. This alternating left/right footstep cyclic behavior for bipeds or trot gaits for quadrupeds emerged without any user input or hand-crafting.\nThe costs in the trajectory optimization were to reach goal position and orientation while minimizing torque usage and contact force magnitudes. We used the MuJoCo physics simulator [16] engine for our dynamics calculations. The values of the algorithmic constants used in all experiments are σε = 10 −2 σγ = 10 −2 α = 10 λ = 102 η = 10−2."
    }, {
      "heading" : "8.1 Comparative Evaluation",
      "text" : "We show the performance of our method on a biped walking task in figure 2 under full method case. To test the contribution of our proposed joint optimization technique, we compared our algorithm to naive neural network training on a static optimal trajectory dataset. We disabled the neural network and generated optimal trajectories as according to 5. Then, we performed our regression on this static data set with no trajectories being re-optimized. The results are shown in no joint case. We see that at test time, our full method performs two orders of magnitude better than static training. To test the contribution of noise injection, we used our full method, but disabled sensory and hidden unit noise (sections 2.1 and 4). The results are under no noise case. We observe typical overfitting, with good training performance, but very poor test performance. In practice, both ablations above lead to policy rollouts that quickly diverge from expected behavior.\nAdditionally, we have compared the performance of different policy network architectures on the biped walking task by varying the number of layers and hidden units. The results are shown in table 1. We see that 3 hidden layers of 250 units gives the best performance/complexity tradeoff.\nModel-predictive control (MPC) is another potential choice of a real-time controller for task-driven character behavior. In fact, the trajectory costs for both MPC and our method are very similar. The resulting trajectories, however, end up being different: MPC creates effective trajectories that are not cyclical (both are shown in figure 3 for a bird character). This suggests a significant nullspace of task solutions, but from all these solutions, our joint optimization - through the cost terms of matching the neural network output - act to regularize trajectory optimization to predictable and less chaotic behaviors."
    }, {
      "heading" : "9 Conclusions and Future Work",
      "text" : "We have presented an automatic way of generating neural network parameters that represent a control policy for physically consistent interactive character control, only requiring a dynamical character model and task description. Using both trajectory optimization and stochastic neural networks together combines correct behavior with real-time interactive use. Furthermore, the same algorithm and controller architecture can provide interactive control for multiple creature morphologies.\nWhile the behavior of the characters reflected efficient task completion in this work, additional modifications could be made to affect the style of behavior – costs during trajectory optimization can affect how a task is completed. Incorporation of muscle actuation effects into our character models may result in more biomechanically plausible actions for that (biologically based) character. In addition to changing the character’s physical characteristics, we could explore different neural network architectures and how they compare to biological systems. With this work, we have networks that enable diverse physical action, which could be augmented to further reflect biological sensorimotor systems. This model could be used to experiment with the effects of sensor delays and the resulting motions, for example [2].\nThis work focused on locomotion of different creatures with the same algorithm. Previous work has demonstrated behaviors such as getting up, climbing, and reaching with the same trajectory optimization method [12]. Real-time policies using this algorithm could allow interactive use of these behaviors as well. Extending beyond character animation, this work could be used to develop controllers for robotics applications that are robust to sensor noise and perturbations if the trained character model accurately reflects the robot’s physical parameters."
    } ],
    "references" : [ {
      "title" : "Hessian matrix vs. gauss-newton hessian matrix",
      "author" : [ "P. Chen" ],
      "venue" : "SIAM J. Numerical Analysis,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2011
    }, {
      "title" : "A muscle-reflex model that encodes principles of legged mechanics produces human walking dynamics and muscle activities",
      "author" : [ "H. Geyer", "H. Herr" ],
      "venue" : "Neural Systems and Rehabilitation Engineering, IEEE Transactions on,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2010
    }, {
      "title" : "Neuroanimator: Fast neural network emulation and control of physics-based models",
      "author" : [ "R. Grzeszczuk", "D. Terzopoulos", "G. Hinton" ],
      "venue" : "In Proceedings of the 25th Annual Conference on Computer Graphics and Interactive Techniques,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 1998
    }, {
      "title" : "Improving neural networks by preventing co-adaptation of feature detectors",
      "author" : [ "G.E. Hinton", "N. Srivastava", "A. Krizhevsky", "I. Sutskever", "R.R. Salakhutdinov" ],
      "venue" : "arXiv preprint arXiv:1207.0580,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2012
    }, {
      "title" : "Emergence of complex computational structures from chaotic neural networks through reward-modulated hebbian learning",
      "author" : [ "G.M. Hoerzer", "R. Legenstein", "W. Maass" ],
      "venue" : "Cerebral Cortex,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2012
    }, {
      "title" : "Real-time motor control using recurrent neural networks",
      "author" : [ "D. Huh", "E. Todorov" ],
      "venue" : "In Adaptive Dynamic Programming and Reinforcement Learning,",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2009
    }, {
      "title" : "Central pattern generators for locomotion control in animals and robots: a review",
      "author" : [ "A.J. Ijspeert" ],
      "venue" : null,
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2008
    }, {
      "title" : "Data-driven control of flapping flight",
      "author" : [ "E. Ju", "J. Won", "J. Lee", "B. Choi", "J. Noh", "M.G. Choi" ],
      "venue" : "ACM Trans. Graph.,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 2013
    }, {
      "title" : "Learning complex neural network policies with trajectory optimization",
      "author" : [ "S. Levine", "V. Koltun" ],
      "venue" : "In ICML ’14: Proceedings of the 31st International Conference on Machine Learning,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2014
    }, {
      "title" : "Playing atari with deep reinforcement learning",
      "author" : [ "V. Mnih", "K. Kavukcuoglu", "D. Silver", "A. Graves", "I. Antonoglou", "D. Wierstra", "M.A. Riedmiller" ],
      "venue" : "CoRR, abs/1312.5602,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 2013
    }, {
      "title" : "Combining the benefits of function approximation and trajectory optimization",
      "author" : [ "I. Mordatch", "E. Todorov" ],
      "venue" : "In Robotics: Science and Systems (RSS),",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2014
    }, {
      "title" : "Discovery of complex behaviors through contactinvariant optimization",
      "author" : [ "I. Mordatch", "E. Todorov", "Z. Popović" ],
      "venue" : "ACM Transactions on Graphics (TOG),",
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 2012
    }, {
      "title" : "A controller for the littledog quadruped walking on rough terrain",
      "author" : [ "J.R. Rebula", "P.D. Neuhaus", "B.V. Bonnlander", "M.J. Johnson", "J.E. Pratt" ],
      "venue" : "In Robotics and Automation,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2007
    }, {
      "title" : "Trust region policy optimization",
      "author" : [ "J. Schulman", "S. Levine", "P. Moritz", "M.I. Jordan", "P. Abbeel" ],
      "venue" : "CoRR, abs/1502.05477,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 2015
    }, {
      "title" : "On the importance of initialization and momentum in deep learning",
      "author" : [ "I. Sutskever", "J. Martens", "G.E. Dahl", "G.E. Hinton" ],
      "venue" : "In Proceedings of the 30th International Conference on Machine Learning (ICML-13),",
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 2013
    }, {
      "title" : "Mujoco: A physics engine for model-based control",
      "author" : [ "E. Todorov", "T. Erez", "Y. Tassa" ],
      "venue" : "In IROS’12,",
      "citeRegEx" : "16",
      "shortCiteRegEx" : "16",
      "year" : 2012
    }, {
      "title" : "Extracting and composing robust features with denoising autoencoders",
      "author" : [ "P. Vincent", "H. Larochelle", "Y. Bengio", "P.-A. Manzagol" ],
      "venue" : null,
      "citeRegEx" : "17",
      "shortCiteRegEx" : "17",
      "year" : 2008
    }, {
      "title" : "Zero-moment point - thirty five years of its life",
      "author" : [ "M. Vukobratovic", "B. Borovac" ],
      "venue" : "I. J. Humanoid Robotics,",
      "citeRegEx" : "18",
      "shortCiteRegEx" : "18",
      "year" : 2004
    }, {
      "title" : "Dropout training as adaptive regularization",
      "author" : [ "S. Wager", "S. Wang", "P. Liang" ],
      "venue" : "In Advances in Neural Information Processing Systems (NIPS),",
      "citeRegEx" : "19",
      "shortCiteRegEx" : "19",
      "year" : 2013
    }, {
      "title" : "Optimizing walking controllers for uncertain inputs and environments",
      "author" : [ "J.M. Wang", "D.J. Fleet", "A. Hertzmann" ],
      "venue" : "ACM Trans. Graph.,",
      "citeRegEx" : "20",
      "shortCiteRegEx" : "20",
      "year" : 2010
    }, {
      "title" : "Simbicon: Simple biped locomotion control",
      "author" : [ "K. Yin", "K. Loken", "M. van de Panne" ],
      "venue" : "ACM Trans. Graph.,",
      "citeRegEx" : "21",
      "shortCiteRegEx" : "21",
      "year" : 2007
    } ],
    "referenceMentions" : [ {
      "referenceID" : 11,
      "context" : "learning with trajectory optimization, namely Contact-Invariant Optimization (CIO) [12], which has given rise to some of the most elaborate motor behaviors synthesized automatically.",
      "startOffset" : 83,
      "endOffset" : 87
    }, {
      "referenceID" : 8,
      "context" : "There is closely related recent work along these lines [9, 11], but the method presented here solves substantially harder problems – in particular it yields stable and realistic locomotion in three-dimensional space, where previous work was applied to only two-dimensional characters.",
      "startOffset" : 55,
      "endOffset" : 62
    }, {
      "referenceID" : 10,
      "context" : "There is closely related recent work along these lines [9, 11], but the method presented here solves substantially harder problems – in particular it yields stable and realistic locomotion in three-dimensional space, where previous work was applied to only two-dimensional characters.",
      "startOffset" : 55,
      "endOffset" : 62
    }, {
      "referenceID" : 9,
      "context" : "This has been done in discrete action settings [10] as well as in continuous control settings [3, 6, 14].",
      "startOffset" : 47,
      "endOffset" : 51
    }, {
      "referenceID" : 2,
      "context" : "This has been done in discrete action settings [10] as well as in continuous control settings [3, 6, 14].",
      "startOffset" : 94,
      "endOffset" : 104
    }, {
      "referenceID" : 5,
      "context" : "This has been done in discrete action settings [10] as well as in continuous control settings [3, 6, 14].",
      "startOffset" : 94,
      "endOffset" : 104
    }, {
      "referenceID" : 13,
      "context" : "This has been done in discrete action settings [10] as well as in continuous control settings [3, 6, 14].",
      "startOffset" : 94,
      "endOffset" : 104
    }, {
      "referenceID" : 20,
      "context" : "For example, for biped location common approaches include state machines and use of simplified models (such as the inverted pendulum) and concepts (such as zero moment or capture points) [21, 18].",
      "startOffset" : 187,
      "endOffset" : 195
    }, {
      "referenceID" : 17,
      "context" : "For example, for biped location common approaches include state machines and use of simplified models (such as the inverted pendulum) and concepts (such as zero moment or capture points) [21, 18].",
      "startOffset" : 187,
      "endOffset" : 195
    }, {
      "referenceID" : 12,
      "context" : "For quadrupedal characters, a different set of state machines, contact schedules and simplified models is used [13].",
      "startOffset" : 111,
      "endOffset" : 115
    }, {
      "referenceID" : 7,
      "context" : "For flying and swimming yet another set of control architectures, commonly making use of explicit cyclic encodings, have been used [8, 7].",
      "startOffset" : 131,
      "endOffset" : 137
    }, {
      "referenceID" : 6,
      "context" : "For flying and swimming yet another set of control architectures, commonly making use of explicit cyclic encodings, have been used [8, 7].",
      "startOffset" : 131,
      "endOffset" : 137
    }, {
      "referenceID" : 19,
      "context" : "Injecting noise has been shown to produce more robust movement strategies in graphics and optimal control [20, 6], reduce overfitting and prevent feature co-adaptation in neural network training [4], and stabilize recurrent behaviour of neural networks [5].",
      "startOffset" : 106,
      "endOffset" : 113
    }, {
      "referenceID" : 5,
      "context" : "Injecting noise has been shown to produce more robust movement strategies in graphics and optimal control [20, 6], reduce overfitting and prevent feature co-adaptation in neural network training [4], and stabilize recurrent behaviour of neural networks [5].",
      "startOffset" : 106,
      "endOffset" : 113
    }, {
      "referenceID" : 3,
      "context" : "Injecting noise has been shown to produce more robust movement strategies in graphics and optimal control [20, 6], reduce overfitting and prevent feature co-adaptation in neural network training [4], and stabilize recurrent behaviour of neural networks [5].",
      "startOffset" : 195,
      "endOffset" : 198
    }, {
      "referenceID" : 4,
      "context" : "Injecting noise has been shown to produce more robust movement strategies in graphics and optimal control [20, 6], reduce overfitting and prevent feature co-adaptation in neural network training [4], and stabilize recurrent behaviour of neural networks [5].",
      "startOffset" : 253,
      "endOffset" : 256
    }, {
      "referenceID" : 16,
      "context" : "This is similar to denoising autoencoders [17] with one important difference: the change in input in our setting also induces a change in the optimal action to output.",
      "startOffset" : 42,
      "endOffset" : 46
    }, {
      "referenceID" : 8,
      "context" : "While previous work [9, 11] used ADMM or dual gradient descent to solve similar optimization problems, it is non-trivial to adapt them to asynchronous and stochastic setting we have.",
      "startOffset" : 20,
      "endOffset" : 27
    }, {
      "referenceID" : 10,
      "context" : "While previous work [9, 11] used ADMM or dual gradient descent to solve similar optimization problems, it is non-trivial to adapt them to asynchronous and stochastic setting we have.",
      "startOffset" : 20,
      "endOffset" : 27
    }, {
      "referenceID" : 11,
      "context" : "The existing approach we use is ContactInvariant Optimization (CIO) [12], which is a direct trajectory optimization method based on inverse dynamics.",
      "startOffset" : 68,
      "endOffset" : 72
    }, {
      "referenceID" : 11,
      "context" : "Physical realism is achieved by satisfying equations of motion, non-penetration, and force complementarity conditions at every point in the trajectory [12]: H(q)q̈ + C(q, q̇) = τ + J>(q, q̇)f , d(q) ≥ 0, d(q)>f = 0, f ∈ K(q) (6)",
      "startOffset" : 151,
      "endOffset" : 155
    }, {
      "referenceID" : 11,
      "context" : "These constraints are implemented as soft constraints, as in [12] and are included in C(X).",
      "startOffset" : 61,
      "endOffset" : 65
    }, {
      "referenceID" : 0,
      "context" : "where the truncation of the last term in CXX is the common Gauss-Newton Hessian approximation [1].",
      "startOffset" : 94,
      "endOffset" : 97
    }, {
      "referenceID" : 18,
      "context" : "[19] observed this noise model makes hidden units tend toward saturated regions and less sensitive to precise values of individual units.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 14,
      "context" : "The neural network weight matrices are initialized with a spectral radius of just above 1, similar to [15, 5].",
      "startOffset" : 102,
      "endOffset" : 109
    }, {
      "referenceID" : 4,
      "context" : "The neural network weight matrices are initialized with a spectral radius of just above 1, similar to [15, 5].",
      "startOffset" : 102,
      "endOffset" : 109
    }, {
      "referenceID" : 15,
      "context" : "We used the MuJoCo physics simulator [16] engine for our dynamics calculations.",
      "startOffset" : 37,
      "endOffset" : 41
    }, {
      "referenceID" : 1,
      "context" : "This model could be used to experiment with the effects of sensor delays and the resulting motions, for example [2].",
      "startOffset" : 112,
      "endOffset" : 115
    }, {
      "referenceID" : 11,
      "context" : "Previous work has demonstrated behaviors such as getting up, climbing, and reaching with the same trajectory optimization method [12].",
      "startOffset" : 129,
      "endOffset" : 133
    } ],
    "year" : 2015,
    "abstractText" : "We present a method for training recurrent neural networks to act as near-optimal feedback controllers. It is able to generate stable and realistic behaviors for a range of dynamical systems and tasks – swimming, flying, biped and quadruped walking with different body morphologies. It does not require motion capture or task-specific features or state machines. The controller is a neural network, having a large number of feed-forward units that learn elaborate state-action mappings, and a small number of recurrent units that implement memory states beyond the physical system state. The action generated by the network is defined as velocity. Thus the network is not learning a control policy, but rather the dynamics under an implicit policy. Essential features of the method include interleaving supervised learning with trajectory optimization, injecting noise during training, training for unexpected changes in the task specification, and using the trajectory optimizer to obtain optimal feedback gains in addition to optimal actions. Figure 1: Illustration of the dynamical systems and tasks we have been able to control using the same method and architecture. See the video accompanying the submission.",
    "creator" : null
  }
}