{
  "name" : "83f97f4825290be4cb794ec6a234595f.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Streaming Min-Max Hypergraph Partitioning",
    "authors" : [ "Dan Alistarh", "Jennifer Iglesias", "Milan Vojnovic" ],
    "emails" : [ "dan.alistarh@microsoft.com", "jiglesia@andrew.cmu.edu", "milanv@microsoft.com" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "In a variety of applications, one needs to process data of rich structure that can be conveniently represented by a hypergraph, where associations of the data items, represented by vertices, are represented by hyperedges, i.e. subsets of items. Such data structure can be equivalently represented by a bipartite graph that has two types of vertices: vertices that represent items, and vertices that represent associations among items, which we refer to as topics. In this bipartite graph, each item is connected to one or more topics. The input can be seen as a graph with vertices belonging to (overlapping) communities.\nThere has been significant work on partitioning a set of items into disjoint components such that similar items are assigned to the same component, see, e.g., [8] for a survey. This problem arises in the context of clustering of information objects such as documents, images or videos. For example, the goal may be to partition given collection of documents into disjoint sub-collections such that the maximum number of distinct topics covered by each sub-collection is minimized, resulting in a\n∗Work performed in part while an intern with Microsoft Research.\nparsimonious summary. The same fundamental problem also arises in processing of complex data workloads, including enterprise emails [10], online social networks [18], graph data processing and machine learning computation platforms [20, 21, 2], and load balancing in modern streaming query processing platforms [24]. In this context, the goal is to partition a set of data items over a given number of servers to balance the load according to some given criteria.\nProblem Definition. We consider the min-max hypergraph partitioning problem defined as follows. The input to the problem is a set of items, a set of topics, a number of components to partition the set of items, and a demand matrix that specifies which particular subset of topics is associated with each individual item. Given a partitioning of the set of items, the cost of a component is defined as the number of distinct topics that are associated with items of the given component. The cost of a given partition is the maximum cost of a component. In other words, given an input hypergraph and a partition of the set of vertices into a given number of disjoints components, the cost of a component is defined to be the number of hyperedges that have at least one vertex assigned to this component. For example, for the simple input graph in Figure 1, a partition of the set of items into two components {1, 3} and {2, 4} amounts to the cost of the components each of value 2, thus, the cost of the partition is of value 2. The cost of a component is a submodular function as the distinct topics associated with items of the component correspond to a neighborhood set in the input bipartite graph.\nIn the streaming computation model that we consider, items arrive sequentially one at a time, and each item needs to be assigned, irrevocably, to one component at its arrival time. This streaming computation model allows for limited memory to be used at any time during the execution whose size is restricted to be at most linear in the number of the components. Both these assumptions arise as part of system requirements for deployment in web-scale services.\nThe min-max hypergraph partition problem is NP hard. The streaming computation problem is even more difficult, as less information is available to the algorithm when an item must be assigned.\nContribution. In this paper, we consider the streaming min-max hypergraph partitioning problem. We identify a greedy item placement strategy which outperforms all alternative approaches considered on real-world datasets, and can be proven to have a non-trivial recovery property: it recovers hidden co-clusters of items in probabilistic inputs subject to a recovery condition.\nSpecifically, we show that, given a set of hidden co-clusters to be placed onto k components, the greedy strategy will tend to place items from the same hidden cluster onto the same component, with high probability. In turn, this property implies that greedy will provide a constant factor approximation of the optimal partition on inputs satisfying the recovery property.\nThe probabilistic input model we consider is defined as follows. The set of topics is assumed to be partitioned into a given number ℓ ≥ 1 of disjoint hidden clusters. Each item is connected to topics according to a mixture probability distribution defined as follows. Each item first selects one of the hidden clusters as a home hidden cluster by drawing an independent sample from a uniform distribution over the hidden clusters. Then, it connects to each topic from its home hidden cluster independently with probability p, and it connects to each topic from each other hidden cluster with probability q ≤ p. This defines a hidden co-clustering of the input bipartite graph; see Figure 2 for an example.\nThis model is similar in spirit to the popular stochastic block model of an undirected graph, and it corresponds to a hidden co-clustering [6, 7, 17, 4] model of an undirected bipartite graph. We consider asymptotically accurate recovery of this hidden co-clustering.\nA hidden cluster is said to be asymptotically recovered if the portion of items from the given hidden cluster assigned to the same partition goes to one asymptotically as the number of items observed grows large. An algorithm guarantees balanced asymptotic recovery if, additionally, it ensures that the cost of the most loaded partition is within a constant of the average partition load.\nOur main analytical result is showing that a simple greedy strategy provides balanced asymptotic recovery of hidden clusters (Theorem 1). We prove that a sufficient condition for the recovery of hidden clusters is that the number of hidden clusters ℓ is at least k log k, where k is the number of components, and that the gap between the probability parameters q and p is sufficiently large: q < log r/(kr) < 2 log r/r ≤ p, where r is the number of topics in a hidden cluster. Roughly speaking, this means that if the mean number of topics to which an item is associated with in its home hidden cluster of topics is at least twice as large as the mean number of topics to which an item is associated with from other hidden clusters of topics, then the simple greedy online algorithm guarantees asymptotic recovery.\nThe proof is based on a coupling argument, where we first show that assigning an item to a partition based on the number of topics it has in common with each partition is similar to making the assignment proportionally to the number of items corresponding to the same hidden cluster present on each partition. In turn, this allows us to couple the assignment strategy with a Polya urn process [5] with “rich-get-richer” dynamics, which implies that the policy converges to assigning each item from a hidden cluster to the same partition. Additionally, this phenomenon occurs “in parallel” for each cluster. This recovery property will imply that this strategy will ensure a constant factor approximation of the optimum assignment.\nFurther, we provide experimental evidence that this greedy online algorithm exhibits good performance for several real-world input bipartite graphs, outperforming more complex assignment strategies, and even some offline approaches."
    }, {
      "heading" : "2 Problem Definition and Basic Results",
      "text" : "In this section we provide a formal problem definition, and present some basic results on the computational hardness and lower bounds.\nInput. The input is defined by a set of items N = {1, 2, . . . , n}, a set of topics M = {1, 2, . . . ,m}, and a given number of components k. Dependencies between items and topics are given by a demand matrix D = (di,l) ∈ {0, 1}n×m where di,l = 1 indicates that item i needs topic l, and di,l = 0, otherwise.1\nAlternatively, we can represent the input as a bipartite graph G = (N,M,E) where there is an edge (i, l) ∈ E if and only if item i needs topic l or as a hypergraph H = (N,E) where a hyperedge e ∈ E consists of all items that use the same topic.\nThe Problem. An assignment of items to components is given by x ∈ {0, 1}n×k where xi,j = 1 if item i is assigned to component j, and xi,j = 0, otherwise. Given an assignment of items to components x, the cost of component j is defined to be equal to the minimum number of distinct topics that are needed by this component to cover all the items assigned to it, i.e.\ncj(x) = ∑ l∈M min {∑ i∈N di,lxi,j , 1 } .\nAs defined, the cost of each component is a submodular function of the items assigned to it. We consider the min-max hypergraph partitioning problem defined as follows:\nminimize max{c1(x), c2(x), . . . , ck(x)} subject to ∑ j∈[k] xi,j = 1 ∀i ∈ [n]\nx ∈ {0, 1}n×k (1)\nWe note that this problem is an instance of the submodular load balancing, as defined in [23]. 1The framework allows for a natural generalization to allow for real-valued demands. In this paper we focus on {0, 1}-valued demands.\nBasic Results. This problem is NP-Complete, by reduction from the subset sum problem. Proposition 1. The min-max hypergraph partitioning problem is NP-Complete.\nWe now give a lower bound on the optimal value of the problem, using the observation that each topic needs to be made available on at least one component. Proposition 2. For every partition of the set of items in k components, the maximum cost of a component is larger than or equal to m/k, where m is the number of topics.\nWe next analyze the performance of an algorithm which simply assigns each item independently to a component chosen uniformly at random from the set of all components upon its arrival. Although this is a popular strategy commonly deployed in practice (e.g. for load balancing in computation platforms), the following result shows that it does not yield a good solution for the min-max hypergraph partitioning problem. Proposition 3. The expected maximum load of a component under random assignment is at least (1− ∑m j=1(1− 1/k)nj/m) ·m, where nj is the number of items associated with topic j.\nFor instance, if we assume that nj ≥ k for each topic j, we obtain that the expected maximum load is of at least (1 − 1/e)m. This suggests that the performance of random assignment is poor: on an input where m topics form k disjoint clusters, and each item subscribes to a single cluster, the optimal solution has cost m/k, whereas, by the above claim, random assignment has approximate cost 2m/3, yielding a competitive ratio that is linear in k.\nBalanced Recovery of Hidden Co-Clusters. We relax the worst-case input requirements by defining a family of hidden co-clustering inputs. Our model is a generalization of the stochastic block model of a graph to the case of hypergraphs.\nWe consider a set of topics R, partitioned into ℓ clusters C1, C2, . . . , Cℓ, each of which contains r topics. Given these hidden clusters, each item is associated with topics as follows. Each item is first assigned a “home” cluster Ch, chosen uniformly at random among the hidden clusters. The item then connects to topics inside its home cluster by picking each topic independently with fixed probability p. Further, the item connects to topics from a fixed arbitrary “noise” set Qh of size at most r/2 outside its home cluster Ch, where the item is connected to each topic in Qh uniformly at random, with fixed probability q. (Sampling outside topics from the set of all possible topics would in the limit lead to every partition to contain all possible topics, which renders the problem trivial. We do not impose this limitation in the experimental validation.) Definition 1 (Hidden Co-Clustering). A bipartite graph is in HC(n, r, ℓ, p, q) if it is constructed using the above process, with n items and ℓ clusters with r topics per cluster, where each item subscribes to topics inside its randomly chosen home cluster with probability p, and to topics from the noise set with probability q.\nAt each time step t, a new item is presented in the input stream of items, and is immediately assigned to one of the k components, S1, S2, . . . , Sk, according to some algorithm. Algorithms do not know the number of hidden clusters or their size, but can examine previous assignments. Definition 2 (Asymptotic Balanced Recovery.). Given a hidden co-clustering HC(n, r, ℓ, p, q), we say an algorithm asymptotically recovers the hidden clusters C1, C2, . . . , Cℓ if there exists a recovery time tR during its execution after which, for each hidden cluster Ci, there exists a component Sj such that each item with home cluster Ci is assigned to component Sj with probability that goes to 1 as the number of items grows large. Moreover, the recovery is balanced if the ratio between the maximum cost of a component and the average cost over components is upper bounded by a constant B > 0."
    }, {
      "heading" : "3 Streaming Algorithm and the Recovery Guarantee",
      "text" : "Recall that we consider the online problem, where we receive one item at a time together with all its corresponding topics. The item must be immediately and irrevocably assigned to some component. In the following, we describe the greedy strategy, specified in Algorithm 1.\nData: Hypergraph H = (V,E), received one item (vertex) at a time, k partitions, capacity bound c Result: A partition of V into k parts\n1 Set initial partitions S1, S2, . . . , Sk to be empty sets 2 while there are incoming items do 3 Receive the next item t, and its topics R 4 I ← {i : |Si| ≤ minj |Sj |+ c} /* components not exceeding capacity */ 5 Compute ri = |Si ∩R| ∀i ∈ I /* size of topic intersection */ 6 j ← argmaxi∈I ri /* if tied, choose a least loaded component */ 7 Sj ← Sj ∪R /* item t and its topics are assigned to Sj */ 8 return S1, S2, . . . , Sk\nAlgorithm 1: The greedy algorithm.\nThis strategy places each incoming item onto the component whose incremental cost (after adding the item and its topics) is minimized. The immediate goal is not balancing, but rather clustering similar items. This could in theory lead to large imbalances; to prevent this, we add a balancing constraint specifying the maximum load imbalance. If adding the item to the first candidate component would violate the balancing constraint, then the item is assigned to the first valid component, in decreasing order of the intersection size."
    }, {
      "heading" : "3.1 The Recovery Theorem",
      "text" : "In this section, we present our main theoretical result, which provides a sufficient condition for the greedy strategy to guarantee balanced asymptotic recovery of hidden clusters.\nTheorem 1 (The Recovery Theorem). For a random input consisting of a hidden co-cluster graph G in HC(n, r, ℓ, p, q) to be partitioned across k ≥ 2 components, if the number of clusters is ℓ ≥ k log k, and the probabilities p and q satisfy p ≥ 2 log r/r, and q ≤ log r/(rk), then the greedy algorithm ensures balanced asymptotic recovery of the hidden clusters.\nRemarks. Specifically, we prove that, under the given conditions, recovery occurs for each hidden cluster by the time r/ log r cluster items have been observed, with probability 1−1/rc, where c ≥ 1 is a constant. Moreover, clusters are randomly distributed among the k components.\nTogether, these results can be used to bound the maximum cost of a partition to be at most a constant factor away the lower bound of rℓ/k given by Lemma 2. The extra cost comes from incorrect assignments before the recovery time, and from the imperfect balancing of clusters over the components.\nCorollary 1. The expected maximum load of a component is at most 2.4rℓ/k."
    }, {
      "heading" : "3.2 Proof Overview",
      "text" : "We now provide an overview of the main ideas of the proof, which is available in the full version of the paper.\nPreliminaries. We say that two random processes are coupled if their random choices are the same. We say that an event occurs with high probability (w.h.p.) if it occurs with probability at least 1 − 1/rc, where c ≥ 1 is a constant. We make use of a Polya urn process [5], which is defined as follows. We start each of k ≥ 2 urns with one ball, and, at each step t, observe a new ball. We assign the new ball to urn i ∈ {1, . . . , k} with probability proportional to (bi)γ , where γ > 0 is a fixed real constant, and bi is the number of balls in urn i at time t. We use the following classic result.\nLemma 1 (Polya Urn Convergence [5]). Consider a finite k-bin Polya urn process with exponent γ > 1, and let xti be the fraction of balls in urn i at time t. Then, almost surely, the limit Xi = limt→∞ x t i exists for each 1 ≤ i ≤ k. Moreover, we have that there exists an urn j such that Xj = 1, and that Xi = 0, for all i ̸= j.\nStep 1: Recovering a Single Cluster. We first prove that, in the case of a single home cluster for all items, and two components (k = 2), with no balance constraints, the greedy algorithm with no balance constraints converges to a monopoly, i.e., eventually assigns all the items from\nthis cluster onto the same component, w.h.p. Formally, there exists some convergence time tR and some component Si such that, after time tR, all future items will be assigned to component Si, with probability at least 1− 1/rc. Our strategy will be to couple greedy assignment with a Polya urn process with exponent γ > 1, showing that the dynamics of the two processes are the same, w.h.p. There is one significant technical challenge that one needs to address: while the Polya process assigns new balls based on the ball counts of urns, greedy assigns items (and their respective topics) based on the number of topic intersections between the item and the partition. We resolve this issue by taking a two-tiered approach. Roughly, we first prove that, w.h.p., we can couple the number of items in a component with the number of unique topics assigned to the same component. We then prove that this is enough to couple the greedy assignment with a Polya urn process with exponent γ > 1. This will imply that greedy converges to a monopoly, by Lemma 1.\nWe then extend this argument to a single cluster and k ≥ 3 components, but with no load balancing constraints. The crux of the extension is that we can apply the k = 2 argument to pairs of components to yield that some component achieves a monopoly. Lemma 2. Given a single cluster instance in HC(n, r, ℓ, p, q) with ℓ = 1, p ≥ 2 log r/r and q = 0 to be partitioned in k components, the greedy algorithm with no balancing constraints will eventually place every item in the cluster onto the same component w.h.p.\nSecond Step: The General Case. We complete the proof of Theorem 1 by considering the general case with ℓ ≥ 2 clusters and q > 0. We proceed in three sub-steps. We first show the recovery claim for general number of clusters ℓ ≥ 2, but q = 0 and no balance constraints. This follows since, for q = 0, the algorithm’s choices with respect to clusters and their respective topics are independent. Hence clusters are assigned to components uniformly at random.\nSecond, we extend the proof for any value q ≤ log r/(rk), by showing that the existence of “noise” edges under this threshold only affects the algorithm’s choices with very low probability. Finally, we prove that the balance constraints are practically never violated for this type of input, as clusters are distributed uniformly at random. We obtain the following. Lemma 3. For a hidden co-cluster input, the greedy algorithm with q = 0 and without capacity constraints can be coupled with a version of the algorithm with q ≤ log r/(rk) and a constant capacity constraint, w.h.p.\nFinal Argument. Putting together Lemmas 2 and 3, we obtain that greedy ensures balanced recovery for general inputs in HC(n, r, ℓ, p, q), for parameter values ℓ ≥ k log k, p ≥ 2 log r/r, and q ≤ log r/(rk)."
    }, {
      "heading" : "4 Experimental Results",
      "text" : "Datasets and Evaluation. We first consider a set of real-world bipartite graph instances with a summary provided in Table 3. All these datasets are available online, except for Zune podcast subscriptions. We chose the consumer to be the item and the resource to be the topic. We provide an experimental validation of the analysis on synthetic co-cluster inputs in the full version of our paper.\nIn our experiments, we considered partitioning of items onto k components for a range of values going from two to ten components. We report the maximum number of topics in a component normalized by the cost of a perfectly balanced solution m/k, where m is the total number of topics.\nOnline Assignment Algorithms. We compared the following other online assignment strategies:\n• All-on-One: trivially assign all items and topics to one component. • Random: assign each item independently to a component chosen uniformly at random from the set of all components.\n• Balance Big: inspect the items in a random order and assign the large items to the least loaded component, and the small items according to greedy. An item is considered large if it subscribes to more than 100 topics, and small otherwise.\n• Prefer Big: inspect the items in a random order, and keep a buffer of up to 100 small items; when receiving a large item, put it on the least loaded component; when the buffer is full, place all the small items according to greedy.\n• Greedy: assign the items to the component they have the most topics in common with. We consider two variants: items arrive in random order, and items arrive in decreasing order of the number of topics. We allow a slack (parameter c) of up to 100 topics.\n• Proportional Allocation: inspect the items in decreasing order of the number of topics; the probability an item is assigned to a component is proportional to the number of common topics.\nResults. Greedy generally outperforms other online heuristics (see Figure 4). Also, its performance is improved if items arrive in decreasing order of number of topics. Intuitively, items with larger number of topics provide more information about the underlying structure of the bipartite graph than the items with smaller number of topics. Interestingly, adding randomness to the greedy assignment made it perform far worse; most times Proportional Assignment approached the worst case scenario. Random assignment outperformed Proportional Assignment and regularly outperformed Prefer Big and Balance Big item assignment strategies.\nOffline methods. We also tested the streaming algorithm for a wide range of synthetic input bipartite graphs according to the model defined in this paper, and several offline approaches for the problem including hMetis [11], label propagation, basic spectral methods, and PARSA [13]. We found that label propagation and spectral methods are extremely time and memory intensive on our inputs, due to the large number of topics and item-topic edges. hMetis returns within seconds, however the assignments were not competitive. However, hMetis provides balanced hypergraph cuts, which are not necessarily a good solution to our problem.\nCompared to PARSA on bipartite graph inputs, greedy provides assignments with up to 3x higher max partition load. On social graphs, the performance difference can be as high as 5x. This discrepancy is natural since PARSA has the advantage of performing multiple passes through the input."
    }, {
      "heading" : "5 Related Work",
      "text" : "The related problem of min-max multi-way graph cut problem, originally introduced in [23], is defined as follows: given an input graph, the objective is to component the set of vertices such that the maximum number of edges adjacent to a component is minimized. A similar problem was recently studied, e.g. [1], with respect to expansion, defined as the ratio of the sum of weights of edges adjacent to a component and the minimum between the sum of the weights of vertices within and outside the given component. The balanced graph partition problem is a bi-criteria optimization problem where the goal is to find a balanced partition of the set of vertices that minimizes the total number of edges cut. The best known approximation ratio for this problem is poly-logarithmic in the number of vertices [12]. The balanced graph partition problem was also considered for the set of edges of a graph [2]. The related problem of community detection in an input graph data has been commonly studied for the planted partition model, also well known as stochastic block model. Tight conditions for recovery of hidden clusters are known from the recent work in [16] and [14], as well as various approximation algorithms, e.g. see [3]. Some variants of hypergraph partition problems were studied by the machine learning research community, including balanced cuts studied by [9] using relaxations based on the concept of total variation, and the maximum likelihood identification of hidden clusters [17]. The difference is that we consider the min-max multi-way cut problem for a hypergraph in the streaming computation model. PARSA [13] considers the same problem in an offline model, where the entire input is initially available to the algorithm, and provides an efficient distributed algorithm for optimizing multiple criteria. A key component of PARSA is a procedure for optimizing the order of examining vertices. By contrast, we focus on performance under arbitrary arrival order, and provide analytic guarantees under a stochastic input model.\nStreaming computation with limited memory was considered for various canonical problems such as principal component analysis [15], community detection [22], balanced graph partition [20, 21], and query placement [24]. For the class of (hyper)graph partition problems, most of the work is restricted to studying various streaming heuristics using empirical evaluations with a few notable exceptions. A first theoretical analysis of streaming algorithms for balanced graph partitioning was presented in [19] using the framework similar to the one deployed in this paper. The paper gives sufficient conditions for a greedy streaming strategy to recover clusters of vertices for the input graph according to stochastic block model, which makes irrevocable assignments of vertices as they are observed in the input stream and uses memory limited to grow linearly with the number of clusters. As in our case, the argument uses a reduction to Polya urn processes. The two main differences with our work is that we consider a different problem (min-max hypergraph partition) and this requires a novel proof technique based on a two-step reduction to Polya urn processes. Streaming algorithms for the recovery of clusters in a stochastic block model were also studied in [22], under a weaker computation model, which does not require irrevocable assignments of vertices at instances they are presented in the input stream and allows for memory polynomial in the number of vertices."
    }, {
      "heading" : "6 Conclusion",
      "text" : "We studied the min-max hypergraph partitioning problem in the streaming computation model with the size of memory limited to be at most linear in the number of the components of the partition. We established first approximation guarantees for inputs according to a random bipartite graph with hidden co-clusters, and evaluated performance on several real-world input graphs. There are several interesting open questions for future work. It is of interest to study the tightness of the given recovery condition, and, in general, better understand the trade-off between the memory size and the accuracy of the recovery. It is also of interest to consider the recovery problem for a wider set of random bipartite graph models. Another question of interest is to consider dynamic graph inputs with addition and deletion of items and topics."
    } ],
    "references" : [ {
      "title" : "Min-max graph partitioning and small set expansion",
      "author" : [ "N. Bansal", "U. Feige", "R. Krauthgamer", "K. Makarychev", "V. Nagarajan", "J. SeffiNaor", "R. Schwartz" ],
      "venue" : "SIAM J. on Computing,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2014
    }, {
      "title" : "Balanced graph edge partition",
      "author" : [ "F. Bourse", "M. Lelarge", "M. Vojnovic" ],
      "venue" : "In Proc. of ACM KDD,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2014
    }, {
      "title" : "Clustering sparse graphs",
      "author" : [ "Y. Chen", "S. Sanghavi", "H. Xu" ],
      "venue" : "In Proc. of NIPS,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2012
    }, {
      "title" : "Biclustering of expression data",
      "author" : [ "Y. Cheng", "G.M. Church" ],
      "venue" : "In Ismb,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2000
    }, {
      "title" : "Generalizations of Polya’s urn problem",
      "author" : [ "F. Chung", "S. Handjani", "D. Jungreis" ],
      "venue" : "Annals of Combinatorics,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2003
    }, {
      "title" : "Co-clustering documents and words using bipartite spectral graph partitioning",
      "author" : [ "I.S. Dhillon" ],
      "venue" : "In Proc. of ACM KDD,",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2001
    }, {
      "title" : "Information-theoretic co-clustering",
      "author" : [ "I.S. Dhillon", "S. Mallela", "D.S. Modha" ],
      "venue" : "In Proc. of ACM KDD,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2003
    }, {
      "title" : "Community detection in graphs",
      "author" : [ "S. Fortunato" ],
      "venue" : "Physics Reports,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 2010
    }, {
      "title" : "The total variation on hypergraphs - learning hypergraphs revisited",
      "author" : [ "M. Hein", "S. Setzer", "L. Jost", "S.S. Rangapuram" ],
      "venue" : "In Proc. of NIPS,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2013
    }, {
      "title" : "Hermes: clustering users in large-scale e-mail services",
      "author" : [ "T. Karagiannis", "C. Gkantsidis", "D. Narayanan", "A. Rowstron" ],
      "venue" : "In Proc. of ACM SoCC,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 2010
    }, {
      "title" : "Multilevel k-way hypergraph partitioning",
      "author" : [ "G. Karypis", "V. Kumar" ],
      "venue" : "VLSI Design,",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2000
    }, {
      "title" : "Partitioning graphs into balanced components",
      "author" : [ "R. Krauthgamer", "J.S. Naor", "R. Schwartz" ],
      "venue" : null,
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 2009
    }, {
      "title" : "Graph partitioning via parallel submodular approximation to accelerate distributed machine learning",
      "author" : [ "M. Li", "D.G. Andersen", "A.J. Smola" ],
      "venue" : "arXiv preprint arXiv:1505.04636,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2015
    }, {
      "title" : "Community detection thresholds and the weak Ramanujan property",
      "author" : [ "L. Massoulié" ],
      "venue" : "In Proc. of ACM STOC,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 2014
    }, {
      "title" : "Memory limited, streaming PCA",
      "author" : [ "I. Mitliagkas", "C. Caramanis", "P. Jain" ],
      "venue" : "In Proc. of NIPS,",
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 2013
    }, {
      "title" : "Reconstruction and estimation in the planted partition model",
      "author" : [ "E. Mossel", "J. Neeman", "A. Sly" ],
      "venue" : "Probability Theory and Related Fields,",
      "citeRegEx" : "16",
      "shortCiteRegEx" : "16",
      "year" : 2014
    }, {
      "title" : "Biclustering using message passing",
      "author" : [ "L. O’Connor", "S. Feizi" ],
      "venue" : "In Proc. of NIPS,",
      "citeRegEx" : "17",
      "shortCiteRegEx" : "17",
      "year" : 2014
    }, {
      "title" : "The little engine(s) that could: Scaling online social networks",
      "author" : [ "J.M. Pujol" ],
      "venue" : "IEEE/ACM Trans. Netw.,",
      "citeRegEx" : "18",
      "shortCiteRegEx" : "18",
      "year" : 2012
    }, {
      "title" : "Streaming balanced graph partitioning algorithms for random graphs",
      "author" : [ "I. Stanton" ],
      "venue" : "In Proc. of ACM-SIAM SODA,",
      "citeRegEx" : "19",
      "shortCiteRegEx" : "19",
      "year" : 2014
    }, {
      "title" : "Streaming graph partitioning for large distributed graphs",
      "author" : [ "I. Stanton", "G. Kliot" ],
      "venue" : "In Proc. of ACM KDD,",
      "citeRegEx" : "20",
      "shortCiteRegEx" : "20",
      "year" : 2012
    }, {
      "title" : "FENNEL: streaming graph partitioning for massive scale graphs",
      "author" : [ "C.E. Tsourakakis", "C. Gkantsidis", "B. Radunovic", "M. Vojnovic" ],
      "venue" : "In Proc. of ACM WSDM,",
      "citeRegEx" : "21",
      "shortCiteRegEx" : "21",
      "year" : 2014
    }, {
      "title" : "Streaming, memory limited algorithms for community detection",
      "author" : [ "S.-Y. Yun", "M. Lelarge", "A. Proutiere" ],
      "venue" : "In Proc. of NIPS,",
      "citeRegEx" : "22",
      "shortCiteRegEx" : "22",
      "year" : 2014
    }, {
      "title" : "Min-max multiway cut",
      "author" : [ "Z.Z. Svitkina", "E. Tardos" ],
      "venue" : "Proc. of APPROX/RANDOM,",
      "citeRegEx" : "23",
      "shortCiteRegEx" : "23",
      "year" : 2004
    }, {
      "title" : "Herding small streaming queries",
      "author" : [ "B. Zong", "C. Gkantsidis", "M. Vojnovic" ],
      "venue" : "In Proc. of ACM DEBS,",
      "citeRegEx" : "24",
      "shortCiteRegEx" : "24",
      "year" : 2015
    } ],
    "referenceMentions" : [ {
      "referenceID" : 9,
      "context" : "The same fundamental problem also arises in processing of complex data workloads, including enterprise emails [10], online social networks [18], graph data processing and machine learning computation platforms [20, 21, 2], and load balancing in modern streaming query processing platforms [24].",
      "startOffset" : 110,
      "endOffset" : 114
    }, {
      "referenceID" : 17,
      "context" : "The same fundamental problem also arises in processing of complex data workloads, including enterprise emails [10], online social networks [18], graph data processing and machine learning computation platforms [20, 21, 2], and load balancing in modern streaming query processing platforms [24].",
      "startOffset" : 139,
      "endOffset" : 143
    }, {
      "referenceID" : 19,
      "context" : "The same fundamental problem also arises in processing of complex data workloads, including enterprise emails [10], online social networks [18], graph data processing and machine learning computation platforms [20, 21, 2], and load balancing in modern streaming query processing platforms [24].",
      "startOffset" : 210,
      "endOffset" : 221
    }, {
      "referenceID" : 20,
      "context" : "The same fundamental problem also arises in processing of complex data workloads, including enterprise emails [10], online social networks [18], graph data processing and machine learning computation platforms [20, 21, 2], and load balancing in modern streaming query processing platforms [24].",
      "startOffset" : 210,
      "endOffset" : 221
    }, {
      "referenceID" : 1,
      "context" : "The same fundamental problem also arises in processing of complex data workloads, including enterprise emails [10], online social networks [18], graph data processing and machine learning computation platforms [20, 21, 2], and load balancing in modern streaming query processing platforms [24].",
      "startOffset" : 210,
      "endOffset" : 221
    }, {
      "referenceID" : 23,
      "context" : "The same fundamental problem also arises in processing of complex data workloads, including enterprise emails [10], online social networks [18], graph data processing and machine learning computation platforms [20, 21, 2], and load balancing in modern streaming query processing platforms [24].",
      "startOffset" : 289,
      "endOffset" : 293
    }, {
      "referenceID" : 5,
      "context" : "This model is similar in spirit to the popular stochastic block model of an undirected graph, and it corresponds to a hidden co-clustering [6, 7, 17, 4] model of an undirected bipartite graph.",
      "startOffset" : 139,
      "endOffset" : 152
    }, {
      "referenceID" : 6,
      "context" : "This model is similar in spirit to the popular stochastic block model of an undirected graph, and it corresponds to a hidden co-clustering [6, 7, 17, 4] model of an undirected bipartite graph.",
      "startOffset" : 139,
      "endOffset" : 152
    }, {
      "referenceID" : 16,
      "context" : "This model is similar in spirit to the popular stochastic block model of an undirected graph, and it corresponds to a hidden co-clustering [6, 7, 17, 4] model of an undirected bipartite graph.",
      "startOffset" : 139,
      "endOffset" : 152
    }, {
      "referenceID" : 3,
      "context" : "This model is similar in spirit to the popular stochastic block model of an undirected graph, and it corresponds to a hidden co-clustering [6, 7, 17, 4] model of an undirected bipartite graph.",
      "startOffset" : 139,
      "endOffset" : 152
    }, {
      "referenceID" : 4,
      "context" : "In turn, this allows us to couple the assignment strategy with a Polya urn process [5] with “rich-get-richer” dynamics, which implies that the policy converges to assigning each item from a hidden cluster to the same partition.",
      "startOffset" : 83,
      "endOffset" : 86
    }, {
      "referenceID" : 22,
      "context" : "We note that this problem is an instance of the submodular load balancing, as defined in [23].",
      "startOffset" : 89,
      "endOffset" : 93
    }, {
      "referenceID" : 4,
      "context" : "We make use of a Polya urn process [5], which is defined as follows.",
      "startOffset" : 35,
      "endOffset" : 38
    }, {
      "referenceID" : 10,
      "context" : "We also tested the streaming algorithm for a wide range of synthetic input bipartite graphs according to the model defined in this paper, and several offline approaches for the problem including hMetis [11], label propagation, basic spectral methods, and PARSA [13].",
      "startOffset" : 202,
      "endOffset" : 206
    }, {
      "referenceID" : 12,
      "context" : "We also tested the streaming algorithm for a wide range of synthetic input bipartite graphs according to the model defined in this paper, and several offline approaches for the problem including hMetis [11], label propagation, basic spectral methods, and PARSA [13].",
      "startOffset" : 261,
      "endOffset" : 265
    }, {
      "referenceID" : 22,
      "context" : "The related problem of min-max multi-way graph cut problem, originally introduced in [23], is defined as follows: given an input graph, the objective is to component the set of vertices such that the maximum number of edges adjacent to a component is minimized.",
      "startOffset" : 85,
      "endOffset" : 89
    }, {
      "referenceID" : 0,
      "context" : "[1], with respect to expansion, defined as the ratio of the sum of weights of edges adjacent to a component and the minimum between the sum of the weights of vertices within and outside the given component.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 11,
      "context" : "The best known approximation ratio for this problem is poly-logarithmic in the number of vertices [12].",
      "startOffset" : 98,
      "endOffset" : 102
    }, {
      "referenceID" : 1,
      "context" : "The balanced graph partition problem was also considered for the set of edges of a graph [2].",
      "startOffset" : 89,
      "endOffset" : 92
    }, {
      "referenceID" : 15,
      "context" : "Tight conditions for recovery of hidden clusters are known from the recent work in [16] and [14], as well as various approximation algorithms, e.",
      "startOffset" : 83,
      "endOffset" : 87
    }, {
      "referenceID" : 13,
      "context" : "Tight conditions for recovery of hidden clusters are known from the recent work in [16] and [14], as well as various approximation algorithms, e.",
      "startOffset" : 92,
      "endOffset" : 96
    }, {
      "referenceID" : 8,
      "context" : "Some variants of hypergraph partition problems were studied by the machine learning research community, including balanced cuts studied by [9] using relaxations based on the concept of total variation, and the maximum likelihood identification of hidden clusters [17].",
      "startOffset" : 139,
      "endOffset" : 142
    }, {
      "referenceID" : 16,
      "context" : "Some variants of hypergraph partition problems were studied by the machine learning research community, including balanced cuts studied by [9] using relaxations based on the concept of total variation, and the maximum likelihood identification of hidden clusters [17].",
      "startOffset" : 263,
      "endOffset" : 267
    }, {
      "referenceID" : 12,
      "context" : "PARSA [13] considers the same problem in an offline model, where the entire input is initially available to the algorithm, and provides an efficient distributed algorithm for optimizing multiple criteria.",
      "startOffset" : 6,
      "endOffset" : 10
    }, {
      "referenceID" : 14,
      "context" : "Streaming computation with limited memory was considered for various canonical problems such as principal component analysis [15], community detection [22], balanced graph partition [20, 21], and query placement [24].",
      "startOffset" : 125,
      "endOffset" : 129
    }, {
      "referenceID" : 21,
      "context" : "Streaming computation with limited memory was considered for various canonical problems such as principal component analysis [15], community detection [22], balanced graph partition [20, 21], and query placement [24].",
      "startOffset" : 151,
      "endOffset" : 155
    }, {
      "referenceID" : 19,
      "context" : "Streaming computation with limited memory was considered for various canonical problems such as principal component analysis [15], community detection [22], balanced graph partition [20, 21], and query placement [24].",
      "startOffset" : 182,
      "endOffset" : 190
    }, {
      "referenceID" : 20,
      "context" : "Streaming computation with limited memory was considered for various canonical problems such as principal component analysis [15], community detection [22], balanced graph partition [20, 21], and query placement [24].",
      "startOffset" : 182,
      "endOffset" : 190
    }, {
      "referenceID" : 23,
      "context" : "Streaming computation with limited memory was considered for various canonical problems such as principal component analysis [15], community detection [22], balanced graph partition [20, 21], and query placement [24].",
      "startOffset" : 212,
      "endOffset" : 216
    }, {
      "referenceID" : 18,
      "context" : "A first theoretical analysis of streaming algorithms for balanced graph partitioning was presented in [19] using the framework similar to the one deployed in this paper.",
      "startOffset" : 102,
      "endOffset" : 106
    }, {
      "referenceID" : 21,
      "context" : "Streaming algorithms for the recovery of clusters in a stochastic block model were also studied in [22], under a weaker computation model, which does not require irrevocable assignments of vertices at instances they are presented in the input stream and allows for memory polynomial in the number of vertices.",
      "startOffset" : 99,
      "endOffset" : 103
    } ],
    "year" : 2015,
    "abstractText" : "In many applications, the data is of rich structure that can be represented by a hypergraph, where the data items are represented by vertices and the associations among items are represented by hyperedges. Equivalently, we are given an input bipartite graph with two types of vertices: items, and associations (which we refer to as topics). We consider the problem of partitioning the set of items into a given number of components such that the maximum number of topics covered by a component is minimized. This is a clustering problem with various applications, e.g. partitioning of a set of information objects such as documents, images, and videos, and load balancing in the context of modern computation platforms. In this paper, we focus on the streaming computation model for this problem, in which items arrive online one at a time and each item must be assigned irrevocably to a component at its arrival time. Motivated by scalability requirements, we focus on the class of streaming computation algorithms with memory limited to be at most linear in the number of components. We show that a greedy assignment strategy is able to recover a hidden co-clustering of items under a natural set of recovery conditions. We also report results of an extensive empirical evaluation, which demonstrate that this greedy strategy yields superior performance when compared with alternative approaches.",
    "creator" : null
  }
}