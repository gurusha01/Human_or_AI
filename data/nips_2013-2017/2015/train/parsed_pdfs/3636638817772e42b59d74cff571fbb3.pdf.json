{
  "name" : "3636638817772e42b59d74cff571fbb3.pdf",
  "metadata" : {
    "source" : "META",
    "title" : "Extending Gossip Algorithms to Distributed Estimation of U-statistics",
    "authors" : [ "Igor Colin", "Joseph Salmon", "Stéphan Clémençon", "Aurélien Bellet" ],
    "emails" : [ "first.last@telecom-paristech.fr", "aurelien.bellet@inria.fr" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "Decentralized computation and estimation have many applications in sensor and peer-to-peer networks as well as for extracting knowledge from massive information graphs such as interlinked Web documents and on-line social media. Algorithms running on such networks must often operate under tight constraints: the nodes forming the network cannot rely on a centralized entity for communication and synchronization, without being aware of the global network topology and/or have limited resources (computational power, memory, energy). Gossip algorithms [19, 18, 5], where each node exchanges information with at most one of its neighbors at a time, have emerged as a simple yet powerful technique for distributed computation in such settings. Given a data observation on each node, gossip algorithms can be used to compute averages or sums of functions of the data that are separable across observations (see for example [10, 2, 15, 11, 9] and references therein). Unfortunately, these algorithms cannot be used to efficiently compute quantities that take the form of an average over pairs of observations, also known as U -statistics [12]. Among classical U -statistics used in machine learning and data mining, one can mention, among others: the sample variance, the Area Under the Curve (AUC) of a classifier on distributed data, the Gini mean difference, the Kendall tau rank correlation coefficient, the within-cluster point scatter and several statistical hypothesis test statistics such as Wilcoxon Mann-Whitney [14].\nIn this paper, we propose randomized synchronous and asynchronous gossip algorithms to efficiently compute a U -statistic, in which each node maintains a local estimate of the quantity of interest throughout the execution of the algorithm. Our methods rely on two types of iterative information exchange in the network: propagation of local observations across the network, and averaging of lo-\ncal estimates. We show that the local estimates generated by our approach converge in expectation to the value of the U -statistic at rates of O(1/t) and O(log t/t) for the synchronous and asynchronous versions respectively, where t is the number of iterations. These convergence bounds feature datadependent terms that reflect the hardness of the estimation problem, and network-dependent terms related to the spectral gap of the network graph [3], showing that our algorithms are faster on wellconnected networks. The proofs rely on an original reformulation of the problem using “phantom nodes”, i.e., on additional nodes that account for data propagation in the network. Our results largely improve upon those presented in [17]: in particular, we achieve faster convergence together with lower memory and communication costs. Experiments conducted on AUC and within-cluster point scatter estimation using real data confirm the superiority of our approach.\nThe rest of this paper is organized as follows. Section 2 introduces the problem of interest as well as relevant notation. Section 3 provides a brief review of the related work in gossip algorithms. We then describe our approach along with the convergence analysis in Section 4, both in the synchronous and asynchronous settings. Section 5 presents our numerical results."
    }, {
      "heading" : "2 Background",
      "text" : ""
    }, {
      "heading" : "2.1 Definitions and Notations",
      "text" : "For any integer p > 0, we denote by [p] the set {1, . . . , p} and by |F | the cardinality of any finite set F . We represent a network of size n > 0 as an undirected graph G = (V,E), where V = [n] is the set of vertices and E ⊆ V × V the set of edges. We denote by A(G) the adjacency matrix related to the graph G, that is for all (i, j) ∈ V 2, [A(G)]ij = 1 if and only if (i, j) ∈ E. For any node i ∈ V , we denote its degree by di = |{j : (i, j) ∈ E}|. We denote by L(G) the graph Laplacian of G, defined by L(G) = D(G)−A(G) where D(G) = diag(d1, . . . , dn) is the matrix of degrees. A graphG = (V,E) is said to be connected if for all (i, j) ∈ V 2 there exists a path connecting i and j; it is bipartite if there exist S, T ⊂ V such that S ∪ T = V , S ∩ T = ∅ and E ⊆ (S × T )∪ (T × S). A matrix M ∈ Rn×n is nonnegative (resp. positive) if and only if for all (i, j) ∈ [n]2, [M ]ij ≥ 0, (resp. [M ]ij > 0). We write M ≥ 0 (resp. M > 0) when this holds. The transpose of M is denoted by M>. A matrix P ∈ Rn×n is stochastic if and only if P ≥ 0 and P1n = 1n, where 1n = (1, . . . , 1)\n> ∈ Rn. The matrix P ∈ Rn×n is bi-stochastic if and only if P and P> are stochastic. We denote by In the identity matrix in Rn×n, (e1, . . . , en) the standard basis in Rn, I{E} the indicator function of an event E and ‖ · ‖ the usual `2 norm."
    }, {
      "heading" : "2.2 Problem Statement",
      "text" : "LetX be an input space and (X1, . . . , Xn) ∈ Xn a sample of n ≥ 2 points in that space. We assume X ⊆ Rd for some d > 0 throughout the paper, but our results straightforwardly extend to the more general setting. We denote as X = (X1, . . . , Xn)> the design matrix. Let H : X × X → R be a measurable function, symmetric in its two arguments and with H(X,X) = 0, ∀X ∈ X . We consider the problem of estimating the following quantity, known as a degree two U -statistic [12]:1\nÛn(H) = 1\nn2 n∑ i,j=1 H(Xi, Xj). (1)\nIn this paper, we illustrate the interest of U -statistics on two applications, among many others. The first one is the within-cluster point scatter [4], which measures the clustering quality of a partition P of X as the average distance between points in each cell C ∈ P . It is of the form (1) with\nHP(X,X ′) = ‖X −X ′‖ · ∑ C∈P I{(X,X′)∈C2}. (2)\nWe also study the AUC measure [8]. For a given sample (X1, `1), . . . , (Xn, `n) on X × {−1,+1}, the AUC measure of a linear classifier θ ∈ Rd−1 is given by:\nAUC(θ) =\n∑ 1≤i,j≤n(1− `i`j)I{`i(θ>Xi)>−`j(θ>Xj)}\n4 (∑ 1≤i≤n I{`i=1} )(∑ 1≤i≤n I{`i=−1} ) . (3)\n1We point out that the usual definition of U -statistic differs slightly from (1) by a factor of n/(n− 1).\nAlgorithm 1 GoSta-sync: a synchronous gossip algorithm for computing a U -statistic Require: Each node k holds observation Xk 1: Each node k initializes its auxiliary observation Yk = Xk and its estimate Zk = 0 2: for t = 1, 2, . . . do 3: for p = 1, . . . , n do 4: Set Zp ← t−1t Zp + 1 t H(Xp, Yp)\n5: end for 6: Draw (i, j) uniformly at random from E 7: Set Zi, Zj ← 12 (Zi + Zj) 8: Swap auxiliary observations of nodes i and j: Yi ↔ Yj 9: end for\nThis score is the probability for a classifier to rank a positive observation higher than a negative one.\nWe focus here on the decentralized setting, where the data sample is partitioned across a set of nodes in a network. For simplicity, we assume V = [n] and each node i ∈ V only has access to a single data observation Xi.2 We are interested in estimating (1) efficiently using a gossip algorithm."
    }, {
      "heading" : "3 Related Work",
      "text" : "Gossip algorithms have been extensively studied in the context of decentralized averaging in networks, where the goal is to compute the average of n real numbers (X = R):\nX̄n = 1\nn n∑ i=1 Xi = 1 n X>1n. (4)\nOne of the earliest work on this canonical problem is due to [19], but more efficient algorithms have recently been proposed, see for instance [10, 2]. Of particular interest to us is the work of [2], which introduces a randomized gossip algorithm for computing the empirical mean (4) in a context where nodes wake up asynchronously and simply average their local estimate with that of a randomly chosen neighbor. The communication probabilities are given by a stochastic matrix P , where pij is the probability that a node i selects neighbor j at a given iteration. As long as the network graph is connected and non-bipartite, the local estimates converge to (4) at a rate O(e−ct) where the constant c can be tied to the spectral gap of the network graph [3], showing faster convergence for well-connected networks.3 Such algorithms can be extended to compute other functions such as maxima and minima, or sums of the form ∑n i=1 f(Xi) for some function f : X → R (as done for instance in [15]). Some work has also gone into developing faster gossip algorithms for poorly connected networks, assuming that nodes know their (partial) geographic location [6, 13]. For a detailed account of the literature on gossip algorithms, we refer the reader to [18, 5].\nHowever, existing gossip algorithms cannot be used to efficiently compute (1) as it depends on pairs of observations. To the best of our knowledge, this problem has only been investigated in [17]. Their algorithm, coined U2-gossip, achieves O(1/t) convergence rate but has several drawbacks. First, each node must store two auxiliary observations, and two pairs of nodes must exchange an observation at each iteration. For high-dimensional problems (large d), this leads to a significant memory and communication load. Second, the algorithm is not asynchronous as every node must update its estimate at each iteration. Consequently, nodes must have access to a global clock, which is often unrealistic in practice. In the next section, we introduce new synchronous and asynchronous algorithms with faster convergence as well as smaller memory and communication cost per iteration."
    }, {
      "heading" : "4 GoSta Algorithms",
      "text" : "In this section, we introduce gossip algorithms for computing (1). Our approach is based on the observation that Ûn(H) = 1/n ∑n i=1 hi, with hi = 1/n ∑n j=1H(Xi, Xj), and we write h = (h1, . . . , hn) >. The goal is thus similar to the usual distributed averaging problem (4), with the\n2Our results generalize to the case where each node holds a subset of the observations (see Section 4). 3For the sake of completeness, we provide an analysis of this algorithm in the supplementary material.\nkey difference that each local value hi is itself an average depending on the entire data sample. Consequently, our algorithms will combine two steps at each iteration: a data propagation step to allow each node i to estimate hi, and an averaging step to ensure convergence to the desired value Ûn(H). We first present the algorithm and its analysis for the (simpler) synchronous setting in Section 4.1, before introducing an asynchronous version (Section 4.2)."
    }, {
      "heading" : "4.1 Synchronous Setting",
      "text" : "In the synchronous setting, we assume that the nodes have access to a global clock so that they can all update their estimate at each time instance. We stress that the nodes need not to be aware of the global network topology as they will only interact with their direct neighbors in the graph.\nLet us denote by Zk(t) the (local) estimate of Ûn(H) by node k at iteration t. In order to propagate data across the network, each node k maintains an auxiliary observation Yk, initialized to Xk. Our algorithm, coined GoSta, goes as follows. At each iteration, each node k updates its local estimate by taking the running average of Zk(t) and H(Xk, Yk). Then, an edge of the network is drawn uniformly at random, and the corresponding pair of nodes average their local estimates and swap their auxiliary observations. The observations are thus each performing a random walk (albeit coupled) on the network graph. The full procedure is described in Algorithm 1.\nIn order to prove the convergence of Algorithm 1, we consider an equivalent reformulation of the problem which allows us to model the data propagation and the averaging steps separately. Specifically, for each k ∈ V , we define a phantom Gk = (Vk, Ek) of the original network G, with Vk = {vki ; 1 ≤ i ≤ n} and Ek = {(vki , vkj ); (i, j) ∈ E}. We then create a new graph G̃ = (Ṽ , Ẽ) where each node k ∈ V is connected to its counterpart vkk ∈ Vk:{\nṼ = V ∪ (∪nk=1Vk) Ẽ = E ∪ (∪nk=1Ek) ∪ {(k, vkk); k ∈ V }\nThe construction of G̃ is illustrated in Figure 1. In this new graph, the nodes V from the original network will hold the estimates Z1(t), . . . , Zn(t) as described above. The role of each Gk is to simulate the data propagation in the original graph G. For i ∈ [n], vki ∈ V k initially holds the value H(Xk, Xi). At each iteration, we draw a random edge (i, j) of G and nodes vki and v k j swap their value for all k ∈ [n]. To update its estimate, each node k will use the current value at vkk .\nWe can now represent the system state at iteration t by a vector S(t) = (S1(t)>,S2(t)>)> ∈ Rn+n2 . The first n coefficients, S1(t), are associated with nodes in V and correspond to the estimate vector Z(t) = [Z1(t), . . . , Zn(t)]>. The last n2 coefficients, S2(t), are associated with nodes in (Vk)1≤k≤n and represent the data propagation in the network. Their initial value is set to S2(0) = (e>1 H, . . . , e > nH) so that for any (k, l) ∈ [n]2, node vkl initially stores the value H(Xk, Xl).\nRemark 1. The “phantom network” G̃ is of size O(n2), but we stress the fact that it is used solely as a tool for the convergence analysis: Algorithm 1 operates on the original graph G.\nThe transition matrix of this system accounts for three events: the averaging step (the action of G on itself), the data propagation (the action of Gk on itself for all k ∈ V ) and the estimate update\n(the action of Gk on node k for all k ∈ V ). At a given step t > 0, we are interested in characterizing the transition matrix M(t) such that E[S(t + 1)] = M(t)E[S(t)]. For the sake of clarity, we write M(t) as an upper block-triangular (n+ n2)× (n+ n2) matrix:\nM(t) =\n( M1(t) M2(t)\n0 M3(t)\n) , (5)\nwith M1(t) ∈ Rn×n, M2(t) ∈ Rn×n 2 and M3(t) ∈ Rn 2×n2 . The bottom left part is necessarily 0, because G does not influence any Gk. The upper left M1(t) block corresponds to the averaging step; therefore, for any t > 0, we have:\nM1(t) = t− 1 t · 1 |E| ∑ (i,j)∈E ( In − 1 2 (ei − ej)(ei − ej)> ) = t− 1 t W2 (G) ,\nwhere for any α > 1, Wα(G) is defined by:\nWα(G) = 1 |E| ∑\n(i,j)∈E\n( In − 1\nα (ei − ej)(ei − ej)>\n) = In − 2\nα|E| L(G). (6)\nFurthermore, M2(t) and M3(t) are defined as follows:\nM2(t) = 1\nt  e>1 0 · · · 0 0 . . . ... ...\n. . . 0 0 · · · 0 e>n  ︸ ︷︷ ︸\nB\nand M3(t) =  W1 (G) 0 · · · 0 0 . . . ... ... . . . ...\n0 · · · 0 W1 (G)  ︸ ︷︷ ︸\nC\n,\nwhere M2(t) is a block diagonal matrix corresponding to the observations being propagated, and M3(t) represents the estimate update for each node k. Note that M3(t) = W1 (G)⊗ In where ⊗ is the Kronecker product.\nWe can now describe the expected state evolution. At iteration t = 0, one has: E[S(1)] = M(1)E[S(0)] = M(1)S(0) = (\n0 B 0 C\n)( 0\nS2(0)\n) = ( BS2(0) CS2(0) ) . (7)\nUsing recursion, we can write: E[S(t)] = M(t)M(t− 1) . . .M(1)S(0) = ( 1 t ∑t s=1W2 (G) t−s BCs−1S2(0)\nCtS2(0)\n) . (8)\nTherefore, in order to prove the convergence of Algorithm 1, one needs to show that limt→+∞ 1 t ∑t s=1W2 (G) t−s BCs−1S2(0) = Ûn(H)1n. We state this precisely in the next theorem. Theorem 1. Let G be a connected and non-bipartite graph with n nodes, X ∈ Rn×d a design matrix and (Z(t)) the sequence of estimates generated by Algorithm 1. For all k ∈ [n], we have:\nlim t→+∞\nE[Zk(t)] = 1\nn2 ∑ 1≤i,j≤n H(Xi, Xj) = Ûn(H). (9)\nMoreover, for any t > 0,∥∥∥E[Z(t)]− Ûn(H)1n∥∥∥ ≤ 1 ct ∥∥∥h− Ûn(H)1n∥∥∥+ ( 2 ct + e−ct )∥∥H− h1>n ∥∥ ,\nwhere c = c(G) := 1− λ2(2) and λ2(2) is the second largest eigenvalue of W2 (G).\nProof. See supplementary material.\nTheorem 1 shows that the local estimates generated by Algorithm 1 converge to Ûn(H) at a rate O(1/t). Furthermore, the constants reveal the rate dependency on the particular problem instance. Indeed, the two norm terms are data-dependent and quantify the difficulty of the estimation problem itself through a dispersion measure. In contrast, c(G) is a network-dependent term since 1−λ2(2) = βn−1/|E|, where βn−1 is the second smallest eigenvalue of the graph LaplacianL(G) (see Lemma 1 in the supplementary material). The value βn−1 is also known as the spectral gap of G and graphs with a larger spectral gap typically have better connectivity [3]. This will be illustrated in Section 5.\nAlgorithm 2 GoSta-async: an asynchronous gossip algorithm for computing a U -statistic Require: Each node k holds observation Xk and pk = 2dk/|E| 1: Each node k initializes Yk = Xk, Zk = 0 and mk = 0 2: for t = 1, 2, . . . do 3: Draw (i, j) uniformly at random from E 4: Set mi ← mi + 1/pi and mj ← mj + 1/pj 5: Set Zi, Zj ← 12 (Zi + Zj) 6: Set Zi ← (1− 1pimi )Zi + 1 pimi H(Xi, Yi)\n7: Set Zj ← (1− 1pjmj )Zj + 1 pjmj H(Xj , Yj) 8: Swap auxiliary observations of nodes i and j: Yi ↔ Yj 9: end for\nComparison to U2-gossip. To estimate Ûn(H), U2-gossip [17] does not use averaging. Instead, each node k requires two auxiliary observations Y (1)k and Y (2) k which are both initialized to Xk. At each iteration, each node k updates its local estimate by taking the running average of Zk and H(Y\n(1) k , Y (2) k ). Then, two random edges are selected: the nodes connected by the first (resp. second) edge swap their first (resp. second) auxiliary observations. A precise statement of the algorithm is provided in the supplementary material. U2-gossip has several drawbacks compared to GoSta: it requires initiating communication between two pairs of nodes at each iteration, and the amount of communication and memory required is higher (especially when data is high-dimensional). Furthermore, applying our convergence analysis to U2-gossip, we obtain the following refined rate:4∥∥∥E[Z(t)]− Ûn(H)1n∥∥∥ ≤ √n\nt\n( 2\n1− λ2(1) ∥∥∥h− Ûn(H)1n∥∥∥+ 1 1− λ2(1)2 ∥∥H− h1>n ∥∥) , (10)\nwhere 1 − λ2(1) = 2(1 − λ2(2)) = 2c(G) and λ2(1) is the second largest eigenvalue of W1(G). The advantage of propagating two observations in U2-gossip is seen in the 1/(1 − λ2(1)2) term, however the absence of averaging leads to an overall √ n factor. Intuitively, this is because nodes do not benefit from each other’s estimates. In practice, λ2(2) and λ2(1) are close to 1 for reasonablysized networks (for instance, λ2(2) = 1 − 1/n for the complete graph), so the square term does not provide much gain and the √ n factor dominates in (10). We thus expect U2-gossip to converge slower than GoSta, which is confirmed by the numerical results presented in Section 5."
    }, {
      "heading" : "4.2 Asynchronous Setting",
      "text" : "In practical settings, nodes may not have access to a global clock to synchronize the updates. In this section, we remove the global clock assumption and propose a fully asynchronous algorithm where each node has a local clock, ticking at a rate 1 Poisson process. Yet, local clocks are i.i.d. so one can use an equivalent model with a global clock ticking at a rate n Poisson process and a random edge draw at each iteration, as in synchronous setting (one may refer to [2] for more details on clock modeling). However, at a given iteration, the estimate update step now only involves the selected pair of nodes. Therefore, the nodes need to maintain an estimate of the current iteration number to ensure convergence to an unbiased estimate of Ûn(H). Hence for all k ∈ [n], let pk ∈ [0, 1] denote the probability of node k being picked at any iteration. With our assumption that nodes activate with a uniform distribution over E, pk = 2dk/|E|. Moreover, the number of times a node k has been selected at a given iteration t > 0 follows a binomial distribution with parameters t and pk. Let us define mk(t) such that mk(0) = 0 and for t > 0:\nmk(t) = { mk(t− 1) + 1pk if k is picked at iteration t, mk(t− 1) otherwise.\n(11)\nFor any k ∈ [n] and any t > 0, one has E[mk(t)] = t × pk × 1/pk = t. Therefore, given that every node knows its degree and the total number of edges in the network, the iteration estimates are unbiased. We can now give an asynchronous version of GoSta, as stated in Algorithm 2.\nTo show that local estimates converge to Ûn(H), we use a similar model as in the synchronous setting. The time dependency of the transition matrix is more complex ; so is the upper bound.\n4The proof can be found in the supplementary material.\nTheorem 2. Let G be a connected and non bipartite graph with n nodes, X ∈ Rn×d a design matrix and (Z(t)) the sequence of estimates generated by Algorithm 2. For all k ∈ [n], we have:\nlim t→+∞\nE[Zk(t)] = 1\nn2 ∑ 1≤i,j≤n H(Xi, Xj) = Ûn(H). (12)\nMoreover, there exists a constant c′(G) > 0 such that, for any t > 1,∥∥∥E[Z(t)]− Ûn(H)1n∥∥∥ ≤ c′(G) · log t t ‖H‖. (13)\nProof. See supplementary material.\nRemark 2. Our methods can be extended to the situation where nodes contain multiple observations: when drawn, a node will pick a random auxiliary observation to swap. Similar convergence results are achieved by splitting each node into a set of nodes, each containing only one observation and new edges weighted judiciously."
    }, {
      "heading" : "5 Experiments",
      "text" : "In this section, we present two applications on real datasets: the decentralized estimation of the Area Under the ROC Curve (AUC) and of the within-cluster point scatter. We compare the performance of our algorithms to that of U2-gossip [17] — see supplementary material for additional comparisons to some baseline methods. We perform our simulations on the three types of network described below (corresponding values of 1− λ2(2) are shown in Table 1). • Complete graph: This is the case where all nodes are connected to each other. It is the ideal situation in our framework, since any pair of nodes can communicate directly. For a complete graph G of size n > 0, 1− λ2(2) = 1/n, see [1, Ch.9] or [3, Ch.1] for details. • Two-dimensional grid: Here, nodes are located on a 2D grid, and each node is connected to its four neighbors on the grid. This network offers a regular graph with isotropic communication, but its diameter ( √ n) is quite high, especially in comparison to usual scale-free networks.\n• Watts-Strogatz: This random network generation technique is introduced in [20] and allows us to create networks with various communication properties. It relies on two parameters: the average degree of the network k and a rewiring probability p. In expectation, the higher the rewiring probability, the better the connectivity of the network. Here, we use k = 5 and p = 0.3 to achieve a connectivity compromise between the complete graph and the two-dimensional grid.\nAUC measure. We first focus on the AUC measure of a linear classifier θ as defined in (3). We use the SMVguide3 binary classification dataset which contains n = 1260 points in d = 23 dimensions.5 We set θ to the difference between the class means. For each generated network, we perform 50 runs of GoSta-sync (Algorithm 1) and U2-gossip. The top row of Figure 2 shows the evolution over time of the average relative error and the associated standard deviation across nodes for both algorithms on each type of network. On average, GoSta-sync outperforms U2-gossip on every network. The variance of the estimates across nodes is also lower due to the averaging step. Interestingly, the performance gap between the two algorithms is greatly increasing early on, presumably because the exponential term in the convergence bound of GoSta-sync is significant in the first steps.\nWithin-cluster point scatter. We then turn to the within-cluster point scatter defined in (2). We use the Wine Quality dataset which contains n = 1599 points in d = 12 dimensions, with a total ofK = 11 classes.6 We focus on the partition P associated to class centroids and run the aforementioned\n5This dataset is available at http://mldata.org/repository/data/viewslug/svmguide3/ 6This dataset is available at https://archive.ics.uci.edu/ml/datasets/Wine\nmethods 50 times. The results are shown in the bottom row of Figure 2. As in the case of AUC, GoSta-sync achieves better perfomance on all types of networks, both in terms of average error and variance. In Figure 3a, we show the average time needed to reach a 0.2 relative error on a complete graph ranging from n = 50 to n = 1599. As predicted by our analysis, the performance gap widens in favor of GoSta as the size of the graph increases. Finally, we compare the performance of GoSta-sync and GoSta-async (Algorithm 2) in Figure 3b. Despite the slightly worse theoretical convergence rate for GoSta-async, both algorithms have comparable performance in practice."
    }, {
      "heading" : "6 Conclusion",
      "text" : "We have introduced new synchronous and asynchronous randomized gossip algorithms to compute statistics that depend on pairs of observations (U -statistics). We have proved the convergence rate in both settings, and numerical experiments confirm the practical interest of the proposed algorithms. In future work, we plan to investigate whether adaptive communication schemes (such as those of [6, 13]) can be used to speed-up our algorithms. Our contribution could also be used as a building block for decentralized optimization of U -statistics, extending for instance the approaches of [7, 16].\nAcknowledgements This work was supported by the chair Machine Learning for Big Data of Télécom ParisTech, and was conducted when A. Bellet was affiliated with Télécom ParisTech."
    } ],
    "references" : [ {
      "title" : "Modern Graph Theory, volume 184",
      "author" : [ "Béla Bollobás" ],
      "venue" : null,
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 1998
    }, {
      "title" : "Randomized gossip algorithms",
      "author" : [ "Stephen P. Boyd", "Arpita Ghosh", "Balaji Prabhakar", "Devavrat Shah" ],
      "venue" : "IEEE Transactions on Information Theory,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2006
    }, {
      "title" : "Spectral Graph Theory, volume 92",
      "author" : [ "Fan R.K. Chung" ],
      "venue" : "American Mathematical Society,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 1997
    }, {
      "title" : "On U-processes and clustering performance",
      "author" : [ "Stéphan Clémençon" ],
      "venue" : "In Advances in Neural Information Processing Systems",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2011
    }, {
      "title" : "Gossip Algorithms for Distributed Signal Processing",
      "author" : [ "Alexandros G. Dimakis", "Soummya Kar", "José M.F. Moura", "Michael G. Rabbat", "Anna Scaglione" ],
      "venue" : "Proceedings of the IEEE,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2010
    }, {
      "title" : "Geographic Gossip: Efficient Averaging for Sensor Networks",
      "author" : [ "Alexandros G. Dimakis", "Anand D. Sarwate", "Martin J. Wainwright" ],
      "venue" : "IEEE Transactions on Signal Processing,",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2008
    }, {
      "title" : "Dual Averaging for Distributed Optimization: Convergence Analysis and Network Scaling",
      "author" : [ "John C. Duchi", "Alekh Agarwal", "Martin J. Wainwright" ],
      "venue" : "IEEE Transactions on Automatic Control,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2012
    }, {
      "title" : "The meaning and use of the area under a receiver operating characteristic (ROC) curve",
      "author" : [ "James A. Hanley", "Barbara J. McNeil" ],
      "venue" : null,
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 1982
    }, {
      "title" : "Randomized rumor spreading",
      "author" : [ "Richard Karp", "Christian Schindelhauer", "Scott Shenker", "Berthold Vocking" ],
      "venue" : "In Symposium on Foundations of Computer Science,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2000
    }, {
      "title" : "Gossip-Based Computation of Aggregate Information",
      "author" : [ "David Kempe", "Alin Dobra", "Johannes Gehrke" ],
      "venue" : "In Symposium on Foundations of Computer Science,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 2003
    }, {
      "title" : "U-Statistics: Theory and Practice",
      "author" : [ "Alan J. Lee" ],
      "venue" : null,
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 1990
    }, {
      "title" : "Location-Aided Fast Distributed Consensus in Wireless Networks",
      "author" : [ "Wenjun Li", "Huaiyu Dai", "Yanbing Zhang" ],
      "venue" : "IEEE Transactions on Information Theory,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2010
    }, {
      "title" : "On a Test of Whether one of Two Random Variables is Stochastically Larger than the Other",
      "author" : [ "Henry B. Mann", "Donald R. Whitney" ],
      "venue" : "Annals of Mathematical Statistics,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 1947
    }, {
      "title" : "Fast distributed algorithms for computing separable functions",
      "author" : [ "Damon Mosk-Aoyama", "Devavrat Shah" ],
      "venue" : "IEEE Transactions on Information Theory,",
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 2008
    }, {
      "title" : "Distributed subgradient methods for multi-agent optimization",
      "author" : [ "Angelia Nedic", "Asuman Ozdaglar" ],
      "venue" : "IEEE Transactions on Automatic Control,",
      "citeRegEx" : "16",
      "shortCiteRegEx" : "16",
      "year" : 2009
    }, {
      "title" : "Gossip Algorithms for Computing U-Statistics",
      "author" : [ "Kristiaan Pelckmans", "Johan Suykens" ],
      "venue" : "In IFAC Workshop on Estimation and Control of Networked Systems,",
      "citeRegEx" : "17",
      "shortCiteRegEx" : "17",
      "year" : 2009
    }, {
      "title" : "Problems in decentralized decision making and computation",
      "author" : [ "John N. Tsitsiklis" ],
      "venue" : "PhD thesis, Massachusetts Institute of Technology,",
      "citeRegEx" : "19",
      "shortCiteRegEx" : "19",
      "year" : 1984
    }, {
      "title" : "Collective dynamics of ‘small-world’networks",
      "author" : [ "Duncan J Watts", "Steven H Strogatz" ],
      "venue" : "Nature, 393(6684):440–442,",
      "citeRegEx" : "20",
      "shortCiteRegEx" : "20",
      "year" : 1998
    } ],
    "referenceMentions" : [ {
      "referenceID" : 16,
      "context" : "Gossip algorithms [19, 18, 5], where each node exchanges information with at most one of its neighbors at a time, have emerged as a simple yet powerful technique for distributed computation in such settings.",
      "startOffset" : 18,
      "endOffset" : 29
    }, {
      "referenceID" : 4,
      "context" : "Gossip algorithms [19, 18, 5], where each node exchanges information with at most one of its neighbors at a time, have emerged as a simple yet powerful technique for distributed computation in such settings.",
      "startOffset" : 18,
      "endOffset" : 29
    }, {
      "referenceID" : 9,
      "context" : "Given a data observation on each node, gossip algorithms can be used to compute averages or sums of functions of the data that are separable across observations (see for example [10, 2, 15, 11, 9] and references therein).",
      "startOffset" : 178,
      "endOffset" : 196
    }, {
      "referenceID" : 1,
      "context" : "Given a data observation on each node, gossip algorithms can be used to compute averages or sums of functions of the data that are separable across observations (see for example [10, 2, 15, 11, 9] and references therein).",
      "startOffset" : 178,
      "endOffset" : 196
    }, {
      "referenceID" : 13,
      "context" : "Given a data observation on each node, gossip algorithms can be used to compute averages or sums of functions of the data that are separable across observations (see for example [10, 2, 15, 11, 9] and references therein).",
      "startOffset" : 178,
      "endOffset" : 196
    }, {
      "referenceID" : 8,
      "context" : "Given a data observation on each node, gossip algorithms can be used to compute averages or sums of functions of the data that are separable across observations (see for example [10, 2, 15, 11, 9] and references therein).",
      "startOffset" : 178,
      "endOffset" : 196
    }, {
      "referenceID" : 10,
      "context" : "Unfortunately, these algorithms cannot be used to efficiently compute quantities that take the form of an average over pairs of observations, also known as U -statistics [12].",
      "startOffset" : 170,
      "endOffset" : 174
    }, {
      "referenceID" : 12,
      "context" : "Among classical U -statistics used in machine learning and data mining, one can mention, among others: the sample variance, the Area Under the Curve (AUC) of a classifier on distributed data, the Gini mean difference, the Kendall tau rank correlation coefficient, the within-cluster point scatter and several statistical hypothesis test statistics such as Wilcoxon Mann-Whitney [14].",
      "startOffset" : 378,
      "endOffset" : 382
    }, {
      "referenceID" : 2,
      "context" : "These convergence bounds feature datadependent terms that reflect the hardness of the estimation problem, and network-dependent terms related to the spectral gap of the network graph [3], showing that our algorithms are faster on wellconnected networks.",
      "startOffset" : 183,
      "endOffset" : 186
    }, {
      "referenceID" : 15,
      "context" : "Our results largely improve upon those presented in [17]: in particular, we achieve faster convergence together with lower memory and communication costs.",
      "startOffset" : 52,
      "endOffset" : 56
    }, {
      "referenceID" : 10,
      "context" : "We consider the problem of estimating the following quantity, known as a degree two U -statistic [12]:1",
      "startOffset" : 97,
      "endOffset" : 101
    }, {
      "referenceID" : 3,
      "context" : "The first one is the within-cluster point scatter [4], which measures the clustering quality of a partition P of X as the average distance between points in each cell C ∈ P .",
      "startOffset" : 50,
      "endOffset" : 53
    }, {
      "referenceID" : 16,
      "context" : "One of the earliest work on this canonical problem is due to [19], but more efficient algorithms have recently been proposed, see for instance [10, 2].",
      "startOffset" : 61,
      "endOffset" : 65
    }, {
      "referenceID" : 9,
      "context" : "One of the earliest work on this canonical problem is due to [19], but more efficient algorithms have recently been proposed, see for instance [10, 2].",
      "startOffset" : 143,
      "endOffset" : 150
    }, {
      "referenceID" : 1,
      "context" : "One of the earliest work on this canonical problem is due to [19], but more efficient algorithms have recently been proposed, see for instance [10, 2].",
      "startOffset" : 143,
      "endOffset" : 150
    }, {
      "referenceID" : 1,
      "context" : "Of particular interest to us is the work of [2], which introduces a randomized gossip algorithm for computing the empirical mean (4) in a context where nodes wake up asynchronously and simply average their local estimate with that of a randomly chosen neighbor.",
      "startOffset" : 44,
      "endOffset" : 47
    }, {
      "referenceID" : 2,
      "context" : "As long as the network graph is connected and non-bipartite, the local estimates converge to (4) at a rate O(e−ct) where the constant c can be tied to the spectral gap of the network graph [3], showing faster convergence for well-connected networks.",
      "startOffset" : 189,
      "endOffset" : 192
    }, {
      "referenceID" : 13,
      "context" : "3 Such algorithms can be extended to compute other functions such as maxima and minima, or sums of the form ∑n i=1 f(Xi) for some function f : X → R (as done for instance in [15]).",
      "startOffset" : 174,
      "endOffset" : 178
    }, {
      "referenceID" : 5,
      "context" : "Some work has also gone into developing faster gossip algorithms for poorly connected networks, assuming that nodes know their (partial) geographic location [6, 13].",
      "startOffset" : 157,
      "endOffset" : 164
    }, {
      "referenceID" : 11,
      "context" : "Some work has also gone into developing faster gossip algorithms for poorly connected networks, assuming that nodes know their (partial) geographic location [6, 13].",
      "startOffset" : 157,
      "endOffset" : 164
    }, {
      "referenceID" : 4,
      "context" : "For a detailed account of the literature on gossip algorithms, we refer the reader to [18, 5].",
      "startOffset" : 86,
      "endOffset" : 93
    }, {
      "referenceID" : 15,
      "context" : "To the best of our knowledge, this problem has only been investigated in [17].",
      "startOffset" : 73,
      "endOffset" : 77
    }, {
      "referenceID" : 2,
      "context" : "The value βn−1 is also known as the spectral gap of G and graphs with a larger spectral gap typically have better connectivity [3].",
      "startOffset" : 127,
      "endOffset" : 130
    }, {
      "referenceID" : 15,
      "context" : "To estimate Ûn(H), U2-gossip [17] does not use averaging.",
      "startOffset" : 29,
      "endOffset" : 33
    }, {
      "referenceID" : 1,
      "context" : "so one can use an equivalent model with a global clock ticking at a rate n Poisson process and a random edge draw at each iteration, as in synchronous setting (one may refer to [2] for more details on clock modeling).",
      "startOffset" : 177,
      "endOffset" : 180
    }, {
      "referenceID" : 15,
      "context" : "We compare the performance of our algorithms to that of U2-gossip [17] — see supplementary material for additional comparisons to some baseline methods.",
      "startOffset" : 66,
      "endOffset" : 70
    }, {
      "referenceID" : 17,
      "context" : "• Watts-Strogatz: This random network generation technique is introduced in [20] and allows us to create networks with various communication properties.",
      "startOffset" : 76,
      "endOffset" : 80
    }, {
      "referenceID" : 5,
      "context" : "In future work, we plan to investigate whether adaptive communication schemes (such as those of [6, 13]) can be used to speed-up our algorithms.",
      "startOffset" : 96,
      "endOffset" : 103
    }, {
      "referenceID" : 11,
      "context" : "In future work, we plan to investigate whether adaptive communication schemes (such as those of [6, 13]) can be used to speed-up our algorithms.",
      "startOffset" : 96,
      "endOffset" : 103
    }, {
      "referenceID" : 6,
      "context" : "Our contribution could also be used as a building block for decentralized optimization of U -statistics, extending for instance the approaches of [7, 16].",
      "startOffset" : 146,
      "endOffset" : 153
    }, {
      "referenceID" : 14,
      "context" : "Our contribution could also be used as a building block for decentralized optimization of U -statistics, extending for instance the approaches of [7, 16].",
      "startOffset" : 146,
      "endOffset" : 153
    } ],
    "year" : 2015,
    "abstractText" : "Efficient and robust algorithms for decentralized estimation in networks are essential to many distributed systems. Whereas distributed estimation of sample mean statistics has been the subject of a good deal of attention, computation of U statistics, relying on more expensive averaging over pairs of observations, is a less investigated area. Yet, such data functionals are essential to describe global properties of a statistical population, with important examples including Area Under the Curve, empirical variance, Gini mean difference and within-cluster point scatter. This paper proposes new synchronous and asynchronous randomized gossip algorithms which simultaneously propagate data across the network and maintain local estimates of the U -statistic of interest. We establish convergence rate bounds of O(1/t) and O(log t/t) for the synchronous and asynchronous cases respectively, where t is the number of iterations, with explicit data and network dependent terms. Beyond favorable comparisons in terms of rate analysis, numerical experiments provide empirical evidence the proposed algorithms surpasses the previously introduced approach.",
    "creator" : null
  }
}