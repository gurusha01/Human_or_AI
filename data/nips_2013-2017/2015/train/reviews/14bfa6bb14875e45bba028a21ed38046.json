{"title": "Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks", "abstract": "State-of-the-art object detection networks depend on region proposal algorithms to hypothesize object locations. Advances like SPPnet and Fast R-CNN have reduced the running time of these detection networks, exposing region proposal computation as a bottleneck. In this work, we introduce a Region Proposal Network (RPN) that shares full-image convolutional features with the detection network, thus enabling nearly cost-free region proposals. An RPN is a fully-convolutional network that simultaneously predicts object bounds and objectness scores at each position. RPNs are trained end-to-end to generate high-quality region proposals, which are used by Fast R-CNN for detection. With a simple alternating optimization, RPN and Fast R-CNN can be trained to share convolutional features. For the very deep VGG-16 model, our detection system has a frame rate of 5fps (including all steps) on a GPU, while achieving state-of-the-art object detection accuracy on PASCAL VOC 2007 (73.2% mAP) and 2012 (70.4% mAP) using 300 proposals per image. Code is available at https://github.com/ShaoqingRen/faster_rcnn.", "id": "14bfa6bb14875e45bba028a21ed38046", "authors": ["Shaoqing Ren", "Kaiming He", "Ross Girshick", "Jian Sun"], "conference": "NIPS2015", "accepted": true, "reviews": [{"comments": "The goal of the paper is clear and the experimental results are solid. However, the paper is not easy to follow with a few confusing parts mentioned below. 1. Why RPN is translation-invariant, but [19] is not. What about Overfeat?\n\n2. Many parameters are set manually without further analysis. Just to name a few: Why n=3, k=9. 3. The training procedure seems complicated and not stable. Why not applying the same training procedure multiple times? Have the authors tried many other settings, but find the current one performs the best? The authors propose a novel region proposal method which shares the CNN feature used for object localization. The region proposal method consists of a classification layer for recognizing object v.s. non-object, and a regression layer for predicting object bounding boxes. Due to sharing the feature computation with object localization module, the combined new RCNN is ~10x faster than fast RCNN and slightly more accurate. Since the training procedure of object localization CNN assumes regions are given, a multiple stages alternative training procedure is proposed.", "IS_ANNOTATED": false, "IS_META_REVIEW": false}, {"comments": "The paper presents a region proposal network (RPN) which shares the conv features with R-CNN and includes two fully connected layers that predicts object bounds and objectness scores at each position. RPN is heuristically combined with Fast R-CNN for object detection and achieves state-of-the-art performance on VOC07 and VOC12. The running time of generating region proposals is greatly reduced since RPN shares the conv layers with the detection network.\n\nPros: - Smart idea on sharing conv layers between RPN and R-CNN which greatly reduced the run-time of object proposals.\n\n- State-of-the-art performance on object detection.\n\n- Well-written paper.\n\nCons:\n\n- The training of RPN and fast R-CNN are weakly combined by alternating optimization and there is no convergence proof.\n\n- RPN can be used independently as a region proposal method. However, it doesn't seem to outperform selective search.\n\n  This is a very nice piece of work, which improves both the efficiency and accuracy of R-CNN in object detection. Well-written paper and thorough experimental evaluations. The only concern is on how to combine RPN and fast R-CNN for object detection. The proposed alternating optimization method is a bit heuristic.", "IS_ANNOTATED": false, "IS_META_REVIEW": false}, {"comments": "This work is a natural extension to the existing CNN based object detection. My concerns are as follows.\n\n1. In the optimization section, it looks like there is only one iteration for the alternating optimization between RPN and R-CNN. If this is the case, it assumes the proposals generated by the first iterated RPN are optimal, which is obviously not true.\n\n2. When the pixel-wise sliding window is applied to the top layer of CNN, what is the step size on the image layer? Since CNN has several rounds of max-pooling, the top level is in a much smaller scale compared with the input image. The sliding window on the top level may have a big step on the image level, causing inaccurate bounding box locations.\n\n3. What is definition of $h_a$ in the line 173 and 174?\n\n This work proposes a two stage object detection algorithm based on convolutional neural network (CNN). The first stage is region proposal, which is based on the traditional sliding window method but working on the top layer feature map of CNN (RPN). In the second stage, a fast R-CNN is applied to the proposed regions. Since the convolution layers are shared between RPN and R-CNN, and the calculation is speeded up using GPU, the algorithm can achieve near real-time (5fps).", "IS_ANNOTATED": false, "IS_META_REVIEW": false}], "histories": []}
