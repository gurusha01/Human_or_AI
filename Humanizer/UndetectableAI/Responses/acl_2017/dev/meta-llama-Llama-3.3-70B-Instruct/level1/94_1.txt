This study introduces a transition system that is entirely non monotonic and relies upon the non projective Covington algorithm for dependency parsing purposes.The key highlights of this research include; 
The writers suggest a monotonic version of the Covington parser that enables fixing past mistakes by assigning new heads to nodes while upholding the single head and acyclicity rules. 
The researchers created a dynamic oracle that relies on easily calculable estimations of the loss because calculating the exact loss, in a non monotonic and non projective setting is challenging. 
The authors test their technique on 19 datasets from the CoNNL X and CoNNL Xl tasks and find that the non monotonic dynamic oracle performs better than the monotonic version, in most languages assessed in the study. 
The notable aspects of this paper include; 
A perspective. The innovative non monotonic transition system and approximate dynamic oracle bring new insights to the realm of dependency parsing. 
The authors extensively examine the monotonic transition system and the approximate dynamic oracle in their theoretical groundwork, with detailed explanations of proofs and algorithms. 
The authors thoroughly test their method through experiments. Compare it with the monotonic version and a static oracle, in their evaluation process. 

The paper has some drawbacks, such, as; 
The non linear shift system and the rough dynamic guide might be challenging to put into practice and comprehend possibly restricting their use. 
Computational efficiency could be affected by the high computational cost of estimating loss boundaries in a way that might impact the parsers efficiency. 
The authors haven't delved deeply into the errors made by the monotonic dynamic oracle to pinpoint areas for enhancement effectively. 
Questions, for writers; 
How are the authors intending to simplify the monotonic transition system and approximate dynamic oracle to reach a broader audience? 
Could the writers offer information, about how the computational efficiency of calculating approximate loss bounds influences the overall efficiency of the parser? 
How do the writers intend to examine and address the mistakes made by the monotonic dynamic oracle to enhance its effectiveness even further? 