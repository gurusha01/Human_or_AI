This research paper introduces an approach to neural program creation known as the Neural Symbolic Machine (NSMs). It combines a network with a symbolic non differentiable computer to achieve its goals effectively.The NSMs is comprised of the programmer for generating programs the computer for executing these programs and the manager providing guidance and oversight throughout the process.The programmer employs a sequence, to sequence model with a memory feature that enables it to handle and reference intermediate variables efficiently. The computer acts as a Lisp interpreter running programs, against knowledge and offering coding support to the programmer. 
The key accomplishments of this study include; 
The NSN framework blends the capabilities of networks with symbolic computing techniques, in its introduction. 
The creation of a model that can sequence information while incorporating a memory element to capture and reference variables. 
Using a Lisp interpreter, on the computer creates a user neural interface and enables programs to run efficiently. 
The positive aspects of this document include; 
The NSN framework represents an creative method, for neural program induction that could address the constraints of conventional neural networks effectively. 
Using a Lisp interpreter, on the computer allows for a high level programming language that can express meanings effectively. 
The test outcomes demonstrate that the NSN excels in performance on a semantic parsing dataset, with limited guidance achieving cutting edge results. 
The papers shortcomings include; 
The process of training is intricate and necessitates adjustment of hyperparameters. 
The NSMs may not be widely used in areas without access, to a Lisp interpreter, which could restrict their application range. 
The paper lacks an examination of the mistakes made by the NSN system that could offer valuable insights into its drawbacks and possible enhancements. 
Queries, for writers; 
How does the NSN deal with words and entities not found in its database? 
Can the NSN method be used in areas than semantic parsing, like generating natural language or answering questions? 
How does the NSN stack up against neural programming models, like the Neural Programmer or the Dynamic Neural Module Network when it comes to how well they perform and how easily they can scale up? 