The research paper makes creative links between arithmetic circuits (ACs) and probabilistic sentential decision diagrams (PSDDs) introducing a new method to convert ACs into graphical models by multiplying PSDDs that represent the factors of the model directly.This fresh approach, to building ACs offers benefits in terms of compilation sizes and time when compared to traditional compilers. The paper is very well written. I believe it deserves acceptance with just a few minor points to mention.   
The title question is whether the current title effectively represents the content of the paper or not suggesting that a title like "Enhancing Graphical Models with PSDD Multiplication, for Efficient AC Compilation'' could better convey the themes and advancements discussed in the study.   
Could we think of PSDDs as a form of SDDs (known as ASDDs) where their values add up to one. Similar to how Binary Decision Diagram (BDDs) and Algebraic Decision Diagram (ADDs) are related in the context of naming conventions for these structures? It seems that the comparison between factors and probabilities leans towards this idea suggesting an inclusive and understandable term, like ASDD might be worth considering.   
Is it essential for both decomposability and determinism to be present, for inference (potentially linear time wise)? If thats the case could the authors briefly elaborate on why inference becomes more challenging without those characteristics in place? From what I gather (although I could be mistaken) my understanding was that any AC representation of a model enables linear time inference based on the AC size. If this interpretation is correct. Is there an algorithm for multiplying PSDD that doesn't keep these characteristics but allows for effective inference, in the resulting AC?   
Algorithm 1 at line 19 mentions the implementation of cache in the algorithm and questions if it follows an approach to ADDs by recursively caching all subcircuits to maintain a unique identifier for each PSDD. It would be beneficial for the authors to provide clarity, on this aspect since caching plays a crucial role in efficiently implementing the Multiply algorithm.   
In Section 6 the explanation of annotated ordered valued decision diagrams ( AOMDD s ) could benefit from a clearer comparison to PSDD s. Can the authors provide details, on how these two representations differ? 