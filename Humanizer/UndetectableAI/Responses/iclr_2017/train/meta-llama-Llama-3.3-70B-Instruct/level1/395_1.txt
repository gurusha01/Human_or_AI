In brief
The document introduces Edward as a probabilistic programming language that includes two key elements. Random variables and inference. To enhance flexibility and computational efficiency compared to conventional deep learning approaches by giving equal importance to inference tasks. Edward offers an refined method, for defining probabilistic models and inference procedures which simplifies the process of testing various models and algorithms with ease. 
Choice
My decision to approve this paper is based on two reasons. Firstly because the paper addresses an important issue in probabilistic programming by introducing a versatile and effective language and secondly because the approach is well grounded and fits well within the context of existing research, in probabilistic programming and deep learning. 
Arguments, in favor
The article offers an brief overview of the challenges in probabilistic programming and the shortcomings of current programming languages, in this area. It explains the importance of having a language that prioritizes inference methods and enables effective specification of probabilistic models and algorithms. Additionally the paper delves into an examination of previous research emphasizing the advantages and drawbacks of existing languages while showcasing how Edward tackles these issues effectively. 
The papers technical advancements are notable as they offer an refined approach to defining probabilistic models and inference methods using composite structures. The authors showcase Edwards adaptability and effectiveness across instances, like variational autoencoders, Bayesian neural networks and stochastic variational inference. 
Extra Input Appreciated 
To enhance the paper further; my recommendation is for the authors to offer information regarding Edwards implementation. Such as details, about the API and optimizations applied to attain the speed improvements mentioned in the report The authors might also consider including more instances of how Edward can address real life issues effectively to illustrate the languages practical significance. 
Queries, for the Writers 
In order to better grasp the content of the paper at hand I'd like to pose a questions to the authors, for clarification; 
Could you please share information, about how Edward is implemented and elaborate on the API and optimizations that were employed to achieve the speed improvements mentioned in the report? 
How does Edward manage control flow and recursion and are there any intentions to expand the language to accommodate these functionalities? 
Can you give me instances of how Edward could be applied to address real life issues and showcase the tangible effects of using the language, in practical scenarios? 